[
    {
        "id": "13b5f07711a4411e",
        "type": "tab",
        "label": "GENERIC Setup & Utils",
        "disabled": false,
        "info": ""
    },
    {
        "id": "80ed84516caba4f7",
        "type": "tab",
        "label": "GENERIC Tests",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0796678ec01bc492",
        "type": "tab",
        "label": "Semantic Extractor MAIN",
        "disabled": false,
        "info": ""
    },
    {
        "id": "75bc5fa0db2ad379",
        "type": "tab",
        "label": "TEST POST EXTRACTOR and RF",
        "disabled": false,
        "info": ""
    },
    {
        "id": "da309c1626dccde8",
        "type": "tab",
        "label": "BACKUP",
        "disabled": false,
        "info": ""
    },
    {
        "id": "11c41b6d.6baf65",
        "type": "subflow",
        "name": "SPARQL KB Connector",
        "info": "Inputs:\n\nONE QUERY:\n Required: msg.query :\n  The Query itself (String or JSON (created from SPARQL.js Parser ONLY!))\n Optional (for query string): msg.mode :\n  FORCE 'select' or 'update' (or 'delete') for SPARQL 1.1\n  Best in Auto Mode...\n Optional: msg.endpoint : Alternate endpoint\n\n--OR--\nMANY QUERIES:\n Required: msg.queries: Array of Query Strings!\n\nSparql errors are filtered before query is sent to KB.\n-------------------------------------------------\nFOR EACH ONE QUERY:\nOutputs:\n For select: Array of objects\n    Each has key value pairs. Key is variable name\n For update: msg.payload[0] is 'Success' or 'Failure'\n    msg.payload[1] is the message.\n    The rest is up to the server.\n\nFOR MANY QUERIES:\nArray of the outputs,\none output at the index of the corresponding query.\n\nMore on:\nSPARQL.js: https://github.com/RubenVerborgh/SPARQL.js/\n ",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 40,
                "wires": [
                    {
                        "id": "2664da75.b97dc6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1180,
                "y": 620,
                "wires": [
                    {
                        "id": "b5a784c8.c31318",
                        "port": 0
                    },
                    {
                        "id": "a9463eb1.ef097",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "61834c2663a6ece6",
        "type": "subflow",
        "name": "BranchJoin",
        "info": "\nThe BranchJoin node can be used in each branch that you need to join. One overall Join node should be used in the end, linking all the outputs of the individual BranchJoin nodes.\n\nThe UI node needs to be configured with the following details:\n - Total count is the total number of branches expected to join.\n - Position in sequence should be from 1 to total count.\n\nAll branch outputs need to produce a relevant message for the final message to be complete and recompiled. \n\n",
        "category": "PHYSICS",
        "in": [
            {
                "x": 140,
                "y": 120,
                "wires": [
                    {
                        "id": "6cf5b4224f0daa69"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 120,
                "wires": [
                    {
                        "id": "6cf5b4224f0daa69",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "totalcount",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Total Count"
                    }
                }
            },
            {
                "name": "position",
                "type": "num",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Position in sequence"
                    }
                }
            }
        ],
        "meta": {},
        "color": "#FFF0F0"
    },
    {
        "id": "aeaa52ebbbf839e0",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": false,
        "alpnprotocol": ""
    },
    {
        "id": "33d5e5f7.4a9b4a",
        "type": "comment",
        "z": "11c41b6d.6baf65",
        "name": "Knowledge Base Connector",
        "info": "",
        "x": 580,
        "y": 20,
        "wires": []
    },
    {
        "id": "3a1aae3d.9755e2",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "SPARQL_Request",
        "func": "//Setup\nconst fetch = context.global.fetch;\nvar SparqlHttp = context.global.sparqlhttp_simple;\nSparqlHttp.fetch = fetch;\n \n//Which endpoint to query, is in msg.endpoint\nvar endpoint = new SparqlHttp({endpointUrl: msg.endpoint});\n\nvar result = null;\n//The SPARQL query itself is in msg.query\n//Run query with promises\nendpoint.selectQuery(msg.query).then(function (res) {\n    return res.text();\n    //Result body of the query\n}).then(function (body) {\n    console.log(\"SPARQL Request Completed!\");\n    // parse the body\n    result = JSON.parse(body);\n    msg.payload = result;\n    node.send(msg);\n//Necessary to catch the error...\n}).catch(function (err) {\n  console.error(err);\n  node.send({err:err});\n});\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 240,
        "wires": [
            [
                "cabbd70c.8bd7f8"
            ]
        ],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "c7479388.da797",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "SPARQL_Update",
        "func": "//Setup\nconst fetch = context.global.fetch;\nvar SparqlHttp = context.global.sparqlhttp_simple;\nSparqlHttp.fetch = fetch;\n \n//Which endpoint to query, is in msg.endpoint\nvar endpoint = new SparqlHttp({updateUrl: msg.endpoint});\n\nvar result = null;\n//The SPARQL query itself is in msg.query\n//Run query with promises\nendpoint.updateQuery(msg.query).then(function (res) {\n    return res.text();\n    //Result body of the query\n}).then(function (body) {\n    console.log(\"SPARQL Request Completed!\\n\" + body );\n    msg.payload = body;\n    node.send(msg);\n//Necessary to catch the error...\n}).catch(function (err) {\n  console.error(err);\n  node.send({err:err});\n});\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 300,
        "wires": [
            [
                "50fe31c5.f3575"
            ]
        ],
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "50096791.77b828",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "Process Response",
        "func": "//Static Prefixes if prefixes not defined in query.\nconst prefixes = global.get(\"KB_PARAMS\").prefixes;\n\n//Utility\nconst merge_prefixes = (obj1,obj2) => {\n    var obj3 = {};\n    for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n    for (attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n    return obj3;\n};\n\nvar allPrefixes = merge_prefixes(prefixes,msg.prefixes);\nvar results = [];\nvar variables = msg.payload.head.vars;\n\n//Utility\nconst isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\n\n//Utility: Fix/Remove the prefixes\nconst prefixFilter = (item) =>{\n    item = item + \"\";\n    pieces = item.split('#');//All standard prefixes end with #\n    for (var prefix in allPrefixes) {\n        if(item.includes(allPrefixes[prefix])) {\n            if (prefix === '' || prefix == '#'){\n                item = \"\";\n            }else item = prefix + \":\";\n            item = item + pieces[pieces.length - 1];\n            break;\n        }\n    }\n    return item;\n};\n\n//Create a clean object.\nconst fixObj = (item, index, arr) => {\n    obj = {};\n    for (i = 0 ; i< variables.length;i++){\n        myVar = variables[i];\n        if(isDefined(item[myVar])){\n            obj[myVar] = prefixFilter(item[myVar].value);\n        }\n    }\n    arr[index] = obj;\n};\n\nmsg.payload = msg.payload.results.bindings;\nmsg.payload.forEach(fixObj);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 260,
        "wires": [
            [
                "571dbc75.b3d854"
            ]
        ],
        "icon": "node-red/parser-json.svg"
    },
    {
        "id": "91fd742e.ddb3e8",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "Prepare Request",
        "func": "//Get ALL PARAMETERS\nconst KB_PARAMS = global.get(\"KB_PARAMS\");\n\n//Utility\nconst isDefined = global.get(\"isDefined\");\n\n//Base query for SPARQL.JS\n//Static Prefixes\nconst prefixes = KB_PARAMS[\"prefixes\"];\n//Utility\nconst merge_prefixes = (obj1, obj2) => {\n    var obj3 = {};\n    for (var attrname in obj1) {\n        obj3[attrname] = obj1[attrname];\n    }\n    for (attrname in obj2) {\n        obj3[attrname] = obj2[attrname];\n    }\n    return obj3;\n};\n//Static & mutable for select queries\nconst queryType = \"SELECT\";\n\n//check if query isn't set up\nif (!isDefined(msg.query)) {\n    console.error(\"DEFINE SPARQL QUERY!!!\");\n    msg.error = \"No SPARQL query\";\n    return msg;\n}\nvar type = \"\";\nmsg.prefixes = {};\nconst generator = new context.global.sparqljs.Generator();\n\n//Generate SPARQL from JSON and error filtering.\n//Usable only on queries parsed outside the connector.\nif (typeof msg.query === 'object') { //Input: JSON PARAMETERS.\n    msg.query[\"prefixes\"] = merge_prefixes(prefixes, msg.query.prefixes);\n    for (var prefix in msg.query.prefixes) {\n        if (!isDefined(prefixes[prefix])) {\n            msg.prefixes[prefix] = msg.query.prefixes[prefix];\n        }\n    } //Fix prefixes!\n    //In msg.query...\n    if (msg.query.type == \"query\") {\n        type = \"query\";\n        //...required Input: type:\"query\", variables:[\"?var0\",...], where[{},{},...]\n\n    } else if (msg.query.type == \"update\") {\n        type = \"update\";\n        //...required Input: type:\"update\", updates:[{},{}]\n\n    }\n    msg.query = generator.stringify(msg.query);\n} else if (typeof msg.query === 'string') { //Input: READY SPARQL QUERY.\n    const prefs = global.get(\"KB_PREFS\")\n    const parser = new context.global.sparqljs.Parser(); //Parse input query\n    msg.query = prefs + msg.query;\n    query = parser.parse(msg.query);\n    if (msg.mode === null || msg.mode === undefined) { //Find mode.\n        type = query.type;\n    }\n    for (let prefix in query.prefixes) {\n        if (!isDefined(prefixes[prefix])) {\n            msg.prefixes[prefix] = query.prefixes[prefix];\n        }\n    }\n    query[\"prefixes\"] = merge_prefixes(prefixes, query.prefixes);\n    msg.query = generator.stringify(query);\n} else {\n    console.error(\"WRONG TYPE FOR SPARQL QUERY!!!\");\n    msg.error = \"Malformed query\";\n    return msg;\n}\n\n//SET MODE!\nif (type == \"query\") {\n    msg.mode = 'select';\n} else if (type == \"update\") {\n    msg.mode = 'update';\n} else {\n    console.error(\"WRONG query Type FOR SPARQL!!!\");\n    msg.error = \"Invalid query Type\";\n    return msg;\n}\n\n//SET SPARQL ENDPOINT\nif (msg.mode == 'select' || msg.mode == 'update') {\n    //check if endpoint is set to a different one\n    if (msg.endpoint === null || msg.endpoint === undefined) {\n        if (msg.mode == 'select') {\n            msg.endpoint = KB_PARAMS.endpoints.select;\n        } else if (msg.mode == 'update') {\n            msg.endpoint = KB_PARAMS.endpoints.update;\n        }\n    }\n} else {\n    console.error(\"INVALID SPARQL 1.1 Mode!!!\");\n    msg.error = \"SPARQL mode not well defined!\";\n    return msg;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 200,
        "wires": [
            [
                "ad1b4f76.6881"
            ]
        ],
        "icon": "node-red/arrow-in.svg"
    },
    {
        "id": "ad1b4f76.6881",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "select or update?",
        "property": "mode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "select",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "3a1aae3d.9755e2"
            ],
            [
                "c7479388.da797"
            ],
            [
                "571dbc75.b3d854"
            ]
        ]
    },
    {
        "id": "ad58c121.f123d",
        "type": "catch",
        "z": "11c41b6d.6baf65",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 320,
        "wires": [
            [
                "98c1592c.a50368",
                "e3b06be9.d82d78"
            ]
        ]
    },
    {
        "id": "98c1592c.a50368",
        "type": "debug",
        "z": "11c41b6d.6baf65",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 290,
        "y": 560,
        "wires": []
    },
    {
        "id": "e3b06be9.d82d78",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "error on console",
        "func": "console.error(msg.error.message);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 600,
        "wires": [
            [
                "571dbc75.b3d854"
            ]
        ],
        "icon": "font-awesome/fa-terminal"
    },
    {
        "id": "ccf3aef4.895d4",
        "type": "html",
        "z": "11c41b6d.6baf65",
        "name": "Parse response",
        "property": "payload",
        "outproperty": "payload",
        "tag": "h1,p",
        "ret": "text",
        "as": "single",
        "x": 1080,
        "y": 300,
        "wires": [
            [
                "571dbc75.b3d854"
            ]
        ]
    },
    {
        "id": "c31676c0.343338",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "<html>",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "Error",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 810,
        "y": 320,
        "wires": [
            [
                "ccf3aef4.895d4"
            ],
            [
                "1f1fc294.74887d"
            ],
            [
                "571dbc75.b3d854"
            ]
        ]
    },
    {
        "id": "1f1fc294.74887d",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "Process response",
        "func": "msg.payload = msg.payload.split(\"\\n\").filter( word => word!==\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 340,
        "wires": [
            [
                "571dbc75.b3d854"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "2664da75.b97dc6",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "ManyQueries",
        "property": "queries",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "54f9406.4d54dc"
            ],
            [
                "91fd742e.ddb3e8"
            ]
        ]
    },
    {
        "id": "54f9406.4d54dc",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "Queries list",
        "func": "msg.manyQueries = true;\nmsg.payload = [];\nfor(let i =0; i<msg.queries.length; i++){\n    msg.payload.push(0);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            [
                "b79b124c.1029f"
            ]
        ],
        "icon": "font-awesome/fa-list-ul"
    },
    {
        "id": "b79b124c.1029f",
        "type": "split",
        "z": "11c41b6d.6baf65",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 530,
        "y": 60,
        "wires": [
            [
                "d2f43fbe.9d138"
            ]
        ]
    },
    {
        "id": "d2f43fbe.9d138",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "Clean Query",
        "func": "msg.query = msg.queries[msg.parts.index];\ndelete msg.queries;\ndelete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 60,
        "wires": [
            [
                "91fd742e.ddb3e8"
            ]
        ],
        "icon": "node-red/batch.svg"
    },
    {
        "id": "571dbc75.b3d854",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "filter payload",
        "func": "delete msg.query;\ndelete msg.prefixes;\ndelete msg.mode;\ndelete msg.endpoint;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 600,
        "wires": [
            [
                "a9463eb1.ef097"
            ]
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "a886bc0d.486b6",
        "type": "join",
        "z": "11c41b6d.6baf65",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1010,
        "y": 540,
        "wires": [
            [
                "b5a784c8.c31318"
            ]
        ]
    },
    {
        "id": "b5a784c8.c31318",
        "type": "function",
        "z": "11c41b6d.6baf65",
        "name": "clean",
        "func": "delete msg.manyQueries;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 540,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-filter"
    },
    {
        "id": "a9463eb1.ef097",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "ManyQueries",
        "property": "manyQueries",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 600,
        "wires": [
            [
                "a886bc0d.486b6"
            ],
            []
        ]
    },
    {
        "id": "cabbd70c.8bd7f8",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "error?",
        "property": "err",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 240,
        "wires": [
            [
                "571dbc75.b3d854"
            ],
            [
                "50096791.77b828"
            ]
        ]
    },
    {
        "id": "50fe31c5.f3575",
        "type": "switch",
        "z": "11c41b6d.6baf65",
        "name": "error?",
        "property": "err",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "571dbc75.b3d854"
            ],
            [
                "c31676c0.343338"
            ]
        ]
    },
    {
        "id": "8d11c372f368f07d",
        "type": "comment",
        "z": "11c41b6d.6baf65",
        "name": "To be refactored??",
        "info": "",
        "x": 1030,
        "y": 100,
        "wires": []
    },
    {
        "id": "6cf5b4224f0daa69",
        "type": "function",
        "z": "61834c2663a6ece6",
        "name": "create artificial msg.parts",
        "func": "\n//need to push the new parts down a LIFO structure?\nif (msg.hasOwnProperty(\"parts\")){\n    var parts={};\n    parts=msg.parts;\n    delete msg.parts;\n    msg.parts={};\n    msg.parts.parts=parts;\n    msg.parts.id=msg._msgid;\n} else {\n    msg.parts={};\n    msg.parts.id=msg._msgid;\n}\n\nmsg.parts.count=env.get('totalcount');\nmsg.parts.len=1;\nmsg.parts.index=env.get('position')-1;\nmsg.parts.type=\"array\";\n\n//msg.topic='topic2';\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "736ac340c132865c",
        "type": "inject",
        "z": "13b5f07711a4411e",
        "name": "INIT UTILITY FUNCTIONS GLOBAL",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "payloadType": "date",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "e1ca3649909f1e05"
            ]
        ]
    },
    {
        "id": "e1ca3649909f1e05",
        "type": "function",
        "z": "13b5f07711a4411e",
        "name": "UTILITY FUNCTIONS",
        "func": "const isDefined = (variable) => {\n    if (typeof variable === 'undefined' || variable === null || variable === \"\") {\n        return false;\n    } else return true;\n};\nglobal.set(\"isDefined\", isDefined);\n\n//Utility obj is { protocol:val, endpoint:val} OR endpoint_string\n// -> kb_string (with prefix \"i:\" or <> )\n//if protocol includes _ it also has a method.\nconst kb_protocol_builder = (obj) => {\n    if(typeof obj != \"object\"){\n        console.log(\"kb_protocol_builder: Invalid input\"+ obj);\n        return;\n    }\n    if(typeof obj.protocol != \"string\" || typeof obj.endpoint != \"string\"){\n        console.log(\"kb_protocol_builder: Input object must be { protocol:val, endpoint:val}\");\n        return;\n    }\n\n    const protocol_types = [\n        \"HTTP_GET\",\n        \"HTTP_POST\",\n        \"AMQP\",\n        \"MQTT\",\n        \"WebSocket\"\n    ];\n    //this maps to the above array!!!\n    const protocol_prefs = [\n        [\"http://\",\"https://\"],\n        [\"http://\",\"https://\"],\n        [\"amqp://\",\"amqps://\"],\n        [\"mqtt://\",\"mqtts://\"],\n        [\"ws://\"  ,\"wss://\"  ]\n    ];\n\n    let protocol = obj.protocol.replace(\" \",\"_\");\n    let endpoint = obj.endpoint;\n    ret = \"\";\n    for(let i = 0; i< protocol_types.length; i++){\n        if(protocol==protocol_types[i]){//Supported protocol\n            //If the designated protocol prefixes are not included\n            if(!( endpoint.includes(protocol_prefs[i][0]) || endpoint.includes(protocol_prefs[i][1]) )){\n                if(endpoint.includes(\"://\")){//Wrong protocol.\n                    console.log(\"kb_protocol_builder: Input endpoint has wrong protocol prefix!\");\n                    return;\n                }//otherwise add default.\n                endpoint = protocol_prefs[i][0] + endpoint;\n            }\n            //Build KB string.\n            if(protocol.includes(\"_\")){\n                ret = `\"${protocol}:${endpoint}\"`;\n                break;\n            }else{\n                ret = `<${endpoint}>`;\n                break;\n            }\n        }\n    }\n    if(ret === \"\"){\n        console.log(\"Incorrect protocol type input!\");\n        return;\n    }\n    return ret;\n};\nglobal.set(\"kb_protocol_builder\",kb_protocol_builder);\n\n//Utility kb_string -> { protocol:val, endpoint:val }\nconst kb_protocol_filter = (endpoint) => {\n    if(typeof endpoint != \"string\"){\n        console.log(\"kb_protocol_filter: Invalid input\"+ endpoint);\n        return;\n    }\n\n    const protocol_types = [\n        \"HTTP_GET\",\n        \"HTTP_POST\",\n        \"AMQP\",\n        \"MQTT\",\n        \"WebSocket\"\n    ];\n    //this maps to the above array!!! //Allways included in kb!\n    const protocol_prefs = [\n        [\"http://\",\"https://\"],\n        [\"http://\",\"https://\"],\n        [\"amqp://\",\"amqps://\"],\n        [\"mqtt://\",\"mqtts://\"],\n        [\"ws://\"  ,\"wss://\"  ]\n    ];\n    \n    let ret = {};\n    for(let i = 0; i< protocol_types.length; i++){\n        //If protocol is found\n        if(endpoint.includes(protocol_prefs[i][0]) || endpoint.includes(protocol_prefs[i][1])){\n            if(protocol_types[i].includes(\"_\")){//If it has a method included.\n                temp = endpoint.replace(':','...' );\n                obj = temp.split('...');\n                ret.protocol = protocol_types[i];\n                if (obj[0] != protocol_types[i]) continue;//skip if both protocol and method are not the same.\n                ret.endpoint = obj[1];\n                break;\n            }\n            ret.endpoint = endpoint;\n            ret.protocol = protocol_types[i];\n            break;\n        }\n    }\n\n    if(ret.endpoint === undefined){\n        console.log(\"kb_protocol_filter: Wraning! Unforeseen Input: \"+ endpoint);\n        ret.endpoint = endpoint;\n        for (let i=0; i<protocol_types.length; i++){\n            if(ret.endpoint.includes(protocol_types[i]+\":\")){\n                ret.endpoint = ret.endpoint.replace(':','...' );\n                obj = endpoint.split('...');\n                ret.protocol = obj[0];\n                ret.endpoint = obj[1];\n                break;\n            }\n        }\n    }\n    ret.protocol = ret.protocol.replace(\"_\",\" \");\n    return ret;\n};\nglobal.set(\"kb_protocol_filter\", kb_protocol_filter);\n\nconst build_credentials = (key, pass) => {\n    temp = {};\n    temp.key = key;\n    temp.password = pass;\n    return  JSON.stringify(temp);\n};\nglobal.set(\"build_credentials\", build_credentials);\n\nconst filter_credentials = (creds) => {\n    temp = JSON.parse(creds);\n    if(temp.key !== undefined || temp.password !== undefined){\n        return temp;\n    }\n};\nglobal.set(\"filter_credentials\", filter_credentials);\n\nconst build_endpoint_creds = (endpoint, username, password) => {\n    temp = {};\n    temp.username = username;\n    temp.password = password;\n    temp.endpoint = endpoint;\n    return JSON.stringify(temp);\n};\nglobal.set(\"build_endpoint_creds\", build_endpoint_creds);\n\nconst filter_endpoint_creds = (creds) => {\n    temp = JSON.parse(creds);\n    if(temp.username !== undefined || temp.password !== undefined || temp.endpoint !== undefined){\n        return temp;\n    }\n};\nglobal.set(\"filter_endpoint_creds\", filter_endpoint_creds);\n\n//UTIL: pop from array on specific index\nconst popIndex = (array, index) => {\n    temp = array[index];\n    array.splice(index, 1);\n    return temp;\n};\nglobal.set(\"popIndex\",popIndex);\n\n//UTIL: pop from arrays random index!\nconst popRandom = (array) => {\n    return popIndex(array, Math.floor(Math.random() * array.length));\n};\nglobal.set(\"popRandom\", popRandom);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "a89aca7d2670531b",
        "type": "function",
        "z": "13b5f07711a4411e",
        "name": "Set a LOG TEST CHECKPOINT",
        "func": "console.log(\"TEST_CHECKPOINT:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\");",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "366de0bb39babc02",
        "type": "inject",
        "z": "13b5f07711a4411e",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "a89aca7d2670531b"
            ]
        ]
    },
    {
        "id": "d2cac3e61f12c8b8",
        "type": "inject",
        "z": "13b5f07711a4411e",
        "name": "SET KB",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "",
        "topic": "",
        "x": 100,
        "y": 220,
        "wires": [
            [
                "0a2dcd882464a1b6"
            ]
        ]
    },
    {
        "id": "0a2dcd882464a1b6",
        "type": "function",
        "z": "13b5f07711a4411e",
        "name": "SET KB PARAMETERS",
        "func": "const params = {\n    \"endpoints\": {\n        \"select\": \"http://83.212.240.170:3030/affectus/sparql\",\n        \"update\": \"http://83.212.240.170:3030/affectus/update\"\n    },\n    \"prefixes\": {\n        \"\": \"http://www.hua.gr/affectus#\",\n        \"rdf\": \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\",\n        \"rdfs\": \"http://www.w3.org/2000/01/rdf-schema#\",\n        \"owl\": \"http://www.w3.org/2002/07/owl#\",\n        \"xsd\": \"http://www.w3.org/2001/XMLSchema#\",\n        \"time\": \"http://www.w3.org/2006/time#\",\n        \"geojson\": \"https://purl.org/geojson/vocab#\",\n        \"i\": \"http://server/unset-base/#\"\n    }\n\n}\n\nglobal.set(\"KB_PARAMS\", params);\n\n// Precompute the prefixes string of SPARQL QUERY \nlet kb_prefixes = \"\"\nObject.keys(params.prefixes).forEach((key) => {\n    kb_prefixes =  kb_prefixes +\n        `PREFIX ${key}: <${params.prefixes[key]}>\n`;\n})\n\nglobal.set(\"KB_PREFS\", kb_prefixes)",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "4ad5103d7223f70a",
        "type": "inject",
        "z": "80ed84516caba4f7",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "a7b4f39b25a5daac"
            ]
        ]
    },
    {
        "id": "a7b4f39b25a5daac",
        "type": "function",
        "z": "80ed84516caba4f7",
        "name": "Check Global Context",
        "func": "msg.payload = context.global;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 40,
        "wires": [
            [
                "8c3d72b122bfa7fe"
            ]
        ]
    },
    {
        "id": "8c3d72b122bfa7fe",
        "type": "debug",
        "z": "80ed84516caba4f7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 510,
        "y": 40,
        "wires": []
    },
    {
        "id": "cad709573cbbba97",
        "type": "inject",
        "z": "80ed84516caba4f7",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 80,
        "wires": [
            [
                "bc67b4d20fedc659"
            ]
        ]
    },
    {
        "id": "bc67b4d20fedc659",
        "type": "function",
        "z": "80ed84516caba4f7",
        "name": "Get all current KB params",
        "func": "msg.payload = global.get(\"KB_PARAMS\");\nmsg.secondary = global.get(\"KB_PARAMS\").prefixes;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            [
                "7730b87ca13eb4c8",
                "7ccd5c3005e16e18",
                "9ff0661b50073f6a"
            ]
        ]
    },
    {
        "id": "7730b87ca13eb4c8",
        "type": "debug",
        "z": "80ed84516caba4f7",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "false",
        "x": 530,
        "y": 80,
        "wires": []
    },
    {
        "id": "7ccd5c3005e16e18",
        "type": "debug",
        "z": "80ed84516caba4f7",
        "name": "Empty SPARQL prefix",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.prefixes.\"\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 120,
        "wires": []
    },
    {
        "id": "9ff0661b50073f6a",
        "type": "debug",
        "z": "80ed84516caba4f7",
        "name": "prefixes only",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "secondary",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 160,
        "wires": []
    },
    {
        "id": "bb5174bc7499fbeb",
        "type": "inject",
        "z": "80ed84516caba4f7",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 260,
        "wires": [
            [
                "cca5701191355ec5"
            ]
        ]
    },
    {
        "id": "6629629cd6125236",
        "type": "debug",
        "z": "80ed84516caba4f7",
        "name": "debug 10",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 260,
        "wires": []
    },
    {
        "id": "cca5701191355ec5",
        "type": "exec",
        "z": "80ed84516caba4f7",
        "command": "node --version",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 300,
        "y": 260,
        "wires": [
            [
                "6629629cd6125236"
            ],
            [],
            []
        ]
    },
    {
        "id": "be43ca335a7fecac",
        "type": "http response",
        "z": "0796678ec01bc492",
        "name": "HTTP Out",
        "statusCode": "",
        "headers": {},
        "x": 1680,
        "y": 1440,
        "wires": []
    },
    {
        "id": "c8b5d8fa14b0b5c6",
        "type": "http request",
        "z": "0796678ec01bc492",
        "name": "RF CALL",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "bearer",
        "senderr": false,
        "x": 1320,
        "y": 1300,
        "wires": [
            [
                "934c59797f54a935"
            ]
        ]
    },
    {
        "id": "a59e13e5acb5a7d1",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "TO RF",
        "info": "This needs to have different branches in order to go to the RF, store the triples, then return, clear the msg.headers and merge with the one coming from the initial flow and needs to maintain the headers in order to return to the initial caller the app id from the RF",
        "x": 1330,
        "y": 1260,
        "wires": []
    },
    {
        "id": "236b8fc60333295c",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "INITIALIZE RF ENDPOINT",
        "props": [
            {
                "p": "RFendpoint",
                "v": "https://semantics-block.apps.ocphub.physics-faas.eu",
                "vt": "str"
            },
            {
                "p": "RFkey",
                "v": "EXAMPLE",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "4c90165d84edfbf5"
            ]
        ]
    },
    {
        "id": "9306533c140c4b10",
        "type": "subflow:61834c2663a6ece6",
        "z": "0796678ec01bc492",
        "name": "",
        "env": [
            {
                "name": "totalcount",
                "value": "2",
                "type": "num"
            },
            {
                "name": "position",
                "value": "2",
                "type": "num"
            }
        ],
        "x": 1250,
        "y": 1500,
        "wires": [
            [
                "1934029b5e7f9d58"
            ]
        ]
    },
    {
        "id": "d1a05e784dcc61d3",
        "type": "subflow:61834c2663a6ece6",
        "z": "0796678ec01bc492",
        "name": "",
        "env": [
            {
                "name": "totalcount",
                "value": "2",
                "type": "num"
            },
            {
                "name": "position",
                "value": "1",
                "type": "num"
            }
        ],
        "x": 1710,
        "y": 1300,
        "wires": [
            [
                "1934029b5e7f9d58"
            ]
        ]
    },
    {
        "id": "934c59797f54a935",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "clear headers",
        "func": "msg.headers={};\nmsg.payload=JSON.parse(msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1300,
        "wires": [
            [
                "c7dfa0dcabe55e29",
                "be43ca335a7fecac"
            ]
        ]
    },
    {
        "id": "1934029b5e7f9d58",
        "type": "join",
        "z": "0796678ec01bc492",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1410,
        "y": 1440,
        "wires": [
            [
                "48f4be39d39c4e5f",
                "553cf98e9cf6b8db"
            ]
        ]
    },
    {
        "id": "19860bd0e70be96a",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "clear payload",
        "func": "delete msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1500,
        "wires": [
            [
                "9306533c140c4b10"
            ]
        ]
    },
    {
        "id": "48f4be39d39c4e5f",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "filter",
        "func": "//top branch has null value, or no errors reported\nlet real = msg.payload.filter(function (e) {return e != null;});\nmsg.payload={};\nmsg.payload=real;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 1440,
        "wires": [
            [
                "be43ca335a7fecac"
            ]
        ]
    },
    {
        "id": "4c90165d84edfbf5",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set RF ENDPOINT",
        "rules": [
            {
                "t": "set",
                "p": "RF_ENDPOINT",
                "pt": "flow",
                "to": "RFendpoint",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "RFkey",
                "pt": "flow",
                "to": "RFkey",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 220,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "94fadd8cd3e30b7f",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "INITIALIZE TEST RF ENDPOINT",
        "props": [
            {
                "p": "RFendpoint",
                "v": "http://localhost:1880/test",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "4c90165d84edfbf5"
            ]
        ]
    },
    {
        "id": "c7dfa0dcabe55e29",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "RF CALL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1700,
        "y": 1220,
        "wires": []
    },
    {
        "id": "553cf98e9cf6b8db",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "RF CALL",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1540,
        "y": 1540,
        "wires": []
    },
    {
        "id": "492507279b26663a",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Filter Flow",
        "func": "if (msg.payload == null) return;\n\nconst { supportedNodeType } = flow.get(\"utilFunctions\");\n\nif (msg.payload.disabled){\n    node.warn({\"error_msg\":\"THIS FLOW IS DISABLED\"});\n    return;\n}\n\nif (! Array.isArray(msg.payload.nodes)){\n    node.warn({\"error_msg\":\"Wrong type! Expects only arrays.\", \"payload.nodes\":msg.payload.nodes});\n    return;\n}\n\nconst originalPayload = msg.payload\nconst old_nodes = msg.payload.nodes;\nconst id = msg.payload.id;\nconst label = msg.payload.label;\n\nmsg.payload = {};\nmsg.payload.type = \"flow\";\nmsg.payload.id = id;\nmsg.payload.label = label;\nmsg.payload.nodes = {};\nmsg.excludedFlowData = [];\n\nfor (let flowNode of old_nodes ) {\n    // Filter out the node if not supported.\n    if(!supportedNodeType(flowNode.type)){\n        msg.excludedFlowData.push(flowNode);\n        continue;\n    }\n    \n    // Each node can be addressed by its id.\n    msg.payload.nodes[flowNode.id] = flowNode;\n}\n\nmsg.originalPayload = originalPayload\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 920,
        "wires": [
            [
                "dee2f3aabea6c55e",
                "edc0ddeb3ea75d5a",
                "ef9873bd9eb2443b",
                "5bb119e1471a0c37"
            ]
        ]
    },
    {
        "id": "dee2f3aabea6c55e",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "New Flow data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 920,
        "wires": []
    },
    {
        "id": "5deb053c65392656",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "set context",
        "props": [
            {
                "p": "context",
                "v": "{\"@context\":{\"@version\":1.1,\"@vocab\":\"http://www.physics-h2020.eu/physics/1.0.0/\",\"flow\":\"http://example_composer.physics.eu/flow/\",\"function\":\"http://example_composer.physics.eu/function/\",\"param\":\"http://example_parameters_repository.physics.eu/\",\"app\":\"http://example_composer.physics.eu/app/\",\"owner\":\"http://example_owners_repository.physics.eu/\",\"proglang\":\"http://languages.programming.physics.eu/\",\"js_lib\":\"http://languages.programming.physics.eu/javascript/lib/\"}}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "c519fcd61267d92e"
            ]
        ]
    },
    {
        "id": "c519fcd61267d92e",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set jsonLdBase",
        "rules": [
            {
                "t": "set",
                "p": "jsonLdBase",
                "pt": "flow",
                "to": "context",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "05a1e0ddad4dda38",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "Set Supported Nodes",
        "props": [
            {
                "p": "supportedNodes",
                "v": "{\"function\":true,\"subflow\":true,\"http\":true}",
                "vt": "json"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 520,
        "y": 80,
        "wires": [
            [
                "f02eb1e27320c5d7"
            ]
        ]
    },
    {
        "id": "f02eb1e27320c5d7",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set supportedNodes",
        "rules": [
            {
                "t": "set",
                "p": "supportedNodes",
                "pt": "flow",
                "to": "supportedNodes",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 80,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "edc0ddeb3ea75d5a",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Excluded Flow Data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "excludedFlowData",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 960,
        "wires": []
    },
    {
        "id": "7eaa643e4f89f8f6",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "Set Utils",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 80,
        "y": 140,
        "wires": [
            [
                "3ca7fac7551cb4fe"
            ]
        ]
    },
    {
        "id": "15dae40faf18b3f6",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set utility functions",
        "rules": [
            {
                "t": "set",
                "p": "utilFunctions",
                "pt": "flow",
                "to": "utilFunctions",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 140,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "3ca7fac7551cb4fe",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Utilities",
        "func": "// Check if node type is supported\nconst supportedNodeType = (nodeType) => {\n    if (typeof nodeType != \"string\") {\n        console.error(`supportedNodeType: nodeType input ${nodeType} is not a string!`);\n        return false;\n    }\n\n    if (!!flow.get(\"supportedNodes\")[nodeType]) {\n        return true;\n    }\n\n    if (nodeType.includes(\":\")) {\n        const localTypes = nodeType.split(\":\");\n        for (const localType of localTypes) {\n            if (supportedNodeType(localType)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    if (nodeType.includes(\" \")) {\n        const localTypes = nodeType.split(\" \");\n        for (const localType of localTypes) {\n            if (supportedNodeType(localType)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    return false;\n};\n\n\n// Check if is valid NPM name. Does not support old package names by default.\nconst validNpmPackage = (str, oldPackages = false) => {\n    const ret = validNpm(str); // Imported library validate-npm-package-name.\n    return oldPackages ?\n        ret.validForNewPackages || ret.validForOldPackages :\n        ret.validForNewPackages;\n};\n\n\n// Check if Path or URI\nconst isPathOrUri = (str) => {\n    return isAbsolutePath(str) || isRelativePath(str) || isUri(str);\n};\n\n// Add object-property-value to a temp triples index for multiple objects.\nconst tempTripleToIndex = (object, property, value, tempTriplesIndex) => {\n    // Not a pure function! An empty or non empty object is changed here!\n    // tempTriplesIndex: { object: { property: [value] } }\n    // For multiple values, input all values in an array as value parameter.\n    if (!(object in tempTriplesIndex)) {\n        tempTriplesIndex[object] = {};\n    }\n    if (!(property in tempTriplesIndex[object])) {\n        tempTriplesIndex[object][property] = [];\n    }\n    if (Array.isArray(value)) {\n        const temp = tempTriplesIndex[object][property];\n        tempTriplesIndex[object][property] = temp.concat(value);\n    } else tempTriplesIndex[object][property].push(value);\n};\n\n// Clean a temp triples index. Meant for the same type of index as above!\nconst cleanTriplesIndex = (tempTriplesIndex) => {\n    // Not a pure function! Input object is changed here!\n    // tempTriplesIndex: { object: { property: [value] } }\n    for (const object in tempTriplesIndex) {\n        for (let property in tempTriplesIndex[object]) {\n            // Remove any duplicate values.\n            if (tempTriplesIndex[object][property].length > 1) {\n                let temp = tempTriplesIndex[object][property];\n                tempTriplesIndex[object][property] = [...new Set(temp)];\n            }\n\n            // If only one value, set value directly.\n            if (tempTriplesIndex[object][property].length == 1) {\n                tempTriplesIndex[object][property] = tempTriplesIndex[object][property][0];\n            }\n        }\n    }\n};\n\n// Add a property value as in semantics, in a JS object for semantics.\n// Does NOT take array value.\nconst addPropertyValue = (js_obj, property, value) => {\n    if (!(property in js_obj)) {\n        js_obj[property] = value;\n    } else {\n        // Results in array.\n        if (!(Array.isArray(js_obj[property]))) {\n            const temp = js_obj[property];\n            js_obj[property] = [temp, value];\n        } else js_obj[property].push(value);\n        // Removes duplicates\n        js_obj[property] = [...new Set(js_obj[property])]\n    }\n};\n\n// Deep clean all empty and faulty values, even NaN.\nconst cleanObj = (obj) => {\n    // @ts-ignore\n    return cleanDeep(obj, NaNValues = true);\n};\n\n// First letter uppercase, rest lowercase\nconst firstLetter = (str) => {\n    return str.replace(/^.{1}/g, str[0].toUpperCase());\n};\n\n// Canonical Semantic property or class name style\nconst toSemanticName = (str, isProperty = false) => {\n    if (isAbsolutePath(str) || isUri(str)) {\n        return str;\n    }\n\n    let newStr = \"\";\n    let i = 0;\n    for (const part of str.split(\" \")) {\n        if (isProperty && i == 0) {\n            for (let subPart of part.split(/(?=[A-Z])/)) {\n                if (isProperty && i == 0) {\n                    newStr = newStr.concat(subPart.toLowerCase());\n\n                } else newStr = newStr.concat(subPart);\n                i++;\n            }\n        } else newStr = newStr.concat(firstLetter(part));\n        i++;\n    }\n    return newStr;\n};\n\nconst bestStringMatch = (str, strArray) => {\n    return stringSimilarity.findBestMatch(str, strArray).\n        bestMatch.target;\n};\n\nconst isObject = (item) => {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\n\nconst mergeDeep = (target, ...sources) => {\n    if (!sources.length) return target;\n    const source = sources.shift();\n\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (isObject(source[key])) {\n                if (!target[key]) Object.assign(target, { [key]: {} });\n                mergeDeep(target[key], source[key]);\n            } else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n\n    return mergeDeep(target, ...sources);\n}\n\nconst isEmptyObject = (obj) => {\n    return Object.keys(obj).length === 0;\n}\n\nmsg.utilFunctions = {\n    // ALL UTIL FUNCTIONS TO FLOW CONTEXT\n    \"supportedNodeType\": supportedNodeType,\n    \"isUri\": isUri, // Imported library validate.io-uri.\n    \"isAbsolutePath\": isAbsolutePath, // Imported library @stdlib/assert-is-absolute-path.\n    \"isRelativePath\": isRelativePath, // Imported library @stdlib/assert-is-relative-path.\n    \"isPathOrUri\": isPathOrUri,\n    \"validNpmPackage\": validNpmPackage,\n    \"tempTripleToIndex\": tempTripleToIndex,\n    \"cleanTriplesIndex\": cleanTriplesIndex,\n    \"addPropertyValue\": addPropertyValue,\n    \"cleanDeep\": cleanDeep, // Imported library clean-deep.\n    \"cleanObj\": cleanObj,\n    \"firstLetter\": firstLetter,\n    \"toSemanticName\": toSemanticName,\n    \"bestStringMatch\": bestStringMatch,\n    \"isObject\": isObject,\n    \"mergeDeep\": mergeDeep,\n    \"isEmptyObject\": isEmptyObject,\n\n    // Test console log only\n    \"testFunc\": () => {\n        console.log(\"Hello testFunc\");\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "isUri",
                "module": "validate.io-uri"
            },
            {
                "var": "isRelativePath",
                "module": "@stdlib/assert-is-relative-path"
            },
            {
                "var": "isAbsolutePath",
                "module": "@stdlib/assert-is-absolute-path"
            },
            {
                "var": "validNpm",
                "module": "validate-npm-package-name"
            },
            {
                "var": "jsonata",
                "module": "jsonata"
            },
            {
                "var": "cleanDeep",
                "module": "clean-deep"
            },
            {
                "var": "stringSimilarity",
                "module": "string-similarity"
            }
        ],
        "x": 220,
        "y": 140,
        "wires": [
            [
                "15dae40faf18b3f6"
            ]
        ]
    },
    {
        "id": "5bb119e1471a0c37",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Semantic Transformation 1",
        "func": "console.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"Semantic Transformation - Phase 1 ==============================\");\n// Generic function import -----------------------------------------------------\nconst {\n    validNpmPackage,\n    isRelativePath,\n    isAbsolutePath,\n    tempTripleToIndex,\n    cleanTriplesIndex,\n    addPropertyValue,\n    toSemanticName,\n} = flow.get(\"utilFunctions\");\nconst codeAnnotationExtractor = flow.get(\"codeAnnotationExtractor\");\n\n// Transformation helper functions ---------------------------------------------\n// Find the appropriate reference for the dependency\nconst libraryDependencyTemplate = (functionNode, lib) => {\n    if (validNpmPackage(lib.module)) {\n        return `js_lib:${lib.module}`;\n    }\n    if (isRelativePath(lib.module) || isAbsolutePath(lib.module)) {\n        // Means local dependency.\n        return `function:${functionNode.id}/dependency/${lib.var}#path=${lib.module}`\n    }\n    return \"\"\n}\n\n// Create the library imports for function nodes.\nconst transformLibs = (functionNode) => {\n\n    let libImports = [];\n\n    if (!(\"libs\" in functionNode) ||\n        functionNode.libs === undefined ||\n        functionNode.libs === null)\n        return libImports;\n\n    for (const lib of functionNode.libs) {\n        libImports.push({\n            \"@id\": `function:${functionNode.id}/dependency/${lib.var}`,\n            \"@type\": \"SoftwareLibrary\",\n            \"label\": lib.var,\n            // js_lib is the scheme to reference the library.\n            // The uri should link to the npm (or yarn) package.\n            \"hasTemplate\": libraryDependencyTemplate(functionNode, lib),\n            \"codeSymbol\": lib.var,\n        });\n    }\n\n    return libImports;\n}\n\n// Filters ---------------------------------------------------------------------\nconst subflowFilter = jsonata(\"[nodes.*[$contains(type, 'subflow:')]]\");\nconst functionsFilter = jsonata(\"[nodes.*[type='function']]\");\nconst httpNodesFilter = jsonata(\"[nodes.*[$contains(type, 'http')]]\");\n\n// Node collections (Lists) ----------------------------------------------------\nconsole.log(\"Node collections ===============================================\");\nconst subflowNodes = subflowFilter.evaluate(msg.payload);\nlet functionNodes = functionsFilter.evaluate(msg.payload);\nlet httpNodes = httpNodesFilter.evaluate(msg.payload);\nlet nodes = []; // Other nodes. To be filled with other types later.\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"subflowNodes\", util.inspect(subflowNodes, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"functionNodes\", util.inspect(functionNodes, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"httpNodes\", util.inspect(httpNodes, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"Other nodes\", util.inspect(nodes, false, null, true));\nconsole.log(\"--------------------------\");\n\n// New constructs from semantics -----------------------------------------------\nconsole.log(\"New constructs for semantics ===================================\");\n// Indexes ( simple id : boolean )\nlet appInterfacesIndex = {}; // Application Interfaces (all types) (OLD ID)\nlet nonWireAppInterfaces = {}; // TO EXCLUDE FROM WIRE TRANSFORMATION (OLD ID)\n// Temporary triples from parsing\nlet flowTriples = {}; // Flow id (complete): {property: [ value]} \nlet functionTriples = {}; // Function id (complete): {property:[ value]}\n// Other triples from any parsing operation (index).\nlet otherTriples = {}; // id (complete or `unset:${var}`) : {property:[ value] }\n// ID indexes, to be used in any situation\nlet oldToNewID = {}; // Old id : new id\nlet newToOldID = {}; // New id : old id\n//Set ID indexes for flow and functions.\noldToNewID[msg.payload.id] = \"flow:\" + msg.payload.id;\nnewToOldID[\"flow:\" + msg.payload.id] = msg.payload.id;\nfor (const oldFunctionNode of functionNodes) {\n    oldToNewID[oldFunctionNode.id] = \"function:\" + oldFunctionNode.id;\n    newToOldID[\"function:\" + oldFunctionNode.id] = oldFunctionNode.id;\n}\n\n/*\nNOTE: Triple indexes may have the \"unset:\" prefix in the key. This means that \nthe id has uncertain matching, i.e. new ID of new entity is not known. It is \nfixed up using the fixUnset function.\n*/\n// Fix all unset IDs\nconst fixUnset = (triplesIndex) => {\n    for (const object in triplesIndex) {\n        if (!object.includes(\"unset:\")) continue;\n\n        const oldId = object.replace(\"unset:\", \"\");\n        if (oldId in oldToNewID) {\n            // Match found. Replace ID.\n            triplesIndex[oldToNewID[oldId]] = triplesIndex[oldId];\n            delete triplesIndex[oldId];\n\n        } else {\n            // Match not found. Add to otherTriples.\n            for (const property in triplesIndex[object]) {\n                tempTripleToIndex(\n                    object,\n                    property,\n                    triplesIndex[object][property],\n                    otherTriples,\n                );\n            }\n        }\n    }\n};\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"oldToNewID\", util.inspect(oldToNewID, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"newToOldID\", util.inspect(newToOldID, false, null, true));\nconsole.log(\"--------------------------\");\n\n// Transformation of NON-workflow nodes ----------------------------------------\n// Transformation for httpNodes ------------------------------------------------\nconsole.log(\"HTTP Nodes Transformation ======================================\");\nfor (let httpNode of httpNodes) {\n    const newId = `flow:${httpNode.z}/interface/${httpNode.id}`\n    oldToNewID[httpNode.id] = newId;\n    newToOldID[newId] = httpNode.id;\n\n    // The new individual\n    let httpAppInterface = {\n        \"@id\": newId,\n        \"@type\": \"REST\",\n        \"label\": httpNode.name,\n    };\n\n    if (httpNode.type == \"http response\") {\n        // Simple output.\n        httpAppInterface[\"@type\"] = \"RESTOutput\";\n    } else {\n        httpAppInterface[\"hasHttpMethod\"] = httpNode.method.toUpperCase();\n        httpAppInterface[\"interfaceURI\"] = httpNode.url;\n\n        if (httpNode.type == \"http in\") {\n            // HTTP in node\n            httpAppInterface[\"allowsUpload\"] = httpNode.upload;\n            httpAppInterface[\"swaggerDoc\"] = httpNode.swaggerDoc;\n\n            // add temporary Triple to index\n            // Flow exposesREST this http interface\n            tempTripleToIndex(\n                `flow:${httpNode.z}`,\n                \"exposesREST\",\n                newId,\n                flowTriples\n            );\n\n        } else if (httpNode.type == \"http request\") {\n            // add temporary Triple to index\n            // Flow consumesREST this http interface\n            tempTripleToIndex(\n                `flow:${httpNode.z}`,\n                \"consumesREST\",\n                newId,\n                flowTriples\n            );\n        }\n    }\n\n    // Indexing required to avoid wrong wire parsing\n    appInterfacesIndex[httpNode.id] = httpAppInterface;\n    nonWireAppInterfaces[httpNode.id] = httpAppInterface;\n}\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"appInterfacesIndex\", util.inspect(appInterfacesIndex, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"nonWireAppInterfaces\", util.inspect(nonWireAppInterfaces, false, null, true));\nconsole.log(\"--------------------------\");\n\n// -----------------------------------------------------------------------------\n\n// Transformation of workflow nodes --------------------------------------------\nconsole.log(\"Workflow Nodes Transformation ==================================\");\nlet completeWorkflowNodes = {}; // COMPLETED nodes for THIS PHASE (OLD ID)\n// Transformation for functionNodes --------------------------------------------\ncleanTriplesIndex(functionTriples); // Cleaned triples for functions.\nfixUnset(functionTriples); // Clean up any unset triple\nlet triplesFromFunctions = [];\nlet semanticFunctionNodes = [];\nfor (const oldFunctionNode of functionNodes) {\n    // Extract function code annotations and semantics. FUNCTION-LEVEL EXTRACTOR\n    const {\n        functionCode,\n        functionAnnotations,\n        triples,\n    } = codeAnnotationExtractor(oldFunctionNode.func);\n\n    const newFuncID = \"function:\" + oldFunctionNode.id\n\n    // The new function individual\n    let newFunctionNode = {\n        \"@id\": newFuncID,\n        \"@type\": \"Function\",\n        \"label\": oldFunctionNode.name,\n        \"initCode\": oldFunctionNode.initialize,\n        \"funcCode\": functionCode,\n        \"finalCode\": oldFunctionNode.finalize,\n        \"callsDependency\": transformLibs(oldFunctionNode),\n    };\n\n\n\n    for (const annotation of functionAnnotations) {\n        addPropertyValue(\n            newFunctionNode,\n            toSemanticName(annotation.property, true),\n            toSemanticName(annotation.value),\n        );\n    }\n\n    for (let triple of triples) {\n        // Fix their naming.\n        triple = {\n            \"object\": toSemanticName(triple.object),\n            \"property\": toSemanticName(triple.property),\n            \"value\": toSemanticName(triple.value),\n        }\n    }\n\n    // External triples that come from inserted functions. To be processed later.\n    triplesFromFunctions = triplesFromFunctions.concat(triples);\n\n    // Get all temporary triples for the function and add them.\n    if (newFuncID in functionTriples) {\n        for (const property in functionTriples[newFuncID]) {\n            newFunctionNode[property] = functionTriples[newFuncID][property]\n        }\n        delete functionTriples[newFuncID]; // Not to go to otherTriples.\n    }\n    // Function complete\n    semanticFunctionNodes.push(newFunctionNode);\n    completeWorkflowNodes[oldFunctionNode.id] = newFunctionNode;\n}\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"semanticFunctionNodes\", util.inspect(semanticFunctionNodes, false, null, true));\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"completeWorkflowNodes\", util.inspect(completeWorkflowNodes, false, null, true));\nconsole.log(\"--------------------------\");\n\n// -----------------------------------------------------------------------------\n\n// Unparsed supported nodes NOW get an ID, in the first phase ------------------\nconsole.log(\"Preparation of unparsed nodes ==================================\");\nconst otherSupportedNodes = {};\nconst oldFlowId = msg.payload.id;\n\n// Pre-parsing of the rest...\nfor (const oldNode of []\n    //NOTE: ADD ALL SUPPORTED NODES that are NOT MAIN! ( .concat( collection ) )\n    .concat(subflowNodes)\n) {\n    const oldNodeId = oldNode.id;\n\n    const newOtherNodeId = `flow:${oldFlowId}/node/${oldNodeId}`;\n    oldToNewID[oldNodeId] = newOtherNodeId;\n    newToOldID[newOtherNodeId] = oldNodeId;\n    completeWorkflowNodes[oldNodeId] = {\n        \"@id\": newOtherNodeId,\n    }\n}\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"completeWorkflowNodes\", util.inspect(completeWorkflowNodes, false, null, true));\nconsole.log(\"--------------------------\");\n\n// Transformation of all application interfaces --------------------------------\nconsole.log(\"Application Interfaces Transformation ==========================\");\nconst supportedNodes = []\n    //NOTE: ADD ALL SUPPORTED NODES!!! (.concat( node group ))\n    .concat(subflowNodes)\n    .concat(functionNodes)\n    .concat(httpNodes);\n\n// @ts-ignore\nconsole.log(\"supportedNodes\", util.inspect(supportedNodes, false, null, true));\n\nmsg.appInterfaces = {};\n// Parse all wires.\nfor (const oldNode of supportedNodes) {\n    const oldNodeId = oldNode.id;\n    // Avoid unsupported nodes.\n    if (!(oldNodeId in oldToNewID)) break;\n\n    let isNonWire = false;\n    const newNodeId = oldToNewID[oldNodeId];\n    let appInterfaceId = \"\";\n    let interfaceIndividual = {};\n\n    if (oldNodeId in nonWireAppInterfaces) {\n        isNonWire = true;\n        appInterfaceId = newNodeId;\n        interfaceIndividual = nonWireAppInterfaces[oldNodeId];\n    }\n\n    let i = 0;\n    for (const wireOutput of oldNode.wires) {\n\n        // If new Message Wire should be created.\n        if (!isNonWire) {\n            // Create a new message wire app interface.\n            appInterfaceId = `flow:${oldFlowId}/interface/${oldNodeId}.out${i}`;\n            interfaceIndividual = {\n                \"@id\": appInterfaceId,\n                \"@type\": \"MessageWire\",\n                \"isNodeOutputOf\": newNodeId,  // Current node\n            }\n        }\n\n        let emptyMsgWire = true;\n        // Iterate over destination connections.\n        for (const oldDestID of wireOutput) {\n\n            // Check if this nr wire connection goes to non-wire app interface.\n            if (oldDestID in nonWireAppInterfaces) {\n                if (!isNonWire) {\n                    // This is a Workflow Node that has interface node as output.\n                    addPropertyValue(\n                        completeWorkflowNodes[oldNodeId], // Current node obj\n                        \"hasNodeOutput\",\n                        oldToNewID[oldDestID] // Destination node \n                    );\n                } else {\n                    // This is an interface node, and connects to interface node.\n                    addPropertyValue(\n                        interfaceIndividual,  // Current node obj\n                        \"interfaceToInterface\",\n                        oldToNewID[oldDestID]  // Destination node\n                    );\n                }\n            } else { // Msg wire connection to workflow node.\n                if (!isNonWire) {\n                    emptyMsgWire = false;\n                    // This is a Workflow Node that connects to another, through\n                    // the newly created message wire interface.\n                    addPropertyValue(\n                        interfaceIndividual,  // New Interface obj\n                        \"isNodeInputOf\",\n                        oldToNewID[oldDestID]  // Destination node\n                    );\n                } else {\n                    // This is an interface Node that connects to Workflow node.\n                    addPropertyValue(\n                        interfaceIndividual, // Current node obj\n                        \"isNodeInputOf\",\n                        oldToNewID[oldDestID]    // Destination node\n                    );\n                }\n            }\n        }\n\n        // Set interface individual appropriately. (Normal wire)\n        if ((!isNonWire) && (!emptyMsgWire)) {\n            msg.appInterfaces[appInterfaceId] = interfaceIndividual;\n        }\n\n        i++; // Next wire...\n    }\n\n    // Set interface individual appropriately. (Not wire)\n    if (isNonWire) msg.appInterfaces[appInterfaceId] = interfaceIndividual;\n\n}\n\n// Monitor\nconsole.log(\"--------------------------\");\n// @ts-ignore\nconsole.log(\"msg.appInterfaces\", util.inspect(msg.appInterfaces, false, null, true));\nconsole.log(\"--------------------------\");\n\n// subflow Nodes check ---------------------------------------------------------\nconsole.log(\"PHASE 1 ready ==================================================\");\n\nmsg.tempSubflowData = subflowNodes;\n\n//Phase 1 complete\n// ID mapping\nmsg.oldToNewID = oldToNewID;\nmsg.newToOldID = newToOldID;\n// Other triples extracted from functions.\nmsg.triplesFromFunctions = triplesFromFunctions;\n// Semi-ready Flow\nmsg.payload = {  // Flow with functions.\n    // Semantically ready\n    \"@id\": \"flow:\" + oldFlowId,\n    \"@type\": \"Flow\",\n    \"label\": msg.payload.label,\n    \"hasFunction\": semanticFunctionNodes,\n\n    // To be further worked on\n    \"hasNode\": nodes\n}\n\n\n\nfixUnset(flowTriples);\nfor (const flowId in flowTriples) {\n    if (flowId == \"flow:\" + oldFlowId) {\n        msg.payload = {\n            ...msg.payload,\n            ...flowTriples[flowId],\n        }\n        delete flowTriples[flowId]; // Not to go to otherTriples.\n    }\n}\n\n// Include other triples to be added in the end.\ncleanTriplesIndex(otherTriples);\nfixUnset(otherTriples);\nmsg.otherTriples = {\n    ...otherTriples,\n    ...flowTriples,\n    ...functionTriples,\n};\n\n// Pass all the (old id : workflow Node)\nmsg.completeWorkflowNodes = completeWorkflowNodes;\n\n// Monitoring end\n// @ts-ignore\nconsole.log(\"Complete msg\", util.inspect(msg, false, null, true));\nconsole.log(\"END OF PHASE 1 =================================================\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "72f5b35ae4f52b53",
                "ef9d04ebcf73e8e6"
            ]
        ]
    },
    {
        "id": "876b176273ecde5a",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Semantic Transformation 2",
        "func": "const {\n    tempTripleToIndex,\n    cleanTriplesIndex,\n    addPropertyValue,\n    toSemanticName,\n    bestStringMatch,\n} = flow.get(\"utilFunctions\");\n\nconsole.log(\"Semantic Transformation - Phase 2 ==============================\");\n\nmsg.payload = msg.payload[0];\n\nlet flowData = msg.payload; // The created Flow object with everything ready.\nconst oldSubFlows = msg.tempSubflowData;\nconsole.log(\"---------------------------------------\");\n// @ts-ignore\nconsole.log(\"oldSubFlows\", util.inspect(oldSubFlows, false, null, true));\nconsole.log(\"---------------------------------------\");\n\n// Continue with subflows\nconst storedSubFlows = msg.subflows; // Old id : old subflow\nconst storedFlowAnnotators = msg.annotators; // Old id : old subflow\n\n// console.log(\"storedSubFlows\", util.inspect(storedSubFlows, false, null, true));\n// console.log(\"---------------------------------------\");\n// console.log(\"storedFlowAnnotators\", util.inspect(storedFlowAnnotators, false, null, true));\n// console.log(\"---------------------------------------\");\n\nconsole.log(\"Subflow Preparation ============================================\");\n// Parse subflows\nfor (let oldSubflow of oldSubFlows) {\n    oldSubflow[\"subflow\"] = oldSubflow.type.replace('subflow:', '');\n\n    // FLOW ANNOTATOR case.\n    if (oldSubflow[\"subflow\"] in storedFlowAnnotators) {\n        // Assumption: Annotator nodes are NOT CONNECTED to ANY NODE.\n        // NOTE for later: Find a way to filter these through the ontology.\n        for (const definitionObject of oldSubflow[\"env\"]) {\n            let value = \"\";\n            if (definitionObject.type == \"num\") {\n                value = Number(definitionObject.value);\n            } value = definitionObject.value;\n\n            addPropertyValue(\n                msg.payload, // Flow object\n                toSemanticName(definitionObject.name, true),\n                value,\n            );\n        }\n\n    } else {  // Add any subflow as node if not in annotators.\n        let prepedNode = msg.completeWorkflowNodes[oldSubflow[\"id\"]];\n\n        // Note that its connections have already been prepared if they exist.\n        addPropertyValue(\n            msg.payload, // Flow object\n            \"hasNode\",\n            { // Subflow\n                ...prepedNode, // Prepared id and input/output\n                \"@type\": \"SubFlow\",\n                \"label\": oldSubflow[\"name\"],\n                \"hasTemplate\": `flow:${oldSubflow[\"subflow\"]}`\n            }\n        );\n    }\n}\n// TODO LATER, if needed, add has Node for those not included.\n\n// TODO Filter the annotations!\n\nconsole.log(\"Interfaces Setup ===============================================\");\n// Sort out the defined Application Interfaces\nconst consumedRestApis = [];\nconst appInterfaces = [];\nfor (const interfaceId in msg.appInterfaces) {\n    const interfaceDefinition = msg.appInterfaces[interfaceId];\n    // NOTE: ADD RULES TO THE INTERFACES THAT ARE NOT DEFINED.\n    if (interfaceDefinition[\"@type\"] == \"REST\" &&\n        flowData.exposesREST &&\n        !flowData.exposesREST.includes(interfaceId)\n    ) {  // From http request node\n        consumedRestApis.push(interfaceDefinition);\n    } else {\n        appInterfaces.push(interfaceDefinition);\n    }\n}\n\nconsole.log(\"---------------------------------------\");\n// @ts-ignore\nconsole.log(\"consumedRestApis\", util.inspect(consumedRestApis, false, null, true));\nconsole.log(\"---------------------------------------\");\n// @ts-ignore\nconsole.log(\"appInterfaces\", util.inspect(appInterfaces, false, null, true));\nconsole.log(\"---------------------------------------\");\n\n\nconsole.log(\"Software Artifact Setup ========================================\");\nconst supportedArtifactTypes = [\n    'SoftwareImage',\n    'SoftwareBinary',\n    'PackagedSourceCode'\n];\n\n\nlet softwareArtifact = {\n    '@id': msg.originalPayload.artifact,\n};\n\nif (msg.originalPayload.artifactType) {\n    let artifactType = bestStringMatch(\n        msg.originalPayload.artifactType,\n        supportedArtifactTypes,\n    );\n    addPropertyValue(\n        softwareArtifact,\n        '@type',\n        artifactType,\n    );\n}\n\nconsole.log(\"CustomImage special Case =======================================\");\n// Software artifacts do not exist in this case! They are dummy, as they are not\n//  built! NEW triples have to be created.\nif (msg.payload.customImage) {\n\n    let customImageDefinition = msg.payload.customImage;\n\n    if (typeof (customImageDefinition) == \"string\") {\n        customImageDefinition = [customImageDefinition];\n    }\n\n    delete msg.originalPayload.artifact; // For consistency\n\n    for (const imageId of customImageDefinition) {\n        let customSoftwareArtifact = {\n            '@id': imageId,\n            '@type': 'SoftwareImage',\n\n        };\n\n        addPropertyValue(\n            msg.payload,\n            \"hasSoftwareArtifact\",\n            customSoftwareArtifact,\n        )\n\n        // For consistency\n        addPropertyValue(\n            msg.originalPayload,\n            \"artifact\",\n            imageId,\n        )\n\n    }\n\n\n} else {\n    // Normal case\n    addPropertyValue(\n        msg.payload, // Flow Object\n        \"hasSoftwareArtifact\",\n        softwareArtifact,\n    )\n\n}\n\n\nconsole.log(\"Performance Profile ============================================\");\nconst getFunctionProfile = flow.get(\"getFunctionProfile\");\nconst getFlowProfile = flow.get(\"getFlowProfile\");\n// Get performance profile for \"function\" A.K.A THE FLOW!\nlet flowPerformanceProfile = [];\nlet flowId = msg.payload[\"@id\"]; // FlowId\nlet actionId = msg.originalPayload.actionName; // ActionName for flow level\nlet branchName = msg.branchName;\nlet flowName = msg.payload.label;\n\n\n// Add the performance profile from PEF into the semantic Flow Object.\nfunction processPerformanceProfile(flowObject, functionPerformanceProfile) {\n    // let performanceProfile = {\n    //     profile: [],\n    // };\n    let performanceProfile = [];\n\n    const nonResourceProfileFields = [\n        \"id\",\n        \"actionname\",\n        \"branchname\",\n        \"flow\",\n        \"location\",\n    ]\n\n    for (let perfProfile of functionPerformanceProfile) {\n        let resources = {};\n\n        for (let resourceKey in perfProfile) {\n            if (!nonResourceProfileFields.includes(resourceKey)) {\n                resources[resourceKey] = perfProfile[resourceKey];\n            }\n        }\n\n        let performanceProfileItem = {\n            location: perfProfile.location,\n            resources: resources,\n        };\n\n        // performanceProfile.profile.push(performanceProfileItem);\n        performanceProfile.push(performanceProfileItem);\n    }\n\n    addPropertyValue(\n        flowObject,\n        \"performanceProfile\",\n        performanceProfile,\n    )\n}\n\n// GET PROFILE FROM ACTION ID DIRECTLY!\nif (actionId) {\n    try {\n        flowPerformanceProfile = await getFunctionProfile(actionId);\n        console.log(`Got performance profile for flow ${flowId} and action ${actionId} : ${flowPerformanceProfile}`);\n    } catch (error) {\n        console.log(`ERROR when getting performance profile for flow with ID ${flowId} : ${error}`);\n    }\n\n    if (flowPerformanceProfile.length > 0) {\n        processPerformanceProfile(msg.payload /*Flow object*/, flowPerformanceProfile)\n    }\n\n} else if (flowName && branchName) { // GET PROFILE FROM NAME AND BRANCH\n    try {\n        flowPerformanceProfile = await getFlowProfile(flowName, branchName);\n        console.log(`Got performance profile for flow ${flowId} with flow name ${flowName} and branch ${branchName} : ${flowPerformanceProfile}`);\n    } catch (error) {\n        console.log(`ERROR when getting performance profile for flow with ID ${flowId} and flow name ${flowName} and branch ${branchName} : ${error}`);\n    }\n\n    if (flowPerformanceProfile.length > 0) {\n        processPerformanceProfile(msg.payload /*Flow object*/, flowPerformanceProfile)\n    }\n\n\n}\n\n\nconsole.log(\"PEF LoadGen Data ===============================================\");\nconsole.log(`flowName: ${flowName} -- branchName: ${branchName} -- actionId: ${actionId}`);\nconst getLoadGenData = flow.get(\"getLoadGenData\");\n// NOTE: Action ID is undefined on test! Need branchName. Check PEF.\n\nif (flowName && branchName) {\n\n    console.log(`Getting load gen data for flow ${flowName} and branchName ${branchName}`);\n\n    const loadGenData = await getLoadGenData(flowName, branchName);\n\n    console.log(`Load Gen Data: ${loadGenData.targetData}`);\n\n    addPropertyValue(\n        msg.payload, // Flow Object\n        \"loadGenData\",\n        loadGenData.targetData,\n    );\n\n}\n\n\nconsole.log(\"END OF PHASE 2 =================================================\");\n\nmsg.payload = { // Final JSON-LD payload for Flow:\n    ...msg.payload,\n    // Add interfaces\n    \"consumesREST\": consumedRestApis,\n    \"definesInterface\": appInterfaces,\n    // Add original description\n    \"hasJSONDescription\": msg.originalPayload,\n}\n\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nconsole.log(\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1140,
        "wires": [
            [
                "6369d3f9b532c0b6",
                "7cbe8c4f225d1e3c",
                "bdda2ea9fc078129"
            ]
        ]
    },
    {
        "id": "6369d3f9b532c0b6",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Sem Transform 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 1140,
        "wires": []
    },
    {
        "id": "ef9873bd9eb2443b",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Original Payload",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "originalPayload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 880,
        "wires": []
    },
    {
        "id": "e2bbe250d7603e25",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "Set ext",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{}",
        "payloadType": "jsonata",
        "x": 600,
        "y": 160,
        "wires": [
            [
                "8ba80732b4a9c415"
            ]
        ]
    },
    {
        "id": "8ba80732b4a9c415",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Code annotation extractor",
        "func": "// Parse line and return annotation parts\nconst parseLine = (line) => {\n    // Skip comments entirely\n    if (! line.includes(\"//\")) return {\n        \"isAnnotationLine\": false,\n        \"cleanedLine\": line,\n    };\n    \n    // Keep code before comment in the line\n    let codePart = \"\";\n    let commentLine = line;\n    \n    if (! line.startsWith(\"//\")){\n        let lineParts = line.split(\"//\");\n        [ lineParts[0], ...lineParts[1] ] = lineParts;\n        lineParts[1] = lineParts[1].join('//');\n        \n        codePart=lineParts[0];\n        commentLine='//'+lineParts[1]\n    }\n    \n    let cleanComment = \"\";\n    \n    // Work on comment with the annotation starter\n    if (commentLine.startsWith(\"//$\") || commentLine.startsWith(\"//@\")) {\n        let annotation = {\n            \"object\": \"self\", // self is reference to the function itself\n            \"property\": \"\", // Annotation name/property\n            \"value\": \"\", // Value, can be any type, depending on the property\n        };\n        \n        let cleanLine = commentLine;\n        \n        // Keep rest of comment, if exists.\n        if (commentLine.includes(\" \")){\n            let parts = [];\n            [cleanLine, ...parts] = commentLine.split(\" \");\n            cleanComment = ' //'+parts.join(' ');\n        }\n        \n        // Check if valid annotation\n        if(cleanLine.startsWith(\"//$\") && cleanLine.includes(\"@\") && cleanLine.includes(\"=\")) {\n            // Triple\n            let annotationLine = cleanLine.replace(\"//$\", \"\");\n            let parts = [];\n            parts = annotationLine.split(\"@\");\n            [ parts[0], ...parts[1] ] = parts;\n            parts[1] = parts[1].join('@');\n            [ parts[1], ...parts[2] ] = parts[1].split(\"=\");\n            parts[2] = parts[2].join('=');\n            \n            annotation.object = parts [0];\n            annotation.property = parts[1];\n            annotation.value = parts[2];\n        \n        } else if(cleanLine.startsWith(\"//@\") && cleanLine.includes(\"=\")) {\n            // Simple annotation\n            let annotationLine = cleanLine.replace(\"//@\", \"\");\n            let parts = [];\n            [parts[0], ...parts[1]] = annotationLine.split(\"=\");\n            parts[1] = parts[1].join('='); // = sign is supported in value\n            \n            annotation.property = parts[0];\n            annotation.value = parts[1];\n        \n        \n        // Not annotation\n        } else return { \n            \"isAnnotationLine\": false,\n            \"cleanedLine\":  line\n        };\n        \n        // Empty fields are not supported!\n        if(annotation.object === \"\" ||\n           annotation.property === \"\" ||\n           annotation.value === \"\"\n        ) return {\n            \"isAnnotationLine\": false,\n            \"cleanedLine\": line,\n        }\n        \n        // Annotation + Cleaned code + comment\n        return {\n            \"isAnnotationLine\": true,\n            \"annotation\": annotation,\n            \"cleanedLine\": codePart + cleanComment,\n        }\n    }\n    \n    // Not an annotation\n    return { \n        \"isAnnotationLine\": false,\n        \"cleanedLine\": line \n    };\n}\n\n// Main code annotation extractor\nmsg.codeAnnotationExtractor = (functionCode) => {\n    let functionAnnotations = [];\n    let triples = [];\n    let cleanedCode = \"\";\n    \n    let lines = functionCode.split(\"\\n\");\n    let cleanLines = [];\n    \n    for (const line of lines){\n        const result = parseLine(line);\n        cleanLines.push(result.cleanedLine);\n        \n        if(result.isAnnotationLine){\n            if(result.annotation.object == \"self\"){\n                // Simple function annotation\n                functionAnnotations.push({\n                    \"property\": result.annotation.property,\n                    \"value\": result.annotation.value,\n                });\n            }else {\n                // Complete triple\n                triples.push(result.annotation);\n            }\n        }\n        \n    }\n    \n    cleanedCode = cleanLines.join(\"\\n\");\n    \n    return {\n        \"functionCode\": cleanedCode,\n        \"functionAnnotations\": functionAnnotations,\n        \"triples\": triples,\n    };\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 120,
        "wires": [
            [
                "3347f12e6de7a0c6"
            ]
        ]
    },
    {
        "id": "3347f12e6de7a0c6",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set annotation extractor",
        "rules": [
            {
                "t": "set",
                "p": "codeAnnotationExtractor",
                "pt": "flow",
                "to": "codeAnnotationExtractor",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 830,
        "y": 160,
        "wires": [
            [
                "e6d6ed1ed891ff5a"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "e6d6ed1ed891ff5a",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Extractor test",
        "func": "const codeAnnotationExtractor = flow.get(\"codeAnnotationExtractor\");\n\nconst example0 = \"// Code added here will be run once\\n// whenever the node is started.\\n\\nmsg.payload.imageName=env.get('Image Name');\\n//return msg;\";\nconst example1 = \"//@property=value hahaha\\n// whenever the node is started.\\n\\nmsg.payload.imageName=env.get('Image Name');\\n//return msg;\";\nconst example2 = \"//@property=value hahaha\\n// whenever the node is started.\\n//$object@property=value\\nmsg.payload.imageName=env.get('Image Name');\\nreturn msg;\";\n\nmsg.payload.noAnnotation = codeAnnotationExtractor(example0);\nmsg.payload.functionAnnotation = codeAnnotationExtractor(example1);\nmsg.payload.bothAnnotations = codeAnnotationExtractor(example2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "357d0ae70961b63a"
            ]
        ]
    },
    {
        "id": "357d0ae70961b63a",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "extractor test",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "72f5b35ae4f52b53",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "SemTransform-1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 1000,
        "wires": []
    },
    {
        "id": "bdda2ea9fc078129",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Process JSON-LD",
        "func": "const {\n    cleanObj,\n} = flow.get(\"utilFunctions\");\n\nconst doc = msg.payload;\n// TODO Later: JSON Schema absolute validation for base doc.\n\nconst jsonLdContext = flow.get(\"jsonLdBase\");\n\n// JSON-LD basic validation.\nconst expanded = await jsonld.expand({...jsonLdContext, ...doc });\nconst compacted = await jsonld.compact(expanded, jsonLdContext);\n// Monitor\nconsole.log(\"=========EXPANDED JSON-LD=====================\");\n// @ts-ignore\nconsole.log(util.inspect(expanded, false, null, true));\nconsole.log(\"=========COMPACTED JSON-LD====================\");\n// @ts-ignore\nconsole.log(util.inspect(compacted, false, null, true));\nconsole.log(\"==============================================\");\n\n// Clean the top-level compacted JSON-LD object.\nmsg.payload = compacted;\n\ndelete msg.payload[\"@context\"];\n\nconsole.log(\"Cleaning JSON-LD object...\");\n\n// Reorganize in order to send as repsonse.\nmsg.payload = cleanObj({\n    \"ld-flow\": msg.payload,\n    \"ld-extra-triples\": msg.otherTriples,\n    \"original-flow\": msg.originalPayload,\n    \"included-subflows\": msg.subflows,\n});\n\nconsole.log(\"Cleaned JSON-LD\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonld",
                "module": "jsonld"
            }
        ],
        "x": 230,
        "y": 1200,
        "wires": [
            [
                "b614f4966b2d3252",
                "39eb05e5d30be671",
                "f590a92308be40e9"
            ]
        ]
    },
    {
        "id": "b614f4966b2d3252",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "JSON-LD in ld-flow",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 1200,
        "wires": []
    },
    {
        "id": "60e9451b6f1c8440",
        "type": "http in",
        "z": "0796678ec01bc492",
        "name": "",
        "url": "/extract",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 560,
        "wires": [
            [
                "330c36889aaf390f",
                "fbafb9e0bc469be8",
                "4cd2cbeb35f3c951"
            ]
        ]
    },
    {
        "id": "92178dacbfdaa980",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Pre-process input",
        "func": "msg.topic = `extract_${msg._msgid}`;\nconst branchName = msg.payload.branchName;\nconst flows = msg.payload.flows;\ndelete msg.payload.flows;\nconst newMsg = RED.util.cloneMessage(msg);\nnewMsg.payload = flows;\nnewMsg.branchName = branchName;\n\nreturn [\n    msg,\n    newMsg,\n];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 620,
        "wires": [
            [
                "c715cd30a4833eda",
                "74f7350d01c8d9d3"
            ],
            [
                "c6af83be4ef10734"
            ]
        ]
    },
    {
        "id": "badc09f51c79594e",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "TODO Later, if needed, check if values are valid in ontology",
        "info": "",
        "x": 210,
        "y": 1480,
        "wires": []
    },
    {
        "id": "2b2338df36cdb954",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "FInal output prep",
        "func": "const { \n    addPropertyValue,\n    toSemanticName,\n    mergeDeep,\n} = flow.get(\"utilFunctions\");\n\nconst jsonLdContext = flow.get(\"jsonLdBase\");\n\n// TODO: Check for changes\n\nconst flows = msg.payload[1];\n\nlet application = {\n    ...msg.payload[0],\n};\n\nmsg.payload = [];\n\nlet extraTriples = {};\n\nfor (const flowObj of flows ){\n    \n    // Error case\n    if (typeof flowObj == \"string\") {\n        msg.payload.push({'error': flowObj});\n        continue;\n    }\n    \n    addPropertyValue(\n        application,\n        'hasFlow',\n        flowObj[\"ld-flow\"],\n    );\n    \n    if (flowObj[\"ld-extra-triples\"]) {\n        const oldTriples = extraTriples;\n        extraTriples = {};\n        mergeDeep(extraTriples, oldTriples, flowObj[\"ld-extra-triples\"]);\n    }\n}\n\n// JSON-LD basic validation for main applicaiton.\nconst expanded = await jsonld.expand({...jsonLdContext, ...application });\nconst compacted = await jsonld.compact(expanded, jsonLdContext);\n\napplication = compacted;\n\nmsg.payload.push(application);\n\nif (Object.keys(extraTriples).length > 0) {\n    for (const id in extraTriples){\n        msg.payload.push({\n            '@context': flow.get(\"jsonLdBase\"),\n            '@id': id,\n            ...extraTriples[id],\n        });\n    }\n}\n\nmsg.payload[0][\"@context\"].owner=msg.branchName;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonld",
                "module": "jsonld"
            }
        ],
        "x": 710,
        "y": 1380,
        "wires": [
            [
                "1b5846a7d4717010",
                "4535572c6174ad6d"
            ]
        ]
    },
    {
        "id": "7a0b4842eb3a14d7",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "configure call",
        "func": "msg.method='POST';\nmsg.url=flow.get('RF_ENDPOINT')+'/api/v2/application';\nmsg.headers = {};\nmsg.headers ['x-api-key'] = flow.get('RFkey');\n\nif (msg.payload.length>1){\n    msg.payload=msg.payload[0];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1280,
        "wires": [
            [
                "33fda9b773136920",
                "c8b5d8fa14b0b5c6",
                "6a7bb3a300fa0469"
            ]
        ]
    },
    {
        "id": "24f9cd26fe8e5c68",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Flow data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 680,
        "wires": []
    },
    {
        "id": "33fda9b773136920",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "SEMANTIC EXTRACTOR OUTPUT GRAPH",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1200,
        "wires": []
    },
    {
        "id": "c6af83be4ef10734",
        "type": "split",
        "z": "0796678ec01bc492",
        "name": "For each flow",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 120,
        "y": 680,
        "wires": [
            [
                "24f9cd26fe8e5c68",
                "c70ab813920376cc",
                "413580d870a50ad8"
            ]
        ]
    },
    {
        "id": "c715cd30a4833eda",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "High-level Application Semantic Transformation",
        "func": "const {\n    isUri,\n    addPropertyValue,\n} = flow.get(\"utilFunctions\");\n\nconst originalAppPayload = msg.payload;\nconst displayName = originalAppPayload.displayName;\n\nconst oldUserId = originalAppPayload.userId;\nlet newUserId = '';\nif (oldUserId) {\n    newUserId = isUri(oldUserId) ? oldUserId : `owner:${oldUserId}`;\n}\n\nmsg.payload = {\n    '@id': (oldUserId) ?\n        `${newUserId}/application/${displayName}` :\n        `app:${displayName}`,\n    '@type': 'Application',\n    'isTopLevelComposite': true, // Override the inference.\n}; // Application Semantic representation.\n\nif (oldUserId) addPropertyValue(\n    msg.payload,\n    'hasOwner',\n    newUserId,\n);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 620,
        "wires": [
            [
                "98a0e376499c2609"
            ]
        ]
    },
    {
        "id": "98a0e376499c2609",
        "type": "subflow:61834c2663a6ece6",
        "z": "0796678ec01bc492",
        "name": "Application",
        "env": [
            {
                "name": "totalcount",
                "value": "2",
                "type": "num"
            },
            {
                "name": "position",
                "value": "1",
                "type": "num"
            }
        ],
        "x": 1010,
        "y": 980,
        "wires": [
            [
                "b4b09237a0d05f16"
            ]
        ]
    },
    {
        "id": "f590a92308be40e9",
        "type": "join",
        "z": "0796678ec01bc492",
        "name": "Join all flows",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 110,
        "y": 1300,
        "wires": [
            [
                "618c96ee44be39af"
            ]
        ]
    },
    {
        "id": "c70ab813920376cc",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Separate Flow and Subflow definitions ",
        "func": "// Message for the specific flow\nlet flowMsg = msg;\nflowMsg.payload.nodes= [];\nconst flowNodes = flowMsg.payload.flow;\ndelete flowMsg.payload.flow;\n\n// Message containing all the required subflows.\nlet subflowsMsg = RED.util.cloneMessage(msg);\nsubflowsMsg.payload = {};\n\n// Error message to be propagated. It is not null when error occurs.\nlet errorMsg = RED.util.cloneMessage(msg);\nerrorMsg.payload = null;\n\nlet requiredSubflowIDs = [];\n\nfor (let flowNode of flowNodes) {\n    console.log('for');\n    if (flowNode.type == \"subflow\") {\n        subflowsMsg.payload[flowNode.id] = flowNode;\n        // Will be further pre-processed later.\n    } else {\n        console.log('to push');\n        flowMsg.payload.nodes.push(flowNode);\n        console.log(flowNode);\n        if (flowNode.type.includes(\"subflow:\")) {\n            requiredSubflowIDs.push(flowNode.type.split(':')[1]);\n        }\n        console.log('checked');\n    }\n}\n\n// Check that all subflow definitions exist.\nfor (let requiredID of requiredSubflowIDs) {\n    if ( !(requiredID in subflowsMsg.payload) ) {\n        errorMsg.payload = \"Missing one or more required subflow definitions. Please add missing subflow definitions in 'flow' array.\";\n        return [null, null, errorMsg];\n    }\n}\n\n// Set only acceptable fields\nflowMsg.payload.id = flowMsg.payload.flowID;\ndelete flowMsg.payload.flowID;\nflowMsg.payload.label = flowMsg.payload.flowName;\ndelete flowMsg.payload.flowName;\n// Only artifact and artifactType acceptable\nflowMsg.payload.artifactType = flowMsg.payload.type;\ndelete flowMsg.payload.type;\n\nreturn [subflowsMsg, flowMsg, errorMsg];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 740,
        "wires": [
            [
                "680e75d7864f56c7"
            ],
            [
                "492507279b26663a"
            ],
            [
                "d2f6d7615f043d43"
            ]
        ]
    },
    {
        "id": "f077bc7b0acb0eb5",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "Part from Application-level transformation",
        "info": "",
        "x": 1100,
        "y": 940,
        "wires": []
    },
    {
        "id": "680e75d7864f56c7",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Subflows Preprocessing",
        "func": "if (msg.payload == null) return;\n\nconst results = msg.payload;\n\nmsg.subflows = {};\nmsg.annotators = {};\n\nfor (const subflowId in results){\n    const subflow = results[subflowId];\n    msg.subflows[subflow.id] = subflow;\n    if(subflow.category == \"PHYSICS Annotators\"){\n        msg.annotators[subflow.id] = subflow;\n    }\n}\n\nmsg.payload = {};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 780,
        "wires": [
            [
                "dd8b93db707b4d70",
                "eadda1088a4b16f0",
                "9d85d73f4c701c5d"
            ]
        ]
    },
    {
        "id": "d2f6d7615f043d43",
        "type": "switch",
        "z": "0796678ec01bc492",
        "name": "Error exists",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 90,
        "y": 800,
        "wires": [
            [
                "84bbdfdf6ad8cff0",
                "f590a92308be40e9"
            ]
        ],
        "icon": "node-red/alert.svg"
    },
    {
        "id": "84bbdfdf6ad8cff0",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Error found",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 90,
        "y": 840,
        "wires": []
    },
    {
        "id": "dd8b93db707b4d70",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Subflows",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "subflows",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 740,
        "wires": []
    },
    {
        "id": "eadda1088a4b16f0",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Annotators",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "annotators",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 820,
        "wires": []
    },
    {
        "id": "ef9d04ebcf73e8e6",
        "type": "subflow:61834c2663a6ece6",
        "z": "0796678ec01bc492",
        "name": "part 1",
        "env": [
            {
                "name": "totalcount",
                "value": "2",
                "type": "num"
            },
            {
                "name": "position",
                "value": "1",
                "type": "num"
            }
        ],
        "x": 490,
        "y": 1060,
        "wires": [
            [
                "1528b6884ae4413a",
                "f442039eacd85b04"
            ]
        ]
    },
    {
        "id": "9d85d73f4c701c5d",
        "type": "subflow:61834c2663a6ece6",
        "z": "0796678ec01bc492",
        "name": "Subflows",
        "env": [
            {
                "name": "totalcount",
                "value": "2",
                "type": "num"
            },
            {
                "name": "position",
                "value": "2",
                "type": "num"
            }
        ],
        "x": 760,
        "y": 960,
        "wires": [
            [
                "1528b6884ae4413a",
                "6c537844d1929125"
            ]
        ]
    },
    {
        "id": "1528b6884ae4413a",
        "type": "join",
        "z": "0796678ec01bc492",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 670,
        "y": 1080,
        "wires": [
            [
                "5111ab17382ed6bd",
                "876b176273ecde5a"
            ]
        ]
    },
    {
        "id": "5111ab17382ed6bd",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "TEST",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 1080,
        "wires": []
    },
    {
        "id": "39eb05e5d30be671",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Full",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1240,
        "wires": []
    },
    {
        "id": "413580d870a50ad8",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Full",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 700,
        "wires": []
    },
    {
        "id": "7cbe8c4f225d1e3c",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Full",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 1180,
        "wires": []
    },
    {
        "id": "618c96ee44be39af",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Part from processed flows",
        "func": "return {\n    'payload': msg.payload,\n    'topic': msg.topic,\n    // Manual override of parts, in order to properly join with app\n    'parts': {\n        \"id\": msg.topic.replace('extract_', ''),\n        \"count\":2,\n        \"len\":1,\n        \"index\":1,\n        \"type\":\"array\"\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 1380,
        "wires": [
            [
                "298ba7166bcdcec5",
                "b4b09237a0d05f16"
            ]
        ]
    },
    {
        "id": "1b5846a7d4717010",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Full",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 1420,
        "wires": []
    },
    {
        "id": "74f7350d01c8d9d3",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 640,
        "wires": []
    },
    {
        "id": "b4b09237a0d05f16",
        "type": "join",
        "z": "0796678ec01bc492",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 510,
        "y": 1380,
        "wires": [
            [
                "2b2338df36cdb954"
            ]
        ]
    },
    {
        "id": "6c537844d1929125",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 920,
        "wires": []
    },
    {
        "id": "f442039eacd85b04",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 1020,
        "wires": []
    },
    {
        "id": "298ba7166bcdcec5",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "Full",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 1420,
        "wires": []
    },
    {
        "id": "c22384f8ebd332c3",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "prepares JSON-LD in Array-Notation",
        "info": "",
        "x": 720,
        "y": 1340,
        "wires": []
    },
    {
        "id": "330c36889aaf390f",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "",
        "func": "msg.branchName=msg.payload.branchName;\n\nif (! msg.payload || !msg.payload.flows){\n    msg.data=\"Invalid input\";\n    msg.payload=\"Empty input\";\n    return [msg,null];\n}\n\nif (msg.payload.flows.length==0){\n    msg.data='Flows can not be empty';\n    msg.payload='Flows can not be empty';\n    return [msg,null];\n} else {\n    return [null,msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 500,
        "wires": [
            [
                "fcb2796e7de642de"
            ],
            [
                "92178dacbfdaa980"
            ]
        ]
    },
    {
        "id": "fcb2796e7de642de",
        "type": "http response",
        "z": "0796678ec01bc492",
        "name": "",
        "statusCode": "400",
        "headers": {},
        "x": 620,
        "y": 480,
        "wires": []
    },
    {
        "id": "fbafb9e0bc469be8",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 500,
        "wires": []
    },
    {
        "id": "c8ed09be5d53a639",
        "type": "http response",
        "z": "0796678ec01bc492",
        "name": "HTTP Out",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 1400,
        "wires": []
    },
    {
        "id": "3f3b32f737e026da",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "Reusable Functions & Config --------------------------",
        "info": "",
        "x": 180,
        "y": 20,
        "wires": []
    },
    {
        "id": "9935a1d083077270",
        "type": "comment",
        "z": "0796678ec01bc492",
        "name": "Main Flow ---------------------------------------------------",
        "info": "",
        "x": 180,
        "y": 400,
        "wires": []
    },
    {
        "id": "cd113a451cd40d6f",
        "type": "http in",
        "z": "0796678ec01bc492",
        "name": "",
        "url": "/transform",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 440,
        "wires": [
            [
                "fbafb9e0bc469be8",
                "330c36889aaf390f"
            ]
        ]
    },
    {
        "id": "4535572c6174ad6d",
        "type": "switch",
        "z": "0796678ec01bc492",
        "name": "Response",
        "property": "req.url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "/extract",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "/transform",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 920,
        "y": 1380,
        "wires": [
            [
                "7a0b4842eb3a14d7"
            ],
            [
                "c8ed09be5d53a639"
            ]
        ]
    },
    {
        "id": "2b1b4c14318a0475",
        "type": "change",
        "z": "0796678ec01bc492",
        "name": "Set PEF ENDPOINT",
        "rules": [
            {
                "t": "set",
                "p": "PEF_PROFILES_URL",
                "pt": "global",
                "to": "pefProfileURL",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "PEF_USERNAME",
                "pt": "global",
                "to": "pefUsername",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "PEF_PASSWORD",
                "pt": "global",
                "to": "pefPassword",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 280,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "34a1bf2b5e007e8e",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "INITIALIZE PEF FUNCTION PROFILES ENDPOINT",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.2",
        "topic": "",
        "payload": "{\"pefProfileURL\":\"https://pef.apps.ocphub.physics-faas.eu/profile\",\"pefUsername\":\"admin\",\"pefPassword\":\"bigds\"}",
        "payloadType": "json",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "d7cccf3162671ff0"
            ]
        ]
    },
    {
        "id": "9d46e7c0885cd4d2",
        "type": "inject",
        "z": "0796678ec01bc492",
        "name": "INITIALIZE PEF FUNCTIONS",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.9",
        "topic": "",
        "x": 150,
        "y": 340,
        "wires": [
            [
                "d940181171caf0f6"
            ]
        ]
    },
    {
        "id": "d940181171caf0f6",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Setup PEF functions",
        "func": "// IMPORTS\nURL = nodeUrl.URL;\nconst {\n    isEmptyObject,\n} = flow.get(\"utilFunctions\");\n// CONSTANTS\nconst pefProfilesUrl = global.get(\"PEF_PROFILES_URL\");\nconst pefUsername = global.get(\"PEF_USERNAME\");\nconst pefPassword = global.get(\"PEF_PASSWORD\");\n// const pefPassword = \"wrong\";\nconst options = {\n    method: 'GET',\n    headers: {\n        'Authorization': `Basic ${Buffer.from(`${pefUsername}:${pefPassword}`).toString('base64')}`\n    }\n};\n\nasync function getFunctionProfile(functionId = null, location = null) {\n    return new Promise((resolve, reject) => {\n        const path = (functionId) ? ((location) ? `/profile/${functionId}/${location}` : `/profile/${functionId}/`) : \"/profile/\";\n        const url = new URL(path, pefProfilesUrl).toString();\n\n        const req = https.request(url, options, (res) => {\n            // Handle the response\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                if (res.statusCode >= 200 && res.statusCode < 300) {\n                    // Successful Request\n                    resolve(JSON.parse(data));\n                } else {\n                    reject(new Error(`Request failed with HTTP status code ${res.statusCode}`));\n                }\n            });\n        });\n\n        req.on('error', (error) => {\n            reject(error);\n        });\n\n        req.end();\n    });\n}\n\nflow.set(\"getFunctionProfile\", getFunctionProfile);\n\n\nasync function getFlowProfile(flowName = null, branch = null) {\n    return new Promise((resolve, reject) => {\n        const path = (flowName) ? ((branch) ? `/flowprofile/${flowName}/${branch}` : `/profile/${flowName}/`) : \"/profile/\";\n        const url = new URL(path, pefProfilesUrl).toString();\n\n        const req = https.request(url, options, (res) => {\n            // Handle the response\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                if (res.statusCode >= 200 && res.statusCode < 300) {\n                    // Successful Request\n                    resolve(JSON.parse(data));\n                } else {\n                    reject(new Error(`Request failed with HTTP status code ${res.statusCode}`));\n                }\n            });\n        });\n\n        req.on('error', (error) => {\n            reject(error);\n        });\n\n        req.end();\n    });\n}\n\nflow.set(\"getFlowProfile\", getFlowProfile);\n\n\n/**\n* Parsing required for loadGenData returned by the \n*  PEF API call in the next function.\n* @param {string} loadGenDataStr\n*/\nasync function parseLoadGenData(loadGenDataStr) {\n\n    let loadGenDataObj = {}; // RETURN VALUE\n    loadGenDataObj.rows = []; // A view of all the rows\n    loadGenDataObj.targetData = {}\n\n    let targetLoadGenData = []; // Target or temporary target data\n\n    const loadGenDataArray = JSON.parse(loadGenDataStr);\n\n    for (let loadGenDataRow of loadGenDataArray) {\n        let loadGenDataOutput = {};\n\n        if (typeof loadGenDataRow.output === \"string\") {\n            loadGenDataOutput = JSON.parse(loadGenDataRow.output);\n        } else {\n            loadGenDataOutput = loadGenDataRow.output;\n        }\n\n        if (!loadGenDataOutput) continue;\n\n        loadGenDataOutput.activationid = loadGenDataRow.activationid;\n        loadGenDataOutput.flow = loadGenDataRow.flow;\n\n        loadGenDataObj.rows.push(loadGenDataOutput);\n\n        // Find the target data\n        if (loadGenDataOutput.status &&\n            loadGenDataOutput.status === \"Completed\" &&\n            loadGenDataOutput.inputData &&\n            loadGenDataOutput.inputData.rawData\n        ) {\n\n            // THIS FILTERING IS TO BE KEPT INTACT!\n            let filteredLoadGenData = {};\n\n            filteredLoadGenData.location = loadGenDataRow.location;\n            filteredLoadGenData.achievedAverageRate = loadGenDataOutput.achievedAverageRate;\n            filteredLoadGenData.averageDuration = loadGenDataOutput.averageDuration;\n            filteredLoadGenData.averageInitTime = loadGenDataOutput.averageInitTime;\n            filteredLoadGenData.averageStartLatency = loadGenDataOutput.averageStartLatency;\n            filteredLoadGenData.averageUserSideDelay = loadGenDataOutput.averageUserSideDelay;\n            filteredLoadGenData.averageWaitTime = loadGenDataOutput.averageWaitTime;\n            filteredLoadGenData.launchGeneratorDelay = loadGenDataOutput.launchGeneratorDelay;\n            filteredLoadGenData.memory = loadGenDataOutput.memory;\n            filteredLoadGenData.sampleNumber = loadGenDataOutput.sampleNumber;\n            filteredLoadGenData.setRate = loadGenDataOutput.setRate;\n            filteredLoadGenData.stdDevDuration = loadGenDataOutput.stdDevDuration;\n            filteredLoadGenData.stdDevInitTime = loadGenDataOutput.stdDevInitTime;\n            filteredLoadGenData.stdDevStartLatency = loadGenDataOutput.stdDevStartLatency;\n            filteredLoadGenData.stdDevUserSideDelay = loadGenDataOutput.stdDevUserSideDelay;\n            filteredLoadGenData.stdDevWaitTime = loadGenDataOutput.stdDevWaitTime;\n            filteredLoadGenData.successPercentage = loadGenDataOutput.successPercentage;\n            filteredLoadGenData.globalStartTime = loadGenDataOutput.globalStartTime;\n            // ADD FIELDS IF REQUIRED\n\n\n            targetLoadGenData.push(filteredLoadGenData);\n\n\n\n        }\n\n    }\n    // The filtered values to be used\n    loadGenDataObj.targetData = JSON.parse(JSON.stringify(targetLoadGenData));\n    // Essentially the above is the one with the max globalStartTime\n    // Which should have been \n\n    if (loadGenDataObj.targetData.globalStartTime) {\n        loadGenDataObj.targetData.loadGenStartTimestamp = loadGenDataObj.targetData.globalStartTime;\n        delete loadGenDataObj.targetData.globalStartTime;\n    }\n\n    return loadGenDataObj;\n}\n\nasync function getLoadGenData(flowName = null, branchName = null, unfiltered = false) {\n    return new Promise((resolve, reject) => {\n        if (!flowName || !branchName) {\n            reject(new Error(`getLoadGenData: Invalid parameters! flowName: ${flowName} branchName: ${branchName}`));\n        }\n\n        const path = `/loadgendata/${flowName}/${branchName}`;\n        const url = new URL(path, pefProfilesUrl).toString();\n\n        const req = https.request(url, options, (res) => {\n            // Handle the response\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                if (res.statusCode >= 200 && res.statusCode < 300) {\n\n                    // Successful Request\n                    if (unfiltered) {\n                        resolve(JSON.parse(data));\n                    } else {\n                        resolve(parseLoadGenData(data));\n                    }\n                } else {\n                    reject(new Error(`Request failed with HTTP status code ${res.statusCode}`));\n                }\n            });\n        });\n\n        req.on('error', (error) => {\n            reject(error);\n        });\n\n        req.end();\n    });\n}\n\nflow.set(\"getLoadGenData\", getLoadGenData);\n\n\nasync function getAllLoadGenData() {\n    return new Promise((resolve, reject) => {\n\n        const path = `/loadgendata/`;\n        const url = new URL(path, pefProfilesUrl).toString();\n\n        const req = https.request(url, options, (res) => {\n            // Handle the response\n            let data = '';\n\n            res.on('data', (chunk) => {\n                data += chunk;\n            });\n\n            res.on('end', () => {\n                if (res.statusCode >= 200 && res.statusCode < 300) {\n                    // TEST\n                    console.log(\"Unprocessed LoadGen Data:\");\n                    console.log(data);\n\n                    // Successful Request\n                    resolve(JSON.parse(data));\n                } else {\n                    reject(new Error(`Request failed with HTTP status code ${res.statusCode}`));\n                }\n            });\n        });\n\n        req.on('error', (error) => {\n            reject(error);\n        });\n\n        req.end();\n    });\n}\n\nflow.set(\"getAllLoadGenData\", getAllLoadGenData);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "https",
                "module": "https"
            },
            {
                "var": "nodeUrl",
                "module": "url"
            }
        ],
        "x": 400,
        "y": 340,
        "wires": [
            [
                "991024f1be48485f"
            ]
        ]
    },
    {
        "id": "991024f1be48485f",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "test get all profiles",
        "func": "const getFunctionProfile = flow.get(\"getFunctionProfile\");\n\ntry {\n    const response = await getFunctionProfile();\n    msg.payload = response;\n    msg = [msg, { payload: true }];\n} catch (error) {\n    msg.payload = `ERROR: ${error}`;\n    msg = [msg, { payload: false }];\n}\n\nreturn msg;",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 340,
        "wires": [
            [
                "f3c1942ecd06c12f",
                "bc6d31424f6383de"
            ],
            [
                "93ba02e5946145f5"
            ]
        ]
    },
    {
        "id": "f3c1942ecd06c12f",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "get all profiles results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 320,
        "wires": []
    },
    {
        "id": "93ba02e5946145f5",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "set fallbacks if PEF connection failed",
        "func": "// Fallback function in case of error, always returns empty array!\nasync function getFunctionProfile(functionId = null, location = null) {\n    return new Promise((resolve, reject) => {\n        resolve([]);\n    });\n}\n\nasync function getFlowProfile(flowName = null, branch = null) {\n    return new Promise((resolve, reject) => {\n        resolve([]);\n    });\n}\n\nasync function getLoadGenData(flowName = null, branchName = null) {\n    return new Promise((resolve, reject) => {\n        resolve([]);\n    });\n}\n\n\nif (!msg.payload) {\n    flow.set(\"getFunctionProfile\", getFunctionProfile);\n    flow.set(\"getFlowProfile\", getFlowProfile);\n    flow.set(\"getLoadGenData\", getLoadGenData);\n    msg = { payload: \"FALLBACK PEF functions were set!!!\"};\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 400,
        "wires": [
            [
                "f38aa31b47dd6461"
            ]
        ]
    },
    {
        "id": "f38aa31b47dd6461",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "fallback was set",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 400,
        "wires": []
    },
    {
        "id": "bc6d31424f6383de",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "Test Flow Sample",
        "func": "const getFlowProfile = flow.get(\"getFlowProfile\");\n\nconst flowName = \"testimportlocal_v2\";\nconst branch = \"rmusso\";\n\ntry {\n    const response = await getFlowProfile(\n        flowName, branch,\n    );\n    msg.payload = response;\n} catch (error) {\n    msg.payload = `ERROR: ${error}`;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 360,
        "wires": [
            [
                "81ed0dd4189587c5"
            ]
        ]
    },
    {
        "id": "81ed0dd4189587c5",
        "type": "debug",
        "z": "0796678ec01bc492",
        "name": "get test flow results",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 360,
        "wires": []
    },
    {
        "id": "d7cccf3162671ff0",
        "type": "function",
        "z": "0796678ec01bc492",
        "name": "parse",
        "func": "msg ={...msg,  ...msg.payload};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 280,
        "wires": [
            [
                "2b1b4c14318a0475"
            ]
        ]
    },
    {
        "id": "7aa469ecb1082de4",
        "type": "http response",
        "z": "0796678ec01bc492",
        "name": "HTTP Out",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4cd2cbeb35f3c951",
        "type": "file",
        "z": "0796678ec01bc492",
        "name": "",
        "filename": "/data/SM_App_DE_input.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 560,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "eea28a2ee0d2e8e4",
        "type": "file",
        "z": "0796678ec01bc492",
        "name": "",
        "filename": "/data/SE_output_SM_App.txt",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "6a7bb3a300fa0469",
        "type": "file",
        "z": "0796678ec01bc492",
        "name": "",
        "filename": "/data/OrchestratorExample",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1260,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "24c6b9ddf069c7cc",
        "type": "http in",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "url": "test/api/v1/application",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 400,
        "y": 380,
        "wires": [
            [
                "fc442c6b876cef36",
                "e1114a91639b6a8d"
            ]
        ]
    },
    {
        "id": "d64cef938fe06788",
        "type": "http response",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "fc442c6b876cef36",
        "type": "function",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "func": "msg.payload={};\nmsg.payload.id=\"App ID is:\"+Math.random();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "d64cef938fe06788"
            ]
        ]
    },
    {
        "id": "c41d38b6f7c51475",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Full Example 1",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"39ef55a8.55f96a\",\"flowName\":\"fromBlazej\",\"flow\":[{\"id\":\"39ef55a8.55f96a\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"f70d642d7d615561\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":180,\"wires\":[[\"a8ea37eb3bb8cf23\"]]},{\"id\":\"ee0278d90f6393a9\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":280,\"wires\":[[\"f52b7bec399e315a\"]]},{\"id\":\"a8ea37eb3bb8cf23\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":730,\"y\":180,\"wires\":[]},{\"id\":\"ab91c6c51decfbab\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":870,\"y\":380,\"wires\":[]},{\"id\":\"f52b7bec399e315a\",\"type\":\"function\",\"z\":\"39ef55a8.55f96a\",\"name\":\"hello world\",\"func\":\"//@locality=edge\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":630,\"y\":280,\"wires\":[[\"ab91c6c51decfbab\"]]},{\"id\":\"47d1123d17b41031\",\"type\":\"comment\",\"z\":\"39ef55a8.55f96a\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":440,\"y\":360,\"wires\":[]},{\"id\":\"9eba693a7b11c208\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":360,\"y\":440,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:149\",\"type\":\"image\"},{\"flowID\":\"39ef55a8.55f96a\",\"flowName\":\"flow2\",\"flow\":[{\"id\":\"39ef55a8.55f96a\",\"type\":\"tab\",\"label\":\"Flow 2\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"f70d642d7d615561\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":180,\"wires\":[[\"a8ea37eb3bb8cf23\"]]},{\"id\":\"ee0278d90f6393a9\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":280,\"wires\":[[\"f52b7bec399e315a\"]]},{\"id\":\"a8ea37eb3bb8cf23\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":730,\"y\":180,\"wires\":[]},{\"id\":\"ab91c6c51decfbab\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":870,\"y\":380,\"wires\":[]},{\"id\":\"f52b7bec399e315a\",\"type\":\"function\",\"z\":\"39ef55a8.55f96a\",\"name\":\"hello world\",\"func\":\"//@locality=edge\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":630,\"y\":280,\"wires\":[[\"ab91c6c51decfbab\"]]},{\"id\":\"47d1123d17b41031\",\"type\":\"comment\",\"z\":\"39ef55a8.55f96a\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":440,\"y\":360,\"wires\":[]},{\"id\":\"9eba693a7b11c208\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"Service\",\"type\":\"str\"}],\"x\":360,\"y\":440,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:149\",\"type\":\"image\"},{\"flowID\":\"7c6a3de135b840c5\",\"flowName\":\"fromManualExport_HelloNRFunction\",\"flow\":[{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"7c6a3de135b840c5\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"dbb496ac5b4b1756\",\"type\":\"http in\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":260,\"y\":140,\"wires\":[[\"dfd5d7f2a1e4bdce\"]]},{\"id\":\"b3ae2348a7357f89\",\"type\":\"http in\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":260,\"y\":240,\"wires\":[[\"247a1728e0231123\"]]},{\"id\":\"dfd5d7f2a1e4bdce\",\"type\":\"http response\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"x\":560,\"y\":140,\"wires\":[]},{\"id\":\"6d597da6d88a144a\",\"type\":\"http response\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"x\":690,\"y\":320,\"wires\":[]},{\"id\":\"247a1728e0231123\",\"type\":\"function\",\"z\":\"7c6a3de135b840c5\",\"name\":\"hello world\",\"func\":\"//@importance=high\\n//@OptimizationGoal=performance\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":550,\"y\":240,\"wires\":[[\"6d597da6d88a144a\"]]},{\"id\":\"d2f80557dffd0854\",\"type\":\"comment\",\"z\":\"7c6a3de135b840c5\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":360,\"y\":320,\"wires\":[]},{\"id\":\"164958dd7f2a7c37\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":310,\"y\":440,\"wires\":[]},{\"id\":\"ed773d649e8294b1\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"},{\"name\":\"timeout\",\"value\":\"120000\",\"type\":\"num\"}],\"x\":300,\"y\":540,\"wires\":[[]]}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:149\",\"type\":\"image\"}],\"displayName\":\"myapp\",\"userId\":\"test\"}",
        "payloadType": "json",
        "x": 240,
        "y": 600,
        "wires": [
            [
                "2017ddca62b26917"
            ]
        ]
    },
    {
        "id": "2017ddca62b26917",
        "type": "http request",
        "z": "75bc5fa0db2ad379",
        "name": "Call Extractor",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/extract/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 520,
        "wires": [
            [
                "c88c716c82357828"
            ]
        ]
    },
    {
        "id": "c88c716c82357828",
        "type": "debug",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 540,
        "wires": []
    },
    {
        "id": "226e949bceb1780b",
        "type": "comment",
        "z": "75bc5fa0db2ad379",
        "name": "DUMMY RF ENDPOINT",
        "info": "",
        "x": 410,
        "y": 320,
        "wires": []
    },
    {
        "id": "e1114a91639b6a8d",
        "type": "debug",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 320,
        "wires": []
    },
    {
        "id": "56af61cbaa95fd75",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Single Flow Example",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"39ef55a8.55f96a\",\"flowName\":\"flow2\",\"flow\":[{\"id\":\"39ef55a8.55f96a\",\"type\":\"tab\",\"label\":\"Flow 2\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"f70d642d7d615561\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":180,\"wires\":[[\"a8ea37eb3bb8cf23\"]]},{\"id\":\"ee0278d90f6393a9\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":280,\"wires\":[[\"f52b7bec399e315a\"]]},{\"id\":\"a8ea37eb3bb8cf23\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":730,\"y\":180,\"wires\":[]},{\"id\":\"ab91c6c51decfbab\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":870,\"y\":380,\"wires\":[]},{\"id\":\"f52b7bec399e315a\",\"type\":\"function\",\"z\":\"39ef55a8.55f96a\",\"name\":\"hello world\",\"func\":\"//@locality=edge\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":630,\"y\":280,\"wires\":[[\"ab91c6c51decfbab\"]]},{\"id\":\"47d1123d17b41031\",\"type\":\"comment\",\"z\":\"39ef55a8.55f96a\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":440,\"y\":360,\"wires\":[]},{\"id\":\"9eba693a7b11c208\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"Service\",\"type\":\"str\"}],\"x\":360,\"y\":440,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:149\",\"type\":\"image\"}],\"displayName\":\"myapp\",\"userId\":\"test\"}",
        "payloadType": "json",
        "x": 260,
        "y": 660,
        "wires": [
            [
                "2017ddca62b26917"
            ]
        ]
    },
    {
        "id": "f1b5b1d97b894b47",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Full Example 2 - BΞβ€ΆΞ²β‚¬ΒaΞβ€ΆΞΒej",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"39ef55a8.55f96a\",\"flowName\":\"Flow 1\",\"flow\":[{\"id\":\"39ef55a8.55f96a\",\"type\":\"tab\",\"label\":\"Flow 1\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"f70d642d7d615561\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":180,\"wires\":[[\"a8ea37eb3bb8cf23\"]]},{\"id\":\"ee0278d90f6393a9\",\"type\":\"http in\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":340,\"y\":280,\"wires\":[[\"f52b7bec399e315a\"]]},{\"id\":\"a8ea37eb3bb8cf23\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":750,\"y\":180,\"wires\":[]},{\"id\":\"ab91c6c51decfbab\",\"type\":\"http response\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"x\":870,\"y\":380,\"wires\":[]},{\"id\":\"f52b7bec399e315a\",\"type\":\"function\",\"z\":\"39ef55a8.55f96a\",\"name\":\"hello world\",\"func\":\"//@locality=edge\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":630,\"y\":280,\"wires\":[[\"ab91c6c51decfbab\"]]},{\"id\":\"47d1123d17b41031\",\"type\":\"comment\",\"z\":\"39ef55a8.55f96a\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":440,\"y\":360,\"wires\":[]},{\"id\":\"9eba693a7b11c208\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"39ef55a8.55f96a\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":360,\"y\":440,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:336\",\"type\":\"image\"},{\"flowID\":\"cc2deec41633e5c5\",\"flowName\":\"Flow 3\",\"flow\":[{\"id\":\"cc2deec41633e5c5\",\"type\":\"tab\",\"label\":\"Flow 3\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"f38afd56aac635ef\",\"type\":\"inject\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"x\":250,\"y\":200,\"wires\":[[\"b2170a569c9343b3\"]]},{\"id\":\"b2170a569c9343b3\",\"type\":\"debug\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":680,\"y\":200,\"wires\":[]}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:337\",\"type\":\"image\"},{\"flowID\":\"4db7e870886c7c0b\",\"flowName\":\"Flow 2\",\"flow\":[{\"id\":\"4db7e870886c7c0b\",\"type\":\"tab\",\"label\":\"Flow 2\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"339d2ef8b0b29795\",\"type\":\"function\",\"z\":\"4db7e870886c7c0b\",\"name\":\"hello\",\"func\":\"//@sizingGB=512\\nmsg.payload=msg.payload+' hello';\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":450,\"y\":180,\"wires\":[[\"3a807141f16764a5\"]]},{\"id\":\"3a807141f16764a5\",\"type\":\"function\",\"z\":\"4db7e870886c7c0b\",\"name\":\"world\",\"func\":\"//implies affinity with the other function in the sequence\\n//@affinity=hello\\nmsg.payload=msg.payload+' world';\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":600,\"y\":180,\"wires\":[[]]},{\"id\":\"65122a1f84227ecc\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"4db7e870886c7c0b\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NativeSequence\",\"type\":\"str\"}],\"x\":500,\"y\":300,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:339\",\"type\":\"image\"}],\"displayName\":\"Application\"}",
        "payloadType": "json",
        "x": 220,
        "y": 540,
        "wires": [
            [
                "2017ddca62b26917"
            ]
        ]
    },
    {
        "id": "94147ba73bbcdf30",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Full Example 3 - BΞβ€ΆΞ²β‚¬ΒaΞβ€ΆΞΒej",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"4db7e870886c7c0b\",\"flowName\":\"Flow 2\",\"flow\":[{\"id\":\"4db7e870886c7c0b\",\"type\":\"tab\",\"label\":\"Flow 2\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"339d2ef8b0b29795\",\"type\":\"function\",\"z\":\"4db7e870886c7c0b\",\"name\":\"hello\",\"func\":\"//@sizingGB=512\\nmsg.payload=msg.payload+' hello';\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":450,\"y\":180,\"wires\":[[\"3a807141f16764a5\"]]},{\"id\":\"3a807141f16764a5\",\"type\":\"function\",\"z\":\"4db7e870886c7c0b\",\"name\":\"world\",\"func\":\"//implies affinity with the other function in the sequence\\n//@affinity=hello\\nmsg.payload=msg.payload+' world';\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":600,\"y\":180,\"wires\":[[]]},{\"id\":\"65122a1f84227ecc\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"4db7e870886c7c0b\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NativeSequence\",\"type\":\"str\"}],\"x\":500,\"y\":300,\"wires\":[]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:339\",\"type\":\"image\"},{\"flowID\":\"cc2deec41633e5c5\",\"flowName\":\"Flow 3\",\"flow\":[{\"id\":\"cc2deec41633e5c5\",\"type\":\"tab\",\"label\":\"Flow 3\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"5c8da9762f97a3f1\",\"type\":\"http in\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":400,\"y\":140,\"wires\":[[\"229225a4e2f90872\"]]},{\"id\":\"e74e390697949e2f\",\"type\":\"http in\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":400,\"y\":240,\"wires\":[[\"4ea933e751def073\"]]},{\"id\":\"229225a4e2f90872\",\"type\":\"http response\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"x\":700,\"y\":140,\"wires\":[]},{\"id\":\"0e905e275931444c\",\"type\":\"http response\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"x\":830,\"y\":320,\"wires\":[]},{\"id\":\"4ea933e751def073\",\"type\":\"function\",\"z\":\"cc2deec41633e5c5\",\"name\":\"hello world\",\"func\":\"//@importance=high\\n//@OptimizationGoal=performance\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":690,\"y\":240,\"wires\":[[\"0e905e275931444c\"]]},{\"id\":\"83c3128c0abb7536\",\"type\":\"comment\",\"z\":\"cc2deec41633e5c5\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":500,\"y\":320,\"wires\":[]},{\"id\":\"187f434a09549e3d\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":450,\"y\":440,\"wires\":[]},{\"id\":\"5049f15a6b1ebce2\",\"type\":\"subflow:2d47e35cedaacba2\",\"z\":\"cc2deec41633e5c5\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"},{\"name\":\"timeout\",\"value\":\"120000\",\"type\":\"num\"}],\"x\":440,\"y\":540,\"wires\":[[]]},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"},{\"id\":\"3f041663b504972d\",\"type\":\"function\",\"z\":\"2d47e35cedaacba2\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"502012d0546e46ab\",\"type\":\"comment\",\"z\":\"2d47e35cedaacba2\",\"name\":\"ADDITIONAL\",\"info\":\"resources:\\n      limits:\\n        memory: 128\\n      requests:\\n        cpu: 1\\n        memory: 128\\n    extraResources:\\n      gpu: true\\n      diskType: ssd\",\"x\":300,\"y\":200,\"wires\":[]},{\"id\":\"2d47e35cedaacba2\",\"type\":\"subflow\",\"name\":\"SizingAnnotator (2)\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"3f041663b504972d\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"3f041663b504972d\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"}],\"artifact\":\"https://registry.apps.ocphub.physics-faas.eu/custom:340\",\"type\":\"image\"}],\"displayName\":\"Application\"}",
        "payloadType": "json",
        "x": 220,
        "y": 460,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "b9b1d7ce2ee4ab48",
        "type": "http request",
        "z": "75bc5fa0db2ad379",
        "name": "Call Extractor AWS endpooint",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "https://semantic-extractor.apps.ocphub.physics-faas.eu/extract",
        "tls": "aeaa52ebbbf839e0",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "c88c716c82357828",
                "12cbe09fdd8cec44"
            ]
        ]
    },
    {
        "id": "615b5e23fdb900ca",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Test Hello DMS App",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"flows\": [     {       \"flowID\": \"3dc59d6aea6e35a4\",       \"flowName\": \"Hello_DMS\",       \"flow\": [         {           \"id\": \"3dc59d6aea6e35a4\",           \"type\": \"tab\",           \"label\": \"Hello_DMS\",           \"disabled\": false,           \"info\": \"\",           \"env\": []         },         {           \"id\": \"3acefcfb6e6a91ea\",           \"type\": \"http in\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"url\": \"/init\",           \"method\": \"post\",           \"upload\": false,           \"swaggerDoc\": \"\",           \"x\": 360,           \"y\": 160,           \"wires\": [             [               \"8cf8bcdd0361dcf7\"             ]           ]         },         {           \"id\": \"b519f76492b660c7\",           \"type\": \"http in\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"url\": \"/run\",           \"method\": \"post\",           \"upload\": false,           \"swaggerDoc\": \"\",           \"x\": 360,           \"y\": 260,           \"wires\": [             [               \"2347840f70beb926\",               \"1b65c81292a1cc77\"             ]           ]         },         {           \"id\": \"8cf8bcdd0361dcf7\",           \"type\": \"http response\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"x\": 660,           \"y\": 160,           \"wires\": []         },         {           \"id\": \"d484c0db85f77685\",           \"type\": \"http response\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"x\": 930,           \"y\": 320,           \"wires\": []         },         {           \"id\": \"2347840f70beb926\",           \"type\": \"function\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"hello world\",           \"func\": \"\\nconsole.log(msg);\\nmsg.payload='hello '+msg.payload.value.name;\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 570,           \"y\": 260,           \"wires\": [             [               \"223f577e6b96a222\"             ]           ]         },         {           \"id\": \"7f89bdaad11eb775\",           \"type\": \"comment\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"OW SKELETON with hello world function\",           \"info\": \"\",           \"x\": 460,           \"y\": 340,           \"wires\": []         },         {           \"id\": \"dc598c2fb4701083\",           \"type\": \"subflow:694cb784968dc0b9\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"Executor Mode\",               \"value\": \"NoderedFunction\",               \"type\": \"str\"             }           ],           \"x\": 220,           \"y\": 420,           \"wires\": []         },         {           \"id\": \"1fcff8400467c8f4\",           \"type\": \"subflow:dd8835083692860a\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"memory\",               \"value\": \"512\",               \"type\": \"num\"             },             {               \"name\": \"timeout\",               \"value\": \"120000\",               \"type\": \"num\"             }           ],           \"x\": 220,           \"y\": 480,           \"wires\": [             []           ]         },         {           \"id\": \"cbb90d5abd6aeb85\",           \"type\": \"subflow:f0b9b88b6dcb2ece\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"goal\",               \"value\": \"performance\",               \"type\": \"str\"             }           ],           \"x\": 270,           \"y\": 540,           \"wires\": []         },         {           \"id\": \"a928d25a87bb1f70\",           \"type\": \"subflow:94dffc86e4af9a58\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"importance\",               \"value\": \"high\",               \"type\": \"str\"             }           ],           \"x\": 240,           \"y\": 600,           \"wires\": []         },         {           \"id\": \"e92d973a0c36b990\",           \"type\": \"subflow:05f045b87080a61e\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"locality\",               \"value\": \"aws\",               \"type\": \"str\"             }           ],           \"x\": 230,           \"y\": 660,           \"wires\": []         },         {           \"id\": \"223f577e6b96a222\",           \"type\": \"function\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"write\",           \"func\": \"var data=msg.payload;\\nmsg.payload={};\\nmsg.payload.data=data;\\nmsg.data=data;\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 750,           \"y\": 260,           \"wires\": [             [               \"0628036e6e37430a\",               \"cabbea3d9687c2e4\"             ]           ]         },         {           \"id\": \"0628036e6e37430a\",           \"type\": \"subflow:d5cdb05c4a8f64a4\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"write\",           \"env\": [             {               \"name\": \"dms_job_id\",               \"value\": \"ss\",               \"type\": \"str\"             },             {               \"name\": \"dms_pocket_dst_file\",               \"value\": \"dd\",               \"type\": \"str\"             },             {               \"name\": \"dms_operation\",               \"value\": \"dms-w\",               \"type\": \"str\"             },             {               \"name\": \"creds\",               \"type\": \"cred\"             },             {               \"name\": \"dms_size\",               \"value\": \"10\",               \"type\": \"num\"             }           ],           \"x\": 650,           \"y\": 320,           \"wires\": [             [               \"3402a8de3203b61c\",               \"7988bc52cb5a9350\"             ]           ]         },         {           \"id\": \"3402a8de3203b61c\",           \"type\": \"function\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"results\",           \"func\": \"var input=msg.payload;\\n\\nmsg.payload={};\\nmsg.payload.dmsResult=input.response.result;\\nmsg.payload.data=msg.data;\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 770,           \"y\": 320,           \"wires\": [             [               \"d484c0db85f77685\",               \"690e6fa8cb324459\"             ]           ]         },         {           \"id\": \"1b65c81292a1cc77\",           \"type\": \"debug\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"false\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 530,           \"y\": 200,           \"wires\": []         },         {           \"id\": \"cabbea3d9687c2e4\",           \"type\": \"debug\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"false\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 950,           \"y\": 260,           \"wires\": []         },         {           \"id\": \"7988bc52cb5a9350\",           \"type\": \"debug\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"false\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 730,           \"y\": 460,           \"wires\": []         },         {           \"id\": \"690e6fa8cb324459\",           \"type\": \"debug\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"false\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 930,           \"y\": 520,           \"wires\": []         },         {           \"id\": \"f6e5aeef996faf78\",           \"type\": \"subflow:789351ac.02c9d\",           \"z\": \"3dc59d6aea6e35a4\",           \"name\": \"\",           \"x\": 630,           \"y\": 620,           \"wires\": [             [],             [],             []           ]         },         {           \"id\": \"82b665f654048ecf\",           \"type\": \"function\",           \"z\": \"694cb784968dc0b9\",           \"name\": \"\",           \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 360,           \"y\": 140,           \"wires\": [             []           ]         },         {           \"id\": \"eeb5210da7efebd3\",           \"type\": \"comment\",           \"z\": \"694cb784968dc0b9\",           \"name\": \"Instructions\",           \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",           \"x\": 560,           \"y\": 280,           \"wires\": []         },         {           \"id\": \"694cb784968dc0b9\",           \"type\": \"subflow\",           \"name\": \"Executor Mode\",           \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",           \"category\": \"PHYSICS Annotators\",           \"in\": [],           \"out\": [],           \"env\": [             {               \"name\": \"Executor Mode\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"type\": \"select\",                 \"opts\": {                   \"opts\": [                     {                       \"l\": {                         \"en-US\": \"Service\"                       },                       \"v\": \"Service\"                     },                     {                       \"l\": {                         \"en-US\": \"NoderedFunction\"                       },                       \"v\": \"NoderedFunction\"                     },                     {                       \"l\": {                         \"en-US\": \"NativeSequence\"                       },                       \"v\": \"NativeSequence\"                     }                   ]                 }               }             }           ],           \"meta\": {},           \"color\": \"#C0DEED\",           \"icon\": \"font-awesome/fa-angle-right\"         },         {           \"id\": \"c66966a2d36f06b5\",           \"type\": \"function\",           \"z\": \"dd8835083692860a\",           \"name\": \"add sizing\",           \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 300,           \"y\": 60,           \"wires\": [             []           ]         },         {           \"id\": \"dd8835083692860a\",           \"type\": \"subflow\",           \"name\": \"SizingAnnotator\",           \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",           \"category\": \"PHYSICS Annotators\",           \"in\": [             {               \"x\": 120,               \"y\": 60,               \"wires\": [                 {                   \"id\": \"c66966a2d36f06b5\"                 }               ]             }           ],           \"out\": [             {               \"x\": 440,               \"y\": 60,               \"wires\": [                 {                   \"id\": \"c66966a2d36f06b5\",                   \"port\": 0                 }               ]             }           ],           \"env\": [             {               \"name\": \"memory\",               \"type\": \"num\",               \"value\": \"\",               \"ui\": {                 \"label\": {                   \"en-US\": \"Memory (MB)\"                 }               }             },             {               \"name\": \"timeout\",               \"type\": \"num\",               \"value\": \"\",               \"ui\": {                 \"icon\": \"font-awesome/fa-times-circle-o\",                 \"label\": {                   \"en-US\": \"Timeout (millisecs)\"                 }               }             }           ],           \"meta\": {},           \"color\": \"#E9967A\",           \"icon\": \"font-awesome/fa-arrows-h\"         },         {           \"id\": \"5697feaf2b80f2ef\",           \"type\": \"function\",           \"z\": \"f0b9b88b6dcb2ece\",           \"name\": \"\",           \"func\": \"\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 190,           \"y\": 80,           \"wires\": [             []           ]         },         {           \"id\": \"f0b9b88b6dcb2ece\",           \"type\": \"subflow\",           \"name\": \"Optimization Goal (Flow Level)\",           \"info\": \"\",           \"category\": \"PHYSICS Annotators\",           \"in\": [],           \"out\": [],           \"env\": [             {               \"name\": \"goal\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"type\": \"select\",                 \"opts\": {                   \"opts\": [                     {                       \"l\": {                         \"en-US\": \"performance\"                       },                       \"v\": \"performance\"                     },                     {                       \"l\": {                         \"en-US\": \"energy\"                       },                       \"v\": \"energy\"                     },                     {                       \"l\": {                         \"en-US\": \"availability\"                       },                       \"v\": \"availability\"                     }                   ]                 }               }             }           ],           \"meta\": {},           \"color\": \"#FFAAAA\",           \"icon\": \"font-awesome/fa-sliders\"         },         {           \"id\": \"0ac25ab60b652265\",           \"type\": \"function\",           \"z\": \"94dffc86e4af9a58\",           \"name\": \"\",           \"func\": \"msg.annotations={};\\nmsg.annotations.importance=env.get('importance');\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 200,           \"y\": 80,           \"wires\": [             []           ]         },         {           \"id\": \"94dffc86e4af9a58\",           \"type\": \"subflow\",           \"name\": \"Importance (Flow level)\",           \"info\": \"\",           \"category\": \"PHYSICS Annotators\",           \"in\": [],           \"out\": [],           \"env\": [             {               \"name\": \"importance\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"type\": \"select\",                 \"opts\": {                   \"opts\": [                     {                       \"l\": {                         \"en-US\": \"high\"                       },                       \"v\": \"high\"                     },                     {                       \"l\": {                         \"en-US\": \"medium\"                       },                       \"v\": \"medium\"                     },                     {                       \"l\": {                         \"en-US\": \"low\"                       },                       \"v\": \"low\"                     }                   ]                 }               }             }           ],           \"meta\": {},           \"color\": \"#3FADB5\",           \"icon\": \"node-red/alert.svg\"         },         {           \"id\": \"79574bee858dc748\",           \"type\": \"function\",           \"z\": \"05f045b87080a61e\",           \"name\": \"\",           \"func\": \"\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 420,           \"y\": 140,           \"wires\": [             []           ]         },         {           \"id\": \"05f045b87080a61e\",           \"type\": \"subflow\",           \"name\": \"Locality(flow level)\",           \"info\": \"\",           \"category\": \"PHYSICS Annotators\",           \"in\": [],           \"out\": [],           \"env\": [             {               \"name\": \"locality\",               \"type\": \"str\",               \"value\": \"\"             }           ],           \"meta\": {},           \"color\": \"#D8BFD8\",           \"icon\": \"font-awesome/fa-braille\"         },         {           \"id\": \"795bfb0aa4e6606a\",           \"type\": \"tls-config\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"cert\": \"\",           \"key\": \"\",           \"ca\": \"\",           \"certname\": \"\",           \"keyname\": \"\",           \"caname\": \"\",           \"servername\": \"\",           \"verifyservercert\": false,           \"alpnprotocol\": \"\"         },         {           \"id\": \"b1565887a7f49105\",           \"type\": \"function\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"adapt\",           \"func\": \"\\nif (msg.hasOwnProperty('dms_job_id')){\\n} else {\\n    msg.dms_job_id=env.get('dms_job_id');\\n}\\n\\nif (msg.hasOwnProperty('dms_size')){\\n} else {\\n    msg.dms_size=env.get('dms_size');\\n}\\n\\nif (msg.hasOwnProperty('dms_location')){\\n} else {\\n    msg.dms_location=env.get('dms_location');\\n}\\n\\n\\nif (msg.hasOwnProperty('dms_operation')){\\n} else {\\n    msg.dms_operation=env.get('dms_operation');\\n}\\n\\nif (msg.hasOwnProperty('dms_namespace')){\\n} else {\\n    msg.namespace=env.get('dms_namespace');\\n}\\n\\n\\nif (msg.hasOwnProperty('dms_pocket_dst_file')){\\n    //msg.dms_pocket_dst_file=msg.payload.dms_pocket_dst_file;\\n} else {\\n    msg.dms_pocket_dst_file=env.get('dms_pocket_dst_file');\\n}\\n\\nif (msg.hasOwnProperty('creds')){\\n    //msg.creds=msg.payload.dms_namespace;\\n} else {\\n    msg.creds=env.get('creds');\\n}\\n\\n\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 250,           \"y\": 80,           \"wires\": [             [               \"ccb0503362a32b2a\",               \"4856665561ef0433\"             ]           ]         },         {           \"id\": \"ccb0503362a32b2a\",           \"type\": \"function\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"insert action invocation url and auth\",           \"func\": \"//msg.url='http://10.100.59.182:3233/api/v1/namespaces/guest/actions/dockeraction';\\nmsg.url=msg.dms_location+'/namespaces/'+msg.namespace+'/actions/'+msg.dms_operation;\\n\\nconsole.log(msg.creds);\\nmsg.creds='178f79b4-4540-449c-a815-f3b50602aeca:0EWLwLLxVWFsBrW4Lq7Y1EuTYRcfVSsYjXQANDQ78nO9tgzT6B2nui2whli9wlc5';\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\n\\nmsg.payload.jobid=msg.dms_job_id;\\nmsg.payload.pocketFile= msg.dms_pocket_dst_file;\\nmsg.payload.size=msg.dms_size;\\n\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 340,           \"y\": 140,           \"wires\": [             [               \"3457bb2065109dc6\",               \"2c3be5d81299426d\"             ]           ]         },         {           \"id\": \"3457bb2065109dc6\",           \"type\": \"http request\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"method\": \"POST\",           \"ret\": \"obj\",           \"paytoqs\": \"ignore\",           \"url\": \"\",           \"tls\": \"795bfb0aa4e6606a\",           \"persist\": false,           \"proxy\": \"\",           \"authType\": \"basic\",           \"x\": 290,           \"y\": 200,           \"wires\": [             [               \"28af37e1ffcddb70\",               \"2faee81a277aefcd\"             ]           ]         },         {           \"id\": \"28af37e1ffcddb70\",           \"type\": \"function\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"add OW activation id from reply\",           \"func\": \"\\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\\n\\n//msg.url='http://10.100.59.182:3233/api/v1/namespaces/_/activations/'+msg.activationID;\\n\\nmsg.url=msg.dms_location+'/namespaces/'+msg.namespace+'/activations/'+msg.activationID;\\n\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 350,           \"y\": 260,           \"wires\": [             [               \"f8348bbae5afdb07\"             ]           ]         },         {           \"id\": \"f8348bbae5afdb07\",           \"type\": \"subflow:789351ac.02c9d\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"env\": [             {               \"name\": \"maxAttempts\",               \"value\": \"20\",               \"type\": \"str\"             },             {               \"name\": \"pollPeriod\",               \"value\": \"10000\",               \"type\": \"str\"             },             {               \"name\": \"method\",               \"value\": \"POST\",               \"type\": \"str\"             },             {               \"name\": \"functionChain\",               \"value\": \"false\",               \"type\": \"bool\"             }           ],           \"x\": 330,           \"y\": 320,           \"wires\": [             [],             [               \"e5351303862f506c\"             ],             []           ]         },         {           \"id\": \"f3dce7600cf573ec\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"SUCCESS\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 930,           \"y\": 300,           \"wires\": []         },         {           \"id\": \"e5351303862f506c\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"RETRY FAIL\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 930,           \"y\": 340,           \"wires\": []         },         {           \"id\": \"9749a0001a768f9a\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"FINAL FAIL\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 930,           \"y\": 380,           \"wires\": []         },         {           \"id\": \"4856665561ef0433\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 440,           \"y\": 80,           \"wires\": []         },         {           \"id\": \"2c3be5d81299426d\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 570,           \"y\": 140,           \"wires\": []         },         {           \"id\": \"2faee81a277aefcd\",           \"type\": \"debug\",           \"z\": \"d5cdb05c4a8f64a4\",           \"name\": \"\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"statusVal\": \"\",           \"statusType\": \"auto\",           \"x\": 690,           \"y\": 200,           \"wires\": []         },         {           \"id\": \"d5cdb05c4a8f64a4\",           \"type\": \"subflow\",           \"name\": \"DMS Interface\",           \"info\": \"The data to be written needs to be included in the \\nmsg.payload.data.\\n\\nThe operation can be selected from the UI (Read/Write/Lookup) or can be set via the msg.operation field.\\n\\nThe job_id can be set from the UI  or can be set via the msg.job_id field. \\n\\nThe pocket destination file can be set from the UI  or can be set via the msg.pocket_dst_file field.\\n\\nThe pocket server location can be set from the UI or via the msg.dms_location field.\\n\\nThe credentials (user:key) for OW can be set either through the UI or through the msg.creds parameter.\\n\\nThe size parameter should be set either through the msg.dms_size or the UI.\\n\\nIn all cases, the incoming message parameters override the UI set ones. \\n\\nInternal dms function details:\\n * /wp4namespace/dms-w:\\n - input: '--param data \\\"hello world\\\" ' this param indicates the data to be stored in dms.\\n - output: return {\\\"jobid\\\": jobid, \\\"pocketFile\\\": pocketFile,  \\\"size\\\": len(text)} The jobid is the identifier of the file where is stored the information, the pocketFile is the path where the jobId file is stored and the len is the amount of data to read in MB. \\n * /wp4namespace/dms-r:\\n - input:  --param jobid \\\"jobidX\\\" --param pocketFile \\\"pocketFileX\\\" --param size 100.\\n - output: return {\\\"jobid\\\": jobid, \\\"pocketFile\\\": pocketFile}\\n * /wp4namespace/dms-l:\\n - input: --param jobid \\\"jobidX\\\" --param pocketFile \\\"pocketFileX\\\"\\n - output:  return {\\\"result\\\": result} True if exists, false otherwise\",           \"category\": \"PHYSICS Annotators\",           \"in\": [             {               \"x\": 100,               \"y\": 80,               \"wires\": [                 {                   \"id\": \"b1565887a7f49105\"                 }               ]             }           ],           \"out\": [             {               \"x\": 740,               \"y\": 260,               \"wires\": [                 {                   \"id\": \"f8348bbae5afdb07\",                   \"port\": 0                 },                 {                   \"id\": \"f8348bbae5afdb07\",                   \"port\": 2                 }               ]             }           ],           \"env\": [             {               \"name\": \"dms_location\",               \"type\": \"str\",               \"value\": \"https://openwhisk.apps.ocphub.physics-faas.eu/api/v1\"             },             {               \"name\": \"dms_job_id\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"label\": {                   \"en-US\": \"Custom Job ID\"                 }               }             },             {               \"name\": \"dms_pocket_dst_file\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"label\": {                   \"en-US\": \"Destination File\"                 }               }             },             {               \"name\": \"dms_operation\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"type\": \"select\",                 \"opts\": {                   \"opts\": [                     {                       \"l\": {                         \"en-US\": \"Read\"                       },                       \"v\": \"dms-r\"                     },                     {                       \"l\": {                         \"en-US\": \"Write\"                       },                       \"v\": \"dms-w\"                     },                     {                       \"l\": {                         \"en-US\": \"Lookup\"                       },                       \"v\": \"dms-l\"                     }                   ]                 }               }             },             {               \"name\": \"dms_namespace\",               \"type\": \"str\",               \"value\": \"wp4namespace\",               \"ui\": {                 \"label\": {                   \"en-US\": \"OW namespace\"                 }               }             },             {               \"name\": \"creds\",               \"type\": \"cred\"             },             {               \"name\": \"dms_size\",               \"type\": \"num\",               \"value\": \"\",               \"ui\": {                 \"label\": {                   \"en-US\": \"size\"                 }               }             }           ],           \"meta\": {},           \"color\": \"#FFAAAA\",           \"icon\": \"font-awesome/fa-database\"         },         {           \"id\": \"2934f390.711324\",           \"type\": \"tls-config\",           \"z\": \"789351ac.02c9d\",           \"name\": \"\",           \"cert\": \"\",           \"key\": \"\",           \"ca\": \"\",           \"certname\": \"\",           \"keyname\": \"\",           \"caname\": \"\",           \"servername\": \"\",           \"verifyservercert\": false         },         {           \"id\": \"7d194c10.33b51c\",           \"type\": \"function\",           \"z\": \"789351ac.02c9d\",           \"name\": \"defaults+activation id\",           \"func\": \"\\nif (msg.hasOwnProperty('maxAttempts')){\\n    msg.iterations=msg.maxAttempts;\\n} else {\\n    msg.iterations=env.get('maxAttempts');\\n}\\n//needed to reset the iterations after function chaining\\nmsg.defaultAttempts=msg.iterations;\\n\\nif (msg.hasOwnProperty('pollPeriod')){\\n    \\n} else {\\n    msg.pollPeriod=env.get('pollPeriod');\\n}\\n\\nif (msg.hasOwnProperty('method')){\\n    \\n} else {\\n    msg.method=env.get('method');\\n}\\n\\nif (msg.hasOwnProperty('url')){\\n    \\n} else {\\n    msg.url=env.get('url');\\n}\\n\\nif (msg.hasOwnProperty('retryCode')){\\n    \\n} else {\\n    msg.retryCode=env.get('retryCode');\\n}\\n\\nif (msg.hasOwnProperty('acceptCode')){\\n    \\n} else {\\n    msg.acceptCode=env.get('acceptCode');\\n}\\n\\nif (msg.hasOwnProperty('creds')){\\n    \\n} else {\\n    msg.creds=env.get('creds');\\n}\\n\\nif (msg.hasOwnProperty('functionChain')){\\n    \\n} else {\\n    msg.functionChain=env.get('functionChain');\\n}\\n\\nif (msg.hasOwnProperty('inputData')){\\n    if (msg.inputData.hasOwnProperty('creds')){\\n        msg.creds=msg.inputData.creds;\\n    }\\n}\\n\\n\\n\\nmsg.delay=msg.pollPeriod;\\nmsg.start=Date.now();\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 200,           \"y\": 160,           \"wires\": [             [               \"cad17b04.a2b4d8\"             ]           ]         },         {           \"id\": \"4be3f205.3e8dc4\",           \"type\": \"function\",           \"z\": \"789351ac.02c9d\",           \"name\": \"iterations--\",           \"func\": \"msg.iterations=msg.iterations-1;\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"x\": 350,           \"y\": 300,           \"wires\": [             [               \"c2cf68b7.263d4\",               \"d8305759.866988\"             ]           ]         },         {           \"id\": \"c2cf68b7.263d4\",           \"type\": \"switch\",           \"z\": \"789351ac.02c9d\",           \"name\": \"if iterations finished\",           \"property\": \"iterations\",           \"propertyType\": \"msg\",           \"rules\": [             {               \"t\": \"gte\",               \"v\": \"1\",               \"vt\": \"num\"             },             {               \"t\": \"lt\",               \"v\": \"1\",               \"vt\": \"num\"             }           ],           \"checkall\": \"true\",           \"repair\": false,           \"outputs\": 2,           \"x\": 550,           \"y\": 300,           \"wires\": [             [               \"cad17b04.a2b4d8\"             ],             []           ]         },         {           \"id\": \"76299695.812bd8\",           \"type\": \"comment\",           \"z\": \"789351ac.02c9d\",           \"name\": \"SUCCESS\",           \"info\": \"\",           \"x\": 1100,           \"y\": 60,           \"wires\": []         },         {           \"id\": \"48093072.b17a6\",           \"type\": \"comment\",           \"z\": \"789351ac.02c9d\",           \"name\": \"FINAL FAIL\",           \"info\": \"\",           \"x\": 890,           \"y\": 360,           \"wires\": []         },         {           \"id\": \"d5960f2f.2e9448\",           \"type\": \"delay\",           \"z\": \"789351ac.02c9d\",           \"name\": \"delay\",           \"pauseType\": \"delayv\",           \"timeout\": \"5\",           \"timeoutUnits\": \"seconds\",           \"rate\": \"1\",           \"nbRateUnits\": \"1\",           \"rateUnits\": \"second\",           \"randomFirst\": \"1\",           \"randomLast\": \"5\",           \"randomUnits\": \"seconds\",           \"drop\": false,           \"outputs\": 1,           \"x\": 170,           \"y\": 300,           \"wires\": [             [               \"4be3f205.3e8dc4\"             ]           ]         },         {           \"id\": \"471b3d64.265894\",           \"type\": \"http request\",           \"z\": \"789351ac.02c9d\",           \"name\": \"\",           \"method\": \"GET\",           \"ret\": \"obj\",           \"paytoqs\": \"ignore\",           \"url\": \"\",           \"tls\": \"2934f390.711324\",           \"persist\": false,           \"proxy\": \"\",           \"authType\": \"\",           \"x\": 590,           \"y\": 160,           \"wires\": [             [               \"8694180b.ec1c68\"             ]           ]         },         {           \"id\": \"8694180b.ec1c68\",           \"type\": \"switch\",           \"z\": \"789351ac.02c9d\",           \"name\": \"Status code check\",           \"property\": \"statusCode\",           \"propertyType\": \"msg\",           \"rules\": [             {               \"t\": \"lte\",               \"v\": \"acceptCode\",               \"vt\": \"msg\"             },             {               \"t\": \"gte\",               \"v\": \"retryCode\",               \"vt\": \"msg\"             }           ],           \"checkall\": \"true\",           \"repair\": false,           \"outputs\": 2,           \"x\": 810,           \"y\": 160,           \"wires\": [             [               \"f9d0aba7.72382\"             ],             [               \"d5960f2f.2e9448\"             ]           ]         },         {           \"id\": \"ef03414f.ad9d78\",           \"type\": \"comment\",           \"z\": \"789351ac.02c9d\",           \"name\": \"RETRY FAIL\",           \"info\": \"\",           \"x\": 890,           \"y\": 260,           \"wires\": []         },         {           \"id\": \"66bbc0cf.0c62f\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"BEFORE AUTH\",           \"active\": true,           \"tosidebar\": true,           \"console\": false,           \"tostatus\": false,           \"complete\": \"true\",           \"targetType\": \"full\",           \"x\": 370,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"13791c2d.8cea7c\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"URL\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"url\",           \"targetType\": \"msg\",           \"x\": 580,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"cad17b04.a2b4d8\",           \"type\": \"function\",           \"z\": \"789351ac.02c9d\",           \"name\": \"add auth\",           \"func\": \"msg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 420,           \"y\": 160,           \"wires\": [             [               \"471b3d64.265894\"             ]           ]         },         {           \"id\": \"f2b7c4e4.a24c3\",           \"type\": \"function\",           \"z\": \"789351ac.02c9d\",           \"name\": \"adapt to new activation\",           \"func\": \"\\n\\nmsg.url=msg.payload.response.result.newActivationIDURL;\\nmsg.iterations=msg.defaultAttempts+1;\\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 1500,           \"y\": 160,           \"wires\": [             [               \"d5960f2f.2e9448\",               \"ee1dbf44.7368f8\"             ]           ]         },         {           \"id\": \"c338e47b.b00ed\",           \"type\": \"comment\",           \"z\": \"789351ac.02c9d\",           \"name\": \"FUNCTION CHAIN CONTINUATION\",           \"info\": \"\",           \"x\": 1240,           \"y\": 240,           \"wires\": []         },         {           \"id\": \"ee1dbf44.7368f8\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"AFTER CONTINUATION IN Poll2Push\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"payload\",           \"targetType\": \"msg\",           \"x\": 1420,           \"y\": 300,           \"wires\": []         },         {           \"id\": \"f9d0aba7.72382\",           \"type\": \"switch\",           \"z\": \"789351ac.02c9d\",           \"name\": \"is Chain\",           \"property\": \"functionChain\",           \"propertyType\": \"msg\",           \"rules\": [             {               \"t\": \"false\"             },             {               \"t\": \"true\"             }           ],           \"checkall\": \"true\",           \"repair\": false,           \"outputs\": 2,           \"x\": 1020,           \"y\": 160,           \"wires\": [             [],             [               \"6da1eea0.969368\",               \"1bbc6fa0.4879c\"             ]           ]         },         {           \"id\": \"6da1eea0.969368\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"RESULT STATUS\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"payload\",           \"targetType\": \"msg\",           \"x\": 1100,           \"y\": 300,           \"wires\": []         },         {           \"id\": \"f20a68d.9711598\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"AFTER CODE CHECK\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"functionChain\",           \"targetType\": \"msg\",           \"x\": 890,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"36905e62.dfad92\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"TOP1\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"payload\",           \"targetType\": \"msg\",           \"x\": 1120,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"9610a737.bf275\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"TOP2\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"payload\",           \"targetType\": \"msg\",           \"x\": 1300,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"c52af08f.756ee8\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"TOP3\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"payload\",           \"targetType\": \"msg\",           \"x\": 1600,           \"y\": 100,           \"wires\": []         },         {           \"id\": \"1bbc6fa0.4879c\",           \"type\": \"function\",           \"z\": \"789351ac.02c9d\",           \"name\": \"compare completion\",           \"func\": \"console.log('IN COMPARE COMPLETION',msg.payload.response);\\nif (msg.payload.response.result.status==='Completed'){\\n    return [msg,null];\\n} else {\\n    return [null,msg];\\n}\\n\",           \"outputs\": 2,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 1240,           \"y\": 160,           \"wires\": [             [               \"c52af08f.756ee8\"             ],             [               \"f2b7c4e4.a24c3\"             ]           ]         },         {           \"id\": \"d8305759.866988\",           \"type\": \"debug\",           \"z\": \"789351ac.02c9d\",           \"name\": \"URL\",           \"active\": true,           \"tosidebar\": true,           \"console\": true,           \"tostatus\": false,           \"complete\": \"iterations\",           \"targetType\": \"msg\",           \"x\": 500,           \"y\": 380,           \"wires\": []         },         {           \"id\": \"789351ac.02c9d\",           \"type\": \"subflow\",           \"name\": \"PollTOPushConverterFC\",           \"info\": \"This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\\n\\nThe according function should return as a response the following structure:\\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \\n\\nThe node also can get credentials from the msg.creds field of the input message.\\n\\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\\n\\nThe node has three outputs:\\n - Output 1 indicates successful finalization of the API call\\n - Output 2 indicates intermediate failure and was added to return the reason for failure\\n - Output 3 indicates final failure after max attempts\\n\\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\\n\\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\\n\\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\\n\\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\\n \\n\",           \"category\": \"PHYSICS Helpers\",           \"in\": [             {               \"x\": 60,               \"y\": 160,               \"wires\": [                 {                   \"id\": \"7d194c10.33b51c\"                 }               ]             }           ],           \"out\": [             {               \"x\": 1380,               \"y\": 40,               \"wires\": [                 {                   \"id\": \"f9d0aba7.72382\",                   \"port\": 0                 },                 {                   \"id\": \"1bbc6fa0.4879c\",                   \"port\": 0                 }               ]             },             {               \"x\": 780,               \"y\": 260,               \"wires\": [                 {                   \"id\": \"c2cf68b7.263d4\",                   \"port\": 0                 }               ]             },             {               \"x\": 780,               \"y\": 360,               \"wires\": [                 {                   \"id\": \"c2cf68b7.263d4\",                   \"port\": 1                 }               ]             }           ],           \"env\": [             {               \"name\": \"maxAttempts\",               \"type\": \"str\",               \"value\": \"3\"             },             {               \"name\": \"pollPeriod\",               \"type\": \"str\",               \"value\": \"3000\"             },             {               \"name\": \"method\",               \"type\": \"str\",               \"value\": \"\"             },             {               \"name\": \"url\",               \"type\": \"str\",               \"value\": \"http://10.100.59.182:3233/api/v1/namespaces/_/activations/\"             },             {               \"name\": \"retryCode\",               \"type\": \"num\",               \"value\": \"202\"             },             {               \"name\": \"acceptCode\",               \"type\": \"num\",               \"value\": \"200\"             },             {               \"name\": \"functionChain\",               \"type\": \"bool\",               \"value\": \"true\"             }           ],           \"meta\": {},           \"color\": \"#b4e8a9\"         }       ],       \"artifact\": \"https://registry.apps.ocphub.physics-faas.eu/custom:45\",       \"type\": \"image\"     }   ],   \"displayName\": \"Application\" }",
        "payloadType": "json",
        "x": 430,
        "y": 760,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "e2fbaa850a300e48",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "Simple App with V2 flows",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"flows\": [     {       \"flowID\": \"104348eeda17061b\",       \"flowName\": \"Sequence_v2\",       \"flow\": [         {           \"id\": \"104348eeda17061b\",           \"type\": \"tab\",           \"label\": \"Sequence_v2\",           \"disabled\": false,           \"info\": \"\",           \"env\": []         },         {           \"id\": \"8927b63106cb0dc5\",           \"type\": \"function\",           \"z\": \"104348eeda17061b\",           \"name\": \"hello\",           \"func\": \"//@sizingMB=512\\nmsg.payload=msg.payload.value+' hello';\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 490,           \"y\": 180,           \"wires\": [             [               \"6682aa5726c78fc9\"             ]           ]         },         {           \"id\": \"6682aa5726c78fc9\",           \"type\": \"function\",           \"z\": \"104348eeda17061b\",           \"name\": \"world\",           \"func\": \"//implies affinity with the other function in the sequence\\n//@affinity=hello\\nmsg.payload=msg.payload.value+' world';\\nreturn msg;\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 660,           \"y\": 180,           \"wires\": [             []           ]         },         {           \"id\": \"fef4a8d9d2730b90\",           \"type\": \"subflow:694cb784968dc0b9\",           \"z\": \"104348eeda17061b\",           \"name\": \"\",           \"env\": [             {               \"name\": \"Executor Mode\",               \"value\": \"NativeSequence\",               \"type\": \"str\"             }           ],           \"x\": 540,           \"y\": 300,           \"wires\": []         },         {           \"id\": \"82b665f654048ecf\",           \"type\": \"function\",           \"z\": \"694cb784968dc0b9\",           \"name\": \"\",           \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",           \"outputs\": 1,           \"noerr\": 0,           \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",           \"finalize\": \"\",           \"libs\": [],           \"x\": 360,           \"y\": 140,           \"wires\": [             []           ]         },         {           \"id\": \"eeb5210da7efebd3\",           \"type\": \"comment\",           \"z\": \"694cb784968dc0b9\",           \"name\": \"Instructions\",           \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",           \"x\": 560,           \"y\": 280,           \"wires\": []         },         {           \"id\": \"694cb784968dc0b9\",           \"type\": \"subflow\",           \"name\": \"Executor Mode\",           \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",           \"category\": \"PHYSICS Annotators\",           \"in\": [],           \"out\": [],           \"env\": [             {               \"name\": \"Executor Mode\",               \"type\": \"str\",               \"value\": \"\",               \"ui\": {                 \"type\": \"select\",                 \"opts\": {                   \"opts\": [                     {                       \"l\": {                         \"en-US\": \"Service\"                       },                       \"v\": \"Service\"                     },                     {                       \"l\": {                         \"en-US\": \"NoderedFunction\"                       },                       \"v\": \"NoderedFunction\"                     },                     {                       \"l\": {                         \"en-US\": \"NativeSequence\"                       },                       \"v\": \"NativeSequence\"                     }                   ]                 }               }             }           ],           \"meta\": {},           \"color\": \"#C0DEED\",           \"icon\": \"font-awesome/fa-angle-right\"         }       ],       \"artifact\": \"https://registry.apps.ocphub.physics-faas.eu/custom:18\",       \"type\": \"image\"     }   ],   \"displayName\": \"Application\" }",
        "payloadType": "json",
        "x": 430,
        "y": 840,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "a6ef04aa2ed30140",
        "type": "http in",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "url": "/desc",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 740,
        "y": 780,
        "wires": [
            [
                "babd8085746ab9f9"
            ]
        ]
    },
    {
        "id": "babd8085746ab9f9",
        "type": "file in",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "filename": "/data/SE_output_SM_App.txt",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 960,
        "y": 780,
        "wires": [
            [
                "8a56904a703dc0dd"
            ]
        ]
    },
    {
        "id": "7fdb5a767e787b5f",
        "type": "http response",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1250,
        "y": 920,
        "wires": []
    },
    {
        "id": "e0daa18fe6db6d7d",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "ehealthAPP",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"flows\": [         {             \"flowID\": \"f4a0fb9518d4df8d\",             \"flowName\": \"Inference\",             \"flow\": [                 {                     \"id\": \"f4a0fb9518d4df8d\",                     \"type\": \"tab\",                     \"label\": \"Inference\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"48676e3bbd5ccbdd\",                     \"type\": \"exec\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"command\": \"python3 /data/scripts/inference.py\",                     \"addpay\": \"cla\",                     \"append\": \"\",                     \"useSpawn\": \"false\",                     \"timer\": \"\",                     \"winHide\": false,                     \"oldrc\": false,                     \"name\": \"Infer with Python\",                     \"x\": 410,                     \"y\": 360,                     \"wires\": [                         [                             \"bfc262ed8d69643a\"                         ],                         [                             \"3ec2ee2e0cd2bb1b\"                         ],                         []                     ]                 },                 {                     \"id\": \"41dd301dce34ce6e\",                     \"type\": \"inject\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"topic\",                             \"vt\": \"str\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"\",                     \"payloadType\": \"date\",                     \"x\": 120,                     \"y\": 680,                     \"wires\": [                         [                             \"a3107530757941c9\"                         ]                     ]                 },                 {                     \"id\": \"d0eb89f611e377fd\",                     \"type\": \"http request\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Send request\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/run\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"basic\",                     \"senderr\": false,                     \"x\": 490,                     \"y\": 680,                     \"wires\": [                         [                             \"4078b21395814fb2\"                         ]                     ]                 },                 {                     \"id\": \"4078b21395814fb2\",                     \"type\": \"debug\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Inference\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 660,                     \"y\": 680,                     \"wires\": []                 },                 {                     \"id\": \"5f46f2f372d50ec2\",                     \"type\": \"http response\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"statusCode\": \"\",                     \"headers\": {},                     \"x\": 870,                     \"y\": 460,                     \"wires\": []                 },                 {                     \"id\": \"89bbfca9894f9583\",                     \"type\": \"join\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"mode\": \"auto\",                     \"build\": \"array\",                     \"property\": \"payload\",                     \"propertyType\": \"msg\",                     \"key\": \"topic\",                     \"joiner\": \"\\\\n\",                     \"joinerType\": \"str\",                     \"accumulate\": false,                     \"timeout\": \"\",                     \"count\": \"2\",                     \"reduceRight\": false,                     \"reduceExp\": \"\",                     \"reduceInit\": \"\",                     \"reduceInitType\": \"\",                     \"reduceFixup\": \"\",                     \"x\": 770,                     \"y\": 340,                     \"wires\": [                         [                             \"8fe0a12ef00c83e0\"                         ]                     ]                 },                 {                     \"id\": \"8fe0a12ef00c83e0\",                     \"type\": \"function\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Prepare response\",                     \"func\": \"var input = msg.payload;\\nmsg.payload = {};\\nerrors = input[1];\\nif (input[0] == \\\"\\\") {\\n    msg.payload.errors = JSON.stringify(errors);\\n    msg.statusCode = 500;\\n} else {\\n    msg.payload.out = input[0];\\n    msg.payload.errors = JSON.stringify(errors);\\n}\\nmsg.filename = '/data/scripts/out_' + msg._msgid;\\nmsg.result = msg.payload;\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 210,                     \"y\": 460,                     \"wires\": [                         [                             \"91e8d9a937614015\"                         ]                     ]                 },                 {                     \"id\": \"3ec2ee2e0cd2bb1b\",                     \"type\": \"subflow:61834c2663a6ece6\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"totalcount\",                             \"value\": \"2\",                             \"type\": \"num\"                         },                         {                             \"name\": \"position\",                             \"value\": \"2\",                             \"type\": \"num\"                         }                     ],                     \"x\": 610,                     \"y\": 360,                     \"wires\": [                         [                             \"89bbfca9894f9583\"                         ]                     ]                 },                 {                     \"id\": \"bfc262ed8d69643a\",                     \"type\": \"subflow:61834c2663a6ece6\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"totalcount\",                             \"value\": \"2\",                             \"type\": \"num\"                         },                         {                             \"name\": \"position\",                             \"value\": \"1\",                             \"type\": \"num\"                         }                     ],                     \"x\": 610,                     \"y\": 320,                     \"wires\": [                         [                             \"89bbfca9894f9583\"                         ]                     ]                 },                 {                     \"id\": \"a3bf1605553dc582\",                     \"type\": \"http in\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 80,                     \"y\": 360,                     \"wires\": [                         [                             \"9e2f3aa450c84658\"                         ]                     ]                 },                 {                     \"id\": \"a3107530757941c9\",                     \"type\": \"function\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Prepare input\",                     \"func\": \"msg.payload = {};\\nmsg.payload.value = {};\\nmsg.payload.value.input = \\\"[{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.37319498,0.22020688,0.80695292,-0.14483578,0.82998543,-0.37742864,1.66220971,-0.65614964,-0.14292737,-0.37938052,0.79727469,0.11874357,-1.01171128,0.36931477]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.38092934,0.77517288,0.60602839,-0.74486557,0.55876642,-0.97958379,0.6130755,-1.33591593,0.23242436,0.20101902,0.57318741,-0.32033507,-0.32264458,0.70643433]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.40445467,1.08207716,0.75746139,-0.0749294,0.90057979,0.08020928,0.44294563,-0.95483483,0.79288105,0.84270299,1.23749778,0.99690085,-0.08768413,0.79027754]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.40896638,0.95170053,0.42175769,-1.12061238,0.47985993,-0.97055147,1.12346512,-0.0361204,0.53064902,0.24427862,1.03798781,0.48402748,0.4104772,1.2217207]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.39253087,-0.00477934,0.53616301,-0.60796557,0.86801974,0.23074807,1.18017507,0.04627552,0.75174661,0.44976169,1.17316305,0.82348324,0.90750891,1.51517193]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.41380036,0.89401176,0.55280539,-0.40407195,0.74137306,-0.1215127,0.66978546,-0.5119568,1.0756803,0.8210732,0.43006069,-1.13576682,0.33027435,0.62084439]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.43055813,1.23437552,0.2466346,-1.42354004,0.21542495,-1.64195446,0.69814044,-0.38424313,1.27621067,1.05179103,0.44379507,-1.03614394,-0.47288371,-0.61933637]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.43378078,1.12476685,0.14893176,-1.64491026,0.27156963,-1.32582301,0.17357333,-1.05988962,1.50245007,1.09865559,0.19585333,-1.66708887,0.46808769,0.83045241]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.4179898,0.41634871,0.19798855,-1.27207621,0.28847097,-1.13614413,0.42876814,-0.53667557,0.68490315,0.17578426,0.23705648,-1.35346127,0.54038322,0.83743934]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.37738442,-1.15970858,0.17140037,-1.32159323,0.21450978,-1.34689844,0.18775082,-0.80858208,-0.22005444,-0.85523605,0.39680903,-0.86272633,0.34382976,0.45315798]}]\\\";\\nmsg.payload.value.model = \\\"benchmark_tristate_NN_no_valid\\\";\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 680,                     \"wires\": [                         [                             \"d0eb89f611e377fd\",                             \"2c2d1ebff6a7cc1b\"                         ]                     ]                 },                 {                     \"id\": \"9e2f3aa450c84658\",                     \"type\": \"function\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Prepare CLA\",                     \"func\": \"msg.cla = \\\"'\\\" + msg.payload.value.input + \\\"' \\\" + msg.payload.value.model + \\\" \\\" + 'out_' + msg._msgid;\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 230,                     \"y\": 360,                     \"wires\": [                         [                             \"48676e3bbd5ccbdd\"                         ]                     ]                 },                 {                     \"id\": \"c2a8ddbb8642a71c\",                     \"type\": \"comment\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Manual invocation section\",                     \"info\": \"\",                     \"x\": 130,                     \"y\": 580,                     \"wires\": []                 },                 {                     \"id\": \"91e8d9a937614015\",                     \"type\": \"file in\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"filename\": \"\",                     \"format\": \"utf8\",                     \"chunk\": false,                     \"sendError\": false,                     \"encoding\": \"none\",                     \"allProps\": false,                     \"x\": 380,                     \"y\": 460,                     \"wires\": [                         [                             \"25518d73172e8ecf\"                         ]                     ]                 },                 {                     \"id\": \"25518d73172e8ecf\",                     \"type\": \"json\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"property\": \"payload\",                     \"action\": \"\",                     \"pretty\": false,                     \"x\": 510,                     \"y\": 460,                     \"wires\": [                         [                             \"a929760723e0c2c5\"                         ]                     ]                 },                 {                     \"id\": \"a929760723e0c2c5\",                     \"type\": \"function\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"final\",                     \"func\": \"msg.result.predictions = msg.payload;\\nmsg.payload = {};\\nmsg.payload = msg.result;\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 630,                     \"y\": 460,                     \"wires\": [                         [                             \"a49f32e21f2ceea2\"                         ]                     ]                 },                 {                     \"id\": \"a49f32e21f2ceea2\",                     \"type\": \"file\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"filename\": \"\",                     \"appendNewline\": true,                     \"createDir\": false,                     \"overwriteFile\": \"delete\",                     \"encoding\": \"none\",                     \"x\": 750,                     \"y\": 460,                     \"wires\": [                         [                             \"5f46f2f372d50ec2\"                         ]                     ]                 },                 {                     \"id\": \"7cd54384e3001590\",                     \"type\": \"subflow:694cb784968dc0b9\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"value\": \"NoderedFunction\",                             \"type\": \"str\"                         }                     ],                     \"x\": 300,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"e0a44f9c057781b6\",                     \"type\": \"comment\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Annotations section\",                     \"info\": \"\",                     \"x\": 110,                     \"y\": 40,                     \"wires\": []                 },                 {                     \"id\": \"738be79c50ce5ea0\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"300000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 100,                     \"y\": 100,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"b286543636b19b47\",                     \"type\": \"comment\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Endpoints' definition section\",                     \"info\": \"\",                     \"x\": 140,                     \"y\": 220,                     \"wires\": []                 },                 {                     \"id\": \"b4e22c25249c9de1\",                     \"type\": \"http in\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 80,                     \"y\": 280,                     \"wires\": [                         [                             \"13d4f7c0acaa0a39\"                         ]                     ]                 },                 {                     \"id\": \"13d4f7c0acaa0a39\",                     \"type\": \"http response\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"x\": 380,                     \"y\": 280,                     \"wires\": []                 },                 {                     \"id\": \"2c2d1ebff6a7cc1b\",                     \"type\": \"json\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"property\": \"payload.value.input\",                     \"action\": \"\",                     \"pretty\": false,                     \"x\": 490,                     \"y\": 620,                     \"wires\": [                         [                             \"99c7424da4aad1d3\"                         ]                     ]                 },                 {                     \"id\": \"99c7424da4aad1d3\",                     \"type\": \"debug\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"Input data\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 660,                     \"y\": 620,                     \"wires\": []                 },                 {                     \"id\": \"2d64e8357aafa568\",                     \"type\": \"subflow:40ce9e05d2b123a0\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"gpu_enabled\",                             \"value\": \"true\",                             \"type\": \"str\"                         },                         {                             \"name\": \"architecture\",                             \"value\": \"x86_64\",                             \"type\": \"str\"                         }                     ],                     \"x\": 490,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"ec218f71071744ae\",                     \"type\": \"subflow:05f045b87080a61e\",                     \"z\": \"f4a0fb9518d4df8d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"locality\",                             \"value\": \"Cloud\",                             \"type\": \"str\"                         }                     ],                     \"x\": 690,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"6cf5b4224f0daa69\",                     \"type\": \"function\",                     \"z\": \"61834c2663a6ece6\",                     \"name\": \"create artificial msg.parts\",                     \"func\": \"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 330,                     \"y\": 120,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"61834c2663a6ece6\",                     \"type\": \"subflow\",                     \"name\": \"BranchJoin\",                     \"info\": \"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",                     \"category\": \"PHYSICS\",                     \"in\": [                         {                             \"x\": 140,                             \"y\": 120,                             \"wires\": [                                 {                                     \"id\": \"6cf5b4224f0daa69\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 520,                             \"y\": 120,                             \"wires\": [                                 {                                     \"id\": \"6cf5b4224f0daa69\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"totalcount\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Total Count\"                                 }                             }                         },                         {                             \"name\": \"position\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Position in sequence\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#FFF0F0\"                 },                 {                     \"id\": \"6cf5b4224f0daa69\",                     \"type\": \"function\",                     \"z\": \"61834c2663a6ece6\",                     \"name\": \"create artificial msg.parts\",                     \"func\": \"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 330,                     \"y\": 120,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"61834c2663a6ece6\",                     \"type\": \"subflow\",                     \"name\": \"BranchJoin\",                     \"info\": \"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",                     \"category\": \"PHYSICS\",                     \"in\": [                         {                             \"x\": 140,                             \"y\": 120,                             \"wires\": [                                 {                                     \"id\": \"6cf5b4224f0daa69\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 520,                             \"y\": 120,                             \"wires\": [                                 {                                     \"id\": \"6cf5b4224f0daa69\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"totalcount\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Total Count\"                                 }                             }                         },                         {                             \"name\": \"position\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Position in sequence\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#FFF0F0\"                 },                 {                     \"id\": \"82b665f654048ecf\",                     \"type\": \"function\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"\",                     \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 360,                     \"y\": 140,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"eeb5210da7efebd3\",                     \"type\": \"comment\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"Instructions\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"x\": 560,                     \"y\": 280,                     \"wires\": []                 },                 {                     \"id\": \"694cb784968dc0b9\",                     \"type\": \"subflow\",                     \"name\": \"Executor Mode\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"Service\"                                             },                                             \"v\": \"Service\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NoderedFunction\"                                             },                                             \"v\": \"NoderedFunction\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NativeSequence\"                                             },                                             \"v\": \"NativeSequence\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"font-awesome/fa-angle-right\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"170d11b5c7d5b61a\",                     \"type\": \"comment\",                     \"z\": \"40ce9e05d2b123a0\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 140,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"40ce9e05d2b123a0\",                     \"type\": \"subflow\",                     \"name\": \"architecture\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"gpu_enabled\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"true\"                                             },                                             \"v\": \"true\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"false\"                                             },                                             \"v\": \"false\"                                         }                                     ]                                 }                             }                         },                         {                             \"name\": \"architecture\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"x86_64\"                                             },                                             \"v\": \"x86_64\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"arm64\"                                             },                                             \"v\": \"arm64\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#87A980\",                     \"icon\": \"font-awesome/fa-object-group\"                 },                 {                     \"id\": \"30ee5c09f384361d\",                     \"type\": \"comment\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \",                     \"x\": 400,                     \"y\": 220,                     \"wires\": []                 },                 {                     \"id\": \"05f045b87080a61e\",                     \"type\": \"subflow\",                     \"name\": \"Locality(flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"locality\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"HPC\"                                             },                                             \"v\": \"HPC\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"Cloud\"                                             },                                             \"v\": \"Cloud\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"Edge\"                                             },                                             \"v\": \"Edge\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#D8BFD8\",                     \"icon\": \"font-awesome/fa-braille\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/ehealth:19\",             \"type\": \"image\"         }     ],     \"displayName\": \"\",     \"branchName\": \"ehealth\" }",
        "payloadType": "json",
        "x": 390,
        "y": 920,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "fb1d1c6728a2bc13",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "ORCHESTRATOR",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"flows\": [         {             \"flowID\": \"39ef55a8.55f96a\",             \"flowName\": \"HelloFunctionV2\",             \"flow\": [                 {                     \"id\": \"39ef55a8.55f96a\",                     \"type\": \"tab\",                     \"label\": \"HelloFunctionV2\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"f70d642d7d615561\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 160,                     \"wires\": [                         [                             \"a8ea37eb3bb8cf23\"                         ]                     ]                 },                 {                     \"id\": \"ee0278d90f6393a9\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 280,                     \"wires\": [                         [                             \"f52b7bec399e315a\"                         ]                     ]                 },                 {                     \"id\": \"a8ea37eb3bb8cf23\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 730,                     \"y\": 180,                     \"wires\": []                 },                 {                     \"id\": \"ab91c6c51decfbab\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 870,                     \"y\": 380,                     \"wires\": []                 },                 {                     \"id\": \"f52b7bec399e315a\",                     \"type\": \"function\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"hello world\",                     \"func\": \"console.log(msg.payload);\\nif ( Array.isArray(msg.payload.value.input)){\\n    console.log('Step 1');\\n    var names=msg.payload.value.input;\\n    console.log('Step 2');\\n    msg.payload={'response':'hello'};\\n    console.log('Step 3');\\n    for (i=0;i<names.length;i++){\\n        console.log('Step:'+i);\\n        msg.payload.response=msg.payload.response+' '+names[i].name;\\n    }\\n} else {\\n    msg.payload={'response':'hello '+msg.payload.value.name};    \\n}\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 670,                     \"y\": 280,                     \"wires\": [                         [                             \"ab91c6c51decfbab\"                         ]                     ]                 },                 {                     \"id\": \"47d1123d17b41031\",                     \"type\": \"comment\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"OW SKELETON with hello world function\",                     \"info\": \"\",                     \"x\": 440,                     \"y\": 360,                     \"wires\": []                 },                 {                     \"id\": \"129fabd43047059b\",                     \"type\": \"subflow:694cb784968dc0b9\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"value\": \"NoderedFunction\",                             \"type\": \"str\"                         }                     ],                     \"x\": 230,                     \"y\": 480,                     \"wires\": []                 },                 {                     \"id\": \"bba4b91d07643081\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"220000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 220,                     \"y\": 540,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"46230eca45760f58\",                     \"type\": \"subflow:f0b9b88b6dcb2ece\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"goal\",                             \"value\": \"performance\",                             \"type\": \"str\"                         }                     ],                     \"x\": 270,                     \"y\": 600,                     \"wires\": []                 },                 {                     \"id\": \"be87371dd5bad13a\",                     \"type\": \"subflow:94dffc86e4af9a58\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"importance\",                             \"value\": \"high\",                             \"type\": \"str\"                         }                     ],                     \"x\": 240,                     \"y\": 660,                     \"wires\": []                 },                 {                     \"id\": \"7ec29cdc3b1457ea\",                     \"type\": \"subflow:05f045b87080a61e\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"locality\",                             \"value\": \"azure\",                             \"type\": \"str\"                         }                     ],                     \"x\": 250,                     \"y\": 840,                     \"wires\": []                 },                 {                     \"id\": \"82b665f654048ecf\",                     \"type\": \"function\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"\",                     \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 360,                     \"y\": 140,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"eeb5210da7efebd3\",                     \"type\": \"comment\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"Instructions\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"x\": 560,                     \"y\": 280,                     \"wires\": []                 },                 {                     \"id\": \"694cb784968dc0b9\",                     \"type\": \"subflow\",                     \"name\": \"Executor Mode\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"Service\"                                             },                                             \"v\": \"Service\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NoderedFunction\"                                             },                                             \"v\": \"NoderedFunction\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NativeSequence\"                                             },                                             \"v\": \"NativeSequence\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"font-awesome/fa-angle-right\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"ef33a2b7c53c600f\",                     \"type\": \"comment\",                     \"z\": \"f0b9b88b6dcb2ece\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 200,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"f0b9b88b6dcb2ece\",                     \"type\": \"subflow\",                     \"name\": \"Optimization Goal (Flow Level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"goal\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"performance\"                                             },                                             \"v\": \"performance\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"energy\"                                             },                                             \"v\": \"energy\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"availability\"                                             },                                             \"v\": \"availability\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#FFAAAA\",                     \"icon\": \"font-awesome/fa-sliders\"                 },                 {                     \"id\": \"1896904e3b2cf282\",                     \"type\": \"comment\",                     \"z\": \"94dffc86e4af9a58\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level what is the importance of the flow (to be taken under consideration in the scheduling aspects of PHYSICS)\",                     \"x\": 400,                     \"y\": 160,                     \"wires\": []                 },                 {                     \"id\": \"94dffc86e4af9a58\",                     \"type\": \"subflow\",                     \"name\": \"Importance (Flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"importance\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"high\"                                             },                                             \"v\": \"high\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"medium\"                                             },                                             \"v\": \"medium\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"low\"                                             },                                             \"v\": \"low\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#3FADB5\",                     \"icon\": \"node-red/alert.svg\"                 },                 {                     \"id\": \"30ee5c09f384361d\",                     \"type\": \"comment\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name.\\n\\nThe new clusters need to be retrieved from an external location and put in the msg.newClusters field as an array:\\n[\\n    \\\"aws\\\",\\n    \\\"edgeA\\\",\\n    \\\"edgeB\\\",\\n    \\\"azure\\\"\\n]\\n\\nThen all current flows are retrieved and the subflow definition of Locality is updated with the new options. Following, the flows are reposted to Node-RED. Be sure to check the merge afterwards, in case someone else has changed the flows in the meantime.\\n\\nThere is no API at the subflow level at the moment:\\nhttps://discourse.nodered.org/t/api-for-subflows/20325/2\\n\\nPENDING: WE CAN ADD THE RETRIEVAL PART OF THE NEW CLUSTER LIST INSIDE THE SUBFLOW IF WE ALSO ADD PARAMETERS IN THE UI REGARDING THE ENDPOINT FROM WHICH TO RETRIEVE THE LIST\",                     \"x\": 400,                     \"y\": 220,                     \"wires\": []                 },                 {                     \"id\": \"55a2a753e271d52e\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"SUBFLOW FORMAT\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\", \\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"[     {         \\\"id\\\": \\\"05f045b87080a61e\\\",         \\\"type\\\": \\\"subflow\\\",         \\\"name\\\": \\\"Locality(flow level)\\\",         \\\"info\\\": \\\"\\\",         \\\"category\\\": \\\"PHYSICS Annotators\\\",         \\\"in\\\": [],         \\\"out\\\": [],         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"type\\\": \\\"str\\\",                 \\\"value\\\": \\\"\\\",                 \\\"ui\\\": {                     \\\"type\\\": \\\"select\\\",                     \\\"opts\\\": {                         \\\"opts\\\": [                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"aws\\\"                                 },                                 \\\"v\\\": \\\"aws\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"azure\\\"                                 },                                 \\\"v\\\": \\\"azure\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"edge\\\"                                 },                                 \\\"v\\\": \\\"edge\\\"                             }                         ]                     }                 }             }         ],         \\\"meta\\\": {},         \\\"color\\\": \\\"#D8BFD8\\\",         \\\"icon\\\": \\\"font-awesome/fa-braille\\\"     },     {         \\\"id\\\": \\\"30ee5c09f384361d\\\",         \\\"type\\\": \\\"comment\\\",         \\\"z\\\": \\\"05f045b87080a61e\\\",         \\\"name\\\": \\\"README\\\",         \\\"info\\\": \\\"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \\\",         \\\"x\\\": 400,         \\\"y\\\": 220,         \\\"wires\\\": []     },     {         \\\"id\\\": \\\"7ec29cdc3b1457ea\\\",         \\\"type\\\": \\\"subflow:05f045b87080a61e\\\",         \\\"z\\\": \\\"f8346d4a3a5cf215\\\",         \\\"name\\\": \\\"\\\",         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"value\\\": \\\"azure\\\",                 \\\"type\\\": \\\"str\\\"             }         ],         \\\"x\\\": 550,         \\\"y\\\": 300,         \\\"wires\\\": []     } ]\",                     \"payloadType\": \"json\",                     \"x\": 390,                     \"y\": 340,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"0e0216a1434ea57a\",                     \"type\": \"function\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"UPDATE CLUSTERS\",                     \"func\": \"msg.headers={};\\nvar changedNodes=[];\\nfor (i=0;i<msg.payload.length;i++){\\n    if ((msg.payload[i].type==\\\"subflow\\\")&&(msg.payload[i].name==\\\"Locality(flow level)\\\")){\\n        msg.payload[i].env[0].ui.opts.opts=[];\\n        var k=0;\\n        for (k=0;k<msg.newClusters.length;k++){\\n            var opt={\\\"l\\\":{\\\"en-US\\\":\\\"\\\"},\\\"v\\\":\\\"\\\"};\\n            opt.l[\\\"en-US\\\"]=msg.newClusters[k];\\n            opt.v=msg.newClusters[k];\\n            console.log(\\\"K:\\\",k);\\n            console.log(\\\"Opt:\\\",opt);\\n            msg.payload[i].env[0].ui.opts.opts[k]=opt;\\n            console.log(\\\"Array:\\\",msg.payload[i].env[0].ui.opts.opts);\\n        }\\n        changedNodes.push(msg.payload[i]);\\n    }\\n}\\nmsg.changedNodes=changedNodes;\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 460,                     \"y\": 420,                     \"wires\": [                         [                             \"e1deff3989857115\"                         ]                     ]                 },                 {                     \"id\": \"0607edf39bc4fcdd\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"newClusters test\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\",\\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"\",                     \"payloadType\": \"date\",                     \"x\": 160,                     \"y\": 500,                     \"wires\": [                         [                             \"2dfd6d65fe6d1982\"                         ]                     ]                 },                 {                     \"id\": \"2dfd6d65fe6d1982\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"GET FLOWS\",                     \"method\": \"GET\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 230,                     \"y\": 420,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"e1deff3989857115\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"POST FLOW\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 670,                     \"y\": 420,                     \"wires\": [                         [                             \"fd2b4eee698cdcc4\"                         ]                     ]                 },                 {                     \"id\": \"fd2b4eee698cdcc4\",                     \"type\": \"debug\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 810,                     \"y\": 420,                     \"wires\": []                 },                 {                     \"id\": \"05f045b87080a61e\",                     \"type\": \"subflow\",                     \"name\": \"Locality(flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 80,                             \"y\": 420,                             \"wires\": [                                 {                                     \"id\": \"2dfd6d65fe6d1982\"                                 }                             ]                         }                     ],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"locality\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"aws\"                                             },                                             \"v\": \"aws\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeA\"                                             },                                             \"v\": \"edgeA\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeB\"                                             },                                             \"v\": \"edgeB\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"azure\"                                             },                                             \"v\": \"azure\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"hua\"                                             },                                             \"v\": \"hua\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#D8BFD8\",                     \"icon\": \"font-awesome/fa-braille\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:199\",             \"type\": \"image\"         },         {             \"flowID\": \"a714de618203e22e\",             \"flowName\": \"orchestrator\",             \"flow\": [                 {                     \"id\": \"a714de618203e22e\",                     \"type\": \"tab\",                     \"label\": \"orchestrator\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"ad0beb0a878c622a\",                     \"type\": \"subflow:3352c7dddc9aad6d\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"call HelloFunctionV2\",                     \"env\": [                         {                             \"name\": \"dynamicActionName\",                             \"value\": \"HelloFunctionV2_george\",                             \"type\": \"str\"                         },                         {                             \"name\": \"actionName\",                             \"value\": \"HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json\",                             \"type\": \"str\"                         },                         {                             \"name\": \"token\",                             \"type\": \"cred\"                         }                     ],                     \"x\": 340,                     \"y\": 240,                     \"wires\": [                         [                             \"d759376bc9171438\"                         ]                     ]                 },                 {                     \"id\": \"bf09047153273cf2\",                     \"type\": \"http in\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 100,                     \"y\": 140,                     \"wires\": [                         [                             \"45437512996b2c7a\"                         ]                     ]                 },                 {                     \"id\": \"45437512996b2c7a\",                     \"type\": \"http response\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"x\": 530,                     \"y\": 140,                     \"wires\": []                 },                 {                     \"id\": \"d759376bc9171438\",                     \"type\": \"http response\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"statusCode\": \"\",                     \"headers\": {},                     \"x\": 650,                     \"y\": 240,                     \"wires\": []                 },                 {                     \"id\": \"fbf1b0d24c05f997\",                     \"type\": \"inject\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"TEST_DELETECREDS BEFOREPUBLIC\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"topic\",                             \"vt\": \"str\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"{\\\"value\\\":{\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_HOST\\\":\\\"https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/\\\",\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_NAMESPACE\\\":\\\"guest\\\",\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_CREDS\\\":\\\"17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF\\\",\\\"name\\\":\\\"george\\\"}}\",                     \"payloadType\": \"json\",                     \"x\": 220,                     \"y\": 580,                     \"wires\": [                         [                             \"73608b4ce219374a\"                         ]                     ]                 },                 {                     \"id\": \"73608b4ce219374a\",                     \"type\": \"http request\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"http://localhost:1880/run\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 490,                     \"y\": 580,                     \"wires\": [                         [                             \"8c2df5bff072d0f7\"                         ]                     ]                 },                 {                     \"id\": \"8c2df5bff072d0f7\",                     \"type\": \"debug\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"false\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 710,                     \"y\": 580,                     \"wires\": []                 },                 {                     \"id\": \"311e4be150c63a56\",                     \"type\": \"http in\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 100,                     \"y\": 240,                     \"wires\": [                         [                             \"ad0beb0a878c622a\"                         ]                     ]                 },                 {                     \"id\": \"a0e2929e2897b0cd\",                     \"type\": \"subflow:789351ac.02c9d\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"value\": \"20\",                             \"type\": \"str\"                         },                         {                             \"name\": \"pollPeriod\",                             \"value\": \"3000\",                             \"type\": \"num\"                         },                         {                             \"name\": \"method\",                             \"value\": \"GET\",                             \"type\": \"str\"                         },                         {                             \"name\": \"functionChain\",                             \"value\": \"false\",                             \"type\": \"bool\"                         }                     ],                     \"x\": 270,                     \"y\": 440,                     \"wires\": [                         [],                         [],                         []                     ]                 },                 {                     \"id\": \"60aae624d21f2cf1\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"300000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 140,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"0a47269f76b1f09b\",                     \"type\": \"subflow:2f92914d720ab974\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"averageWaitTime\",                             \"value\": \"200\",                             \"type\": \"num\"                         }                     ],                     \"x\": 350,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"a80b2fa1299e3bb8\",                     \"type\": \"tls-config\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"cert\": \"\",                     \"key\": \"\",                     \"ca\": \"\",                     \"certname\": \"\",                     \"keyname\": \"\",                     \"caname\": \"\",                     \"servername\": \"\",                     \"verifyservercert\": false,                     \"alpnprotocol\": \"\"                 },                 {                     \"id\": \"b9c86339cffd54ea\",                     \"type\": \"http request\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"\",                     \"tls\": \"a80b2fa1299e3bb8\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 370,                     \"y\": 180,                     \"wires\": [                         [                             \"27c3b0af40ccb4e0\"                         ]                     ]                 },                 {                     \"id\": \"60d351e91c4f1f19\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"create dynamic\",                     \"func\": \"//msg.headers={};\\n\\n\\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\\nconst prophost='__'+env.get('actionName')+'_HOST';\\nconst propcreds='__'+env.get('actionName')+'_CREDS';\\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\\n\\n//retrieve from incoming msg params\\nmsg.namespace=msg.payload.value[propnamespace];\\nmsg.creds=msg.payload.value[propcreds];\\nmsg.baseurl=msg.payload.value[prophost];\\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\\n\\n//delete info so that it does not leak into the newly called function, we dont know how the payload \\n//is going to be used after that\\n\\ndelete msg.payload.value[propcreds];\\ndelete msg.payload.value[propnamespace];\\ndelete msg.payload.value[prophost]\\n\\n\\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \\n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\\nvar input=msg.payload.value;\\nmsg.payload={};\\nmsg.payload=input;\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 200,                     \"y\": 180,                     \"wires\": [                         [                             \"b9c86339cffd54ea\"                         ]                     ]                 },                 {                     \"id\": \"27c3b0af40ccb4e0\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"add activation id\",                     \"func\": \"\\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\\n//msg.oldheaders=msg.headers;\\n//msg.headers={};\\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 540,                     \"y\": 180,                     \"wires\": [                         [                             \"5e15f34e1caa9fe7\"                         ]                     ]                 },                 {                     \"id\": \"5e15f34e1caa9fe7\",                     \"type\": \"subflow:789351ac.02c9d\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"value\": \"20\",                             \"type\": \"str\"                         },                         {                             \"name\": \"pollPeriod\",                             \"value\": \"3000\",                             \"type\": \"num\"                         },                         {                             \"name\": \"method\",                             \"value\": \"GET\",                             \"type\": \"str\"                         },                         {                             \"name\": \"functionChain\",                             \"value\": \"false\",                             \"type\": \"bool\"                         }                     ],                     \"x\": 610,                     \"y\": 260,                     \"wires\": [                         [                             \"b84a3ec8968b0617\",                             \"47a494805843dcd7\"                         ],                         [],                         []                     ]                 },                 {                     \"id\": \"b84a3ec8968b0617\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"reduce output\",                     \"func\": \"//msg.headers={};\\nvar response=msg.payload.response;\\nmsg.payload={};\\nmsg.payload.response=response;\\n\\nreturn msg;\\n//return msg.oldmsg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 840,                     \"y\": 280,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"47a494805843dcd7\",                     \"type\": \"debug\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"false\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 610,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"3352c7dddc9aad6d\",                     \"type\": \"subflow\",                     \"name\": \"Dynamic OW action\",                     \"info\": \"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\\n\\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\\n\\n\\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\\n$ACTIONNAME_OW_CREDS=user:pwd\\n\\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\\n\\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\\n\\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\\na typical nodered environment. However the retrieved information from the environment variables prevail\\nover the set ones in the UI.\\n\\nPENDING: check how to pass token from UI to http request node\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 80,                             \"y\": 180,                             \"wires\": [                                 {                                     \"id\": \"60d351e91c4f1f19\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 980,                             \"y\": 280,                             \"wires\": [                                 {                                     \"id\": \"b84a3ec8968b0617\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"dynamicActionName\",                             \"type\": \"str\",                             \"value\": \"dockeraction\"                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"node-red/function.svg\"                 },                 {                     \"id\": \"2934f390.711324\",                     \"type\": \"tls-config\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"\",                     \"cert\": \"\",                     \"key\": \"\",                     \"ca\": \"\",                     \"certname\": \"\",                     \"keyname\": \"\",                     \"caname\": \"\",                     \"servername\": \"\",                     \"verifyservercert\": false,                     \"alpnprotocol\": \"\"                 },                 {                     \"id\": \"7d194c10.33b51c\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"defaults+activation id\",                     \"func\": \"\\nif (msg.hasOwnProperty('maxAttempts')){\\n    msg.iterations=msg.maxAttempts;\\n} else {\\n    msg.iterations=env.get('maxAttempts');\\n}\\n//needed to reset the iterations after function chaining\\nmsg.defaultAttempts=msg.iterations;\\n\\nif (msg.hasOwnProperty('pollPeriod')){\\n    \\n} else {\\n    msg.pollPeriod=env.get('pollPeriod');\\n}\\n\\nif (msg.hasOwnProperty('method')){\\n    \\n} else {\\n    msg.method=env.get('method');\\n}\\n\\nif (msg.hasOwnProperty('url')){\\n    \\n} else {\\n    msg.url=env.get('url');\\n}\\n\\nif (msg.hasOwnProperty('retryCode')){\\n    \\n} else {\\n    msg.retryCode=env.get('retryCode');\\n}\\n\\nif (msg.hasOwnProperty('acceptCode')){\\n    \\n} else {\\n    msg.acceptCode=env.get('acceptCode');\\n}\\n\\nif (msg.hasOwnProperty('creds')){\\n    \\n} else {\\n    msg.creds=env.get('creds');\\n}\\n\\nif (msg.hasOwnProperty('functionChain')){\\n    \\n} else {\\n    msg.functionChain=env.get('functionChain');\\n}\\n\\nif (msg.hasOwnProperty('inputData')){\\n    if (msg.inputData.hasOwnProperty('creds')){\\n        msg.creds=msg.inputData.creds;\\n    }\\n}\\n\\n\\n\\nmsg.delay=msg.pollPeriod;\\nmsg.start=Date.now();\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 200,                     \"y\": 160,                     \"wires\": [                         [                             \"cad17b04.a2b4d8\"                         ]                     ]                 },                 {                     \"id\": \"4be3f205.3e8dc4\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"iterations--\",                     \"func\": \"msg.iterations=msg.iterations-1;\\n/*\\nif (flow.get('stop')==true){\\n    msg.iterations=-1;\\n}*/\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 350,                     \"y\": 300,                     \"wires\": [                         [                             \"c2cf68b7.263d4\"                         ]                     ]                 },                 {                     \"id\": \"c2cf68b7.263d4\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"if iterations finished\",                     \"property\": \"iterations\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"gte\",                             \"v\": \"1\",                             \"vt\": \"num\"                         },                         {                             \"t\": \"lt\",                             \"v\": \"1\",                             \"vt\": \"num\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 550,                     \"y\": 300,                     \"wires\": [                         [                             \"cad17b04.a2b4d8\"                         ],                         []                     ]                 },                 {                     \"id\": \"76299695.812bd8\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"SUCCESS\",                     \"info\": \"\",                     \"x\": 1100,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"48093072.b17a6\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"FINAL FAIL\",                     \"info\": \"\",                     \"x\": 890,                     \"y\": 360,                     \"wires\": []                 },                 {                     \"id\": \"d5960f2f.2e9448\",                     \"type\": \"delay\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"delay\",                     \"pauseType\": \"delayv\",                     \"timeout\": \"5\",                     \"timeoutUnits\": \"seconds\",                     \"rate\": \"1\",                     \"nbRateUnits\": \"1\",                     \"rateUnits\": \"second\",                     \"randomFirst\": \"1\",                     \"randomLast\": \"5\",                     \"randomUnits\": \"seconds\",                     \"drop\": false,                     \"outputs\": 1,                     \"x\": 170,                     \"y\": 300,                     \"wires\": [                         [                             \"4be3f205.3e8dc4\"                         ]                     ]                 },                 {                     \"id\": \"471b3d64.265894\",                     \"type\": \"http request\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"\",                     \"method\": \"use\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"\",                     \"tls\": \"2934f390.711324\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 590,                     \"y\": 160,                     \"wires\": [                         [                             \"8694180b.ec1c68\"                         ]                     ]                 },                 {                     \"id\": \"8694180b.ec1c68\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"Status code check\",                     \"property\": \"statusCode\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"lte\",                             \"v\": \"acceptCode\",                             \"vt\": \"msg\"                         },                         {                             \"t\": \"gte\",                             \"v\": \"retryCode\",                             \"vt\": \"msg\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 810,                     \"y\": 160,                     \"wires\": [                         [                             \"f9d0aba7.72382\"                         ],                         [                             \"d5960f2f.2e9448\"                         ]                     ]                 },                 {                     \"id\": \"ef03414f.ad9d78\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"RETRY FAIL\",                     \"info\": \"\",                     \"x\": 890,                     \"y\": 260,                     \"wires\": []                 },                 {                     \"id\": \"66bbc0cf.0c62f\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"BEFORE AUTH\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"x\": 370,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"13791c2d.8cea7c\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"URL\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"url\",                     \"targetType\": \"msg\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 580,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"cad17b04.a2b4d8\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"add auth\",                     \"func\": \"msg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\nmsg.method='GET';\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 420,                     \"y\": 160,                     \"wires\": [                         [                             \"471b3d64.265894\"                         ]                     ]                 },                 {                     \"id\": \"f2b7c4e4.a24c3\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"adapt to new activation\",                     \"func\": \"\\n\\nmsg.url=msg.payload.response.result.newActivationIDURL;\\nmsg.iterations=msg.defaultAttempts+1;\\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 1500,                     \"y\": 160,                     \"wires\": [                         [                             \"d5960f2f.2e9448\",                             \"ee1dbf44.7368f8\"                         ]                     ]                 },                 {                     \"id\": \"c338e47b.b00ed\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"FUNCTION CHAIN CONTINUATION\",                     \"info\": \"\",                     \"x\": 1240,                     \"y\": 240,                     \"wires\": []                 },                 {                     \"id\": \"ee1dbf44.7368f8\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"AFTER CONTINUATION IN Poll2Push\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 1420,                     \"y\": 300,                     \"wires\": []                 },                 {                     \"id\": \"f9d0aba7.72382\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"is Chain\",                     \"property\": \"functionChain\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"false\"                         },                         {                             \"t\": \"true\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 1020,                     \"y\": 160,                     \"wires\": [                         [],                         [                             \"6da1eea0.969368\",                             \"1bbc6fa0.4879c\"                         ]                     ]                 },                 {                     \"id\": \"6da1eea0.969368\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"RESULT STATUS\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1100,                     \"y\": 300,                     \"wires\": []                 },                 {                     \"id\": \"f20a68d.9711598\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"AFTER CODE CHECK\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"functionChain\",                     \"targetType\": \"msg\",                     \"x\": 890,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"36905e62.dfad92\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP1\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1120,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"9610a737.bf275\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP2\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1300,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"c52af08f.756ee8\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP3\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1600,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"1bbc6fa0.4879c\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"compare completion\",                     \"func\": \"console.log('IN COMPARE COMPLETION',msg.payload.response);\\nif (msg.payload.response.result.status==='Completed'){\\n    return [msg,null];\\n} else {\\n    return [null,msg];\\n}\\n\",                     \"outputs\": 2,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 1240,                     \"y\": 160,                     \"wires\": [                         [                             \"c52af08f.756ee8\"                         ],                         [                             \"f2b7c4e4.a24c3\"                         ]                     ]                 },                 {                     \"id\": \"d8305759.866988\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"URL\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"iterations\",                     \"targetType\": \"msg\",                     \"x\": 500,                     \"y\": 380,                     \"wires\": []                 },                 {                     \"id\": \"789351ac.02c9d\",                     \"type\": \"subflow\",                     \"name\": \"PollTOPushConverterFC\",                     \"info\": \"This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\\n\\nThe according function should return as a response the following structure:\\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \\n\\nThe node also can get credentials from the msg.creds field of the input message.\\n\\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\\n\\nThe node has three outputs:\\n - Output 1 indicates successful finalization of the API call\\n - Output 2 indicates intermediate failure and was added to return the reason for failure\\n - Output 3 indicates final failure after max attempts\\n\\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\\n\\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\\n\\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\\n\\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\\n \\n\",                     \"category\": \"PHYSICS Helpers\",                     \"in\": [                         {                             \"x\": 60,                             \"y\": 160,                             \"wires\": [                                 {                                     \"id\": \"7d194c10.33b51c\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 1380,                             \"y\": 40,                             \"wires\": [                                 {                                     \"id\": \"f9d0aba7.72382\",                                     \"port\": 0                                 },                                 {                                     \"id\": \"1bbc6fa0.4879c\",                                     \"port\": 0                                 }                             ]                         },                         {                             \"x\": 780,                             \"y\": 260,                             \"wires\": [                                 {                                     \"id\": \"c2cf68b7.263d4\",                                     \"port\": 0                                 }                             ]                         },                         {                             \"x\": 780,                             \"y\": 360,                             \"wires\": [                                 {                                     \"id\": \"c2cf68b7.263d4\",                                     \"port\": 1                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"type\": \"str\",                             \"value\": \"3\"                         },                         {                             \"name\": \"pollPeriod\",                             \"type\": \"str\",                             \"value\": \"3000\"                         },                         {                             \"name\": \"method\",                             \"type\": \"str\",                             \"value\": \"\"                         },                         {                             \"name\": \"url\",                             \"type\": \"str\",                             \"value\": \"http://10.100.59.182:3233/api/v1/namespaces/_/activations/\"                         },                         {                             \"name\": \"retryCode\",                             \"type\": \"num\",                             \"value\": \"202\"                         },                         {                             \"name\": \"acceptCode\",                             \"type\": \"num\",                             \"value\": \"200\"                         },                         {                             \"name\": \"functionChain\",                             \"type\": \"bool\",                             \"value\": \"true\"                         }                     ],                     \"meta\": {},                     \"color\": \"#b4e8a9\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"b87db5bf54ee1249\",                     \"type\": \"comment\",                     \"z\": \"2f92914d720ab974\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 190,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"2f92914d720ab974\",                     \"type\": \"subflow\",                     \"name\": \"QoS Requirements\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"averageDuration\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"averageInitTime\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"averageWaitTime\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"windowOfTime\",                             \"type\": \"str\",                             \"value\": \"\"                         }                     ],                     \"meta\": {},                     \"color\": \"#FDF0C2\",                     \"icon\": \"font-awesome/fa-align-left\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:200\",             \"type\": \"image\"         }     ],     \"displayName\": \"p2app\",     \"branchName\": \"george\" }",
        "payloadType": "json",
        "x": 410,
        "y": 980,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "85a5c6cd5f74b3dc",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "CUSTOM IMAGE TEST",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"flows\": [         {             \"flowID\": \"39ef55a8.55f96a\",             \"flowName\": \"HelloFunctionV2\",             \"flow\": [                 {                     \"id\": \"39ef55a8.55f96a\",                     \"type\": \"tab\",                     \"label\": \"HelloFunctionV2\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"f70d642d7d615561\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 180,                     \"wires\": [                         [                             \"a8ea37eb3bb8cf23\"                         ]                     ]                 },                 {                     \"id\": \"ee0278d90f6393a9\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 280,                     \"wires\": [                         [                             \"f52b7bec399e315a\"                         ]                     ]                 },                 {                     \"id\": \"a8ea37eb3bb8cf23\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 730,                     \"y\": 180,                     \"wires\": []                 },                 {                     \"id\": \"ab91c6c51decfbab\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 870,                     \"y\": 380,                     \"wires\": []                 },                 {                     \"id\": \"f52b7bec399e315a\",                     \"type\": \"function\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"hello world\",                     \"func\": \"console.log(msg.payload);\\nif ( Array.isArray(msg.payload.value.input)){\\n    console.log('Step 1');\\n    var names=msg.payload.value.input;\\n    console.log('Step 2');\\n    msg.payload={'response':'hello'};\\n    console.log('Step 3');\\n    for (i=0;i<names.length;i++){\\n        console.log('Step:'+i);\\n        msg.payload.response=msg.payload.response+' '+names[i].name;\\n    }\\n} else {\\n    msg.payload={'response':'hello '+msg.payload.value.name};    \\n}\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 670,                     \"y\": 280,                     \"wires\": [                         [                             \"ab91c6c51decfbab\"                         ]                     ]                 },                 {                     \"id\": \"47d1123d17b41031\",                     \"type\": \"comment\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"OW SKELETON with hello world function\",                     \"info\": \"\",                     \"x\": 440,                     \"y\": 360,                     \"wires\": []                 },                 {                     \"id\": \"129fabd43047059b\",                     \"type\": \"subflow:694cb784968dc0b9\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"value\": \"NoderedFunction\",                             \"type\": \"str\"                         }                     ],                     \"x\": 230,                     \"y\": 480,                     \"wires\": []                 },                 {                     \"id\": \"bba4b91d07643081\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"220000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 220,                     \"y\": 540,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"46230eca45760f58\",                     \"type\": \"subflow:f0b9b88b6dcb2ece\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"goal\",                             \"value\": \"energy\",                             \"type\": \"str\"                         }                     ],                     \"x\": 270,                     \"y\": 600,                     \"wires\": []                 },                 {                     \"id\": \"be87371dd5bad13a\",                     \"type\": \"subflow:94dffc86e4af9a58\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"importance\",                             \"value\": \"high\",                             \"type\": \"str\"                         }                     ],                     \"x\": 240,                     \"y\": 660,                     \"wires\": []                 },                 {                     \"id\": \"7ec29cdc3b1457ea\",                     \"type\": \"subflow:05f045b87080a61e\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"locality\",                             \"value\": \"aws\",                             \"type\": \"str\"                         }                     ],                     \"x\": 250,                     \"y\": 840,                     \"wires\": []                 },                 {                     \"id\": \"82b665f654048ecf\",                     \"type\": \"function\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"\",                     \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 360,                     \"y\": 140,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"eeb5210da7efebd3\",                     \"type\": \"comment\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"Instructions\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"x\": 560,                     \"y\": 280,                     \"wires\": []                 },                 {                     \"id\": \"694cb784968dc0b9\",                     \"type\": \"subflow\",                     \"name\": \"Executor Mode\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"Service\"                                             },                                             \"v\": \"Service\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NoderedFunction\"                                             },                                             \"v\": \"NoderedFunction\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NativeSequence\"                                             },                                             \"v\": \"NativeSequence\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"font-awesome/fa-angle-right\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"ef33a2b7c53c600f\",                     \"type\": \"comment\",                     \"z\": \"f0b9b88b6dcb2ece\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 200,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"f0b9b88b6dcb2ece\",                     \"type\": \"subflow\",                     \"name\": \"Optimization Goal (Flow Level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"goal\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"performance\"                                             },                                             \"v\": \"performance\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"energy\"                                             },                                             \"v\": \"energy\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"availability\"                                             },                                             \"v\": \"availability\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#FFAAAA\",                     \"icon\": \"font-awesome/fa-sliders\"                 },                 {                     \"id\": \"1896904e3b2cf282\",                     \"type\": \"comment\",                     \"z\": \"94dffc86e4af9a58\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level what is the importance of the flow (to be taken under consideration in the scheduling aspects of PHYSICS)\",                     \"x\": 400,                     \"y\": 160,                     \"wires\": []                 },                 {                     \"id\": \"94dffc86e4af9a58\",                     \"type\": \"subflow\",                     \"name\": \"Importance (Flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"importance\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"high\"                                             },                                             \"v\": \"high\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"medium\"                                             },                                             \"v\": \"medium\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"low\"                                             },                                             \"v\": \"low\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#3FADB5\",                     \"icon\": \"node-red/alert.svg\"                 },                 {                     \"id\": \"30ee5c09f384361d\",                     \"type\": \"comment\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name.\\n\\nThe new clusters need to be retrieved from an external location and put in the msg.newClusters field as an array:\\n[\\n    \\\"aws\\\",\\n    \\\"edgeA\\\",\\n    \\\"edgeB\\\",\\n    \\\"azure\\\"\\n]\\n\\nThen all current flows are retrieved and the subflow definition of Locality is updated with the new options. Following, the flows are reposted to Node-RED. Be sure to check the merge afterwards, in case someone else has changed the flows in the meantime.\\n\\nThere is no API at the subflow level at the moment:\\nhttps://discourse.nodered.org/t/api-for-subflows/20325/2\\n\\nPENDING: WE CAN ADD THE RETRIEVAL PART OF THE NEW CLUSTER LIST INSIDE THE SUBFLOW IF WE ALSO ADD PARAMETERS IN THE UI REGARDING THE ENDPOINT FROM WHICH TO RETRIEVE THE LIST\",                     \"x\": 400,                     \"y\": 220,                     \"wires\": []                 },                 {                     \"id\": \"55a2a753e271d52e\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"SUBFLOW FORMAT\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\", \\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"[     {         \\\"id\\\": \\\"05f045b87080a61e\\\",         \\\"type\\\": \\\"subflow\\\",         \\\"name\\\": \\\"Locality(flow level)\\\",         \\\"info\\\": \\\"\\\",         \\\"category\\\": \\\"PHYSICS Annotators\\\",         \\\"in\\\": [],         \\\"out\\\": [],         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"type\\\": \\\"str\\\",                 \\\"value\\\": \\\"\\\",                 \\\"ui\\\": {                     \\\"type\\\": \\\"select\\\",                     \\\"opts\\\": {                         \\\"opts\\\": [                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"aws\\\"                                 },                                 \\\"v\\\": \\\"aws\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"azure\\\"                                 },                                 \\\"v\\\": \\\"azure\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"edge\\\"                                 },                                 \\\"v\\\": \\\"edge\\\"                             }                         ]                     }                 }             }         ],         \\\"meta\\\": {},         \\\"color\\\": \\\"#D8BFD8\\\",         \\\"icon\\\": \\\"font-awesome/fa-braille\\\"     },     {         \\\"id\\\": \\\"30ee5c09f384361d\\\",         \\\"type\\\": \\\"comment\\\",         \\\"z\\\": \\\"05f045b87080a61e\\\",         \\\"name\\\": \\\"README\\\",         \\\"info\\\": \\\"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \\\",         \\\"x\\\": 400,         \\\"y\\\": 220,         \\\"wires\\\": []     },     {         \\\"id\\\": \\\"7ec29cdc3b1457ea\\\",         \\\"type\\\": \\\"subflow:05f045b87080a61e\\\",         \\\"z\\\": \\\"f8346d4a3a5cf215\\\",         \\\"name\\\": \\\"\\\",         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"value\\\": \\\"aws\\\",                 \\\"type\\\": \\\"str\\\"             }         ],         \\\"x\\\": 550,         \\\"y\\\": 300,         \\\"wires\\\": []     } ]\",                     \"payloadType\": \"json\",                     \"x\": 390,                     \"y\": 340,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"0e0216a1434ea57a\",                     \"type\": \"function\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"UPDATE CLUSTERS\",                     \"func\": \"msg.headers={};\\nvar changedNodes=[];\\nfor (i=0;i<msg.payload.length;i++){\\n    if ((msg.payload[i].type==\\\"subflow\\\")&&(msg.payload[i].name==\\\"Locality(flow level)\\\")){\\n        msg.payload[i].env[0].ui.opts.opts=[];\\n        var k=0;\\n        for (k=0;k<msg.newClusters.length;k++){\\n            var opt={\\\"l\\\":{\\\"en-US\\\":\\\"\\\"},\\\"v\\\":\\\"\\\"};\\n            opt.l[\\\"en-US\\\"]=msg.newClusters[k];\\n            opt.v=msg.newClusters[k];\\n            console.log(\\\"K:\\\",k);\\n            console.log(\\\"Opt:\\\",opt);\\n            msg.payload[i].env[0].ui.opts.opts[k]=opt;\\n            console.log(\\\"Array:\\\",msg.payload[i].env[0].ui.opts.opts);\\n        }\\n        changedNodes.push(msg.payload[i]);\\n    }\\n}\\nmsg.changedNodes=changedNodes;\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 460,                     \"y\": 420,                     \"wires\": [                         [                             \"e1deff3989857115\"                         ]                     ]                 },                 {                     \"id\": \"0607edf39bc4fcdd\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"newClusters test\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\",\\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"\",                     \"payloadType\": \"date\",                     \"x\": 160,                     \"y\": 500,                     \"wires\": [                         [                             \"2dfd6d65fe6d1982\"                         ]                     ]                 },                 {                     \"id\": \"2dfd6d65fe6d1982\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"GET FLOWS\",                     \"method\": \"GET\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 230,                     \"y\": 420,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"e1deff3989857115\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"POST FLOW\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 670,                     \"y\": 420,                     \"wires\": [                         [                             \"fd2b4eee698cdcc4\"                         ]                     ]                 },                 {                     \"id\": \"fd2b4eee698cdcc4\",                     \"type\": \"debug\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 810,                     \"y\": 420,                     \"wires\": []                 },                 {                     \"id\": \"05f045b87080a61e\",                     \"type\": \"subflow\",                     \"name\": \"Locality(flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 80,                             \"y\": 420,                             \"wires\": [                                 {                                     \"id\": \"2dfd6d65fe6d1982\"                                 }                             ]                         }                     ],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"locality\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"aws\"                                             },                                             \"v\": \"aws\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeA\"                                             },                                             \"v\": \"edgeA\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeB\"                                             },                                             \"v\": \"edgeB\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"azure\"                                             },                                             \"v\": \"azure\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"hua\"                                             },                                             \"v\": \"hua\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#D8BFD8\",                     \"icon\": \"font-awesome/fa-braille\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:194\",             \"type\": \"image\"         },         {             \"flowID\": \"dd9fae6b6942b547\",             \"flowName\": \"myCustomAction\",             \"flow\": [                 {                     \"id\": \"dd9fae6b6942b547\",                     \"type\": \"tab\",                     \"label\": \"myCustomAction\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"3e4008afcef21679\",                     \"type\": \"subflow:b5d1dcf74fe240aa\",                     \"z\": \"dd9fae6b6942b547\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"customImage\",                             \"value\": \"registry.apps.ocphub.physics-faas.eu/custom/george:171\",                             \"type\": \"str\"                         }                     ],                     \"x\": 270,                     \"y\": 140,                     \"wires\": []                 },                 {                     \"id\": \"626cb7ccd6b044a6\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"dd9fae6b6942b547\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         }                     ],                     \"x\": 200,                     \"y\": 220,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"25e8c046a47e4bfe\",                     \"type\": \"comment\",                     \"z\": \"b5d1dcf74fe240aa\",                     \"name\": \"Subflows need at least 1 node inside\",                     \"info\": \"\",                     \"x\": 250,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"b5d1dcf74fe240aa\",                     \"type\": \"subflow\",                     \"name\": \"Custom Function Image Importer\",                     \"info\": \"This node includes the necessary fields in order to declare an external image as an existing Openwhisk action. Contrary to the Function Importer node, it assumes that the function registration will be performed to a known and existing OW instance from a flow inside Node-RED.\\n\\nThe external image needs to be ready to be executed on Openwhisk, i.e. implementing the necessary POST /init and /run methods on port 8080.\\n\\nAlternatively it can be included in a flow as a regular node, in which case it does not affect the msg.payload and creates a msg.annotations object that includes the defined values.\\n\\nThis can later on be used in order to perform the necessary actions from other helper flows.\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"customImage\",                             \"type\": \"str\",                             \"value\": \"\"                         }                     ],                     \"meta\": {},                     \"color\": \"#FFCC66\",                     \"icon\": \"font-awesome/fa-arrow-right\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:195\",             \"type\": \"image\"         }     ],     \"displayName\": \"\",     \"branchName\": \"george\" }",
        "payloadType": "json",
        "x": 420,
        "y": 1080,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "d97ece386928e264",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "DE_OUTPUT_EHEALTHAPP MODIFIED",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"f4a0fb9518d4df8d\",\"flowName\":\"Inference\",\"flow\":[{\"id\":\"f4a0fb9518d4df8d\",\"type\":\"tab\",\"label\":\"Inference\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"48676e3bbd5ccbdd\",\"type\":\"exec\",\"z\":\"f4a0fb9518d4df8d\",\"command\":\"python3 /data/scripts/inference.py\",\"addpay\":\"cla\",\"append\":\"\",\"useSpawn\":\"false\",\"timer\":\"\",\"winHide\":false,\"oldrc\":false,\"name\":\"Infer with Python\",\"x\":410,\"y\":360,\"wires\":[[\"bfc262ed8d69643a\"],[\"3ec2ee2e0cd2bb1b\"],[]]},{\"id\":\"41dd301dce34ce6e\",\"type\":\"inject\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"props\":[{\"p\":\"payload\"},{\"p\":\"topic\",\"vt\":\"str\"}],\"repeat\":\"\",\"crontab\":\"\",\"once\":false,\"onceDelay\":0.1,\"topic\":\"\",\"payload\":\"\",\"payloadType\":\"date\",\"x\":120,\"y\":680,\"wires\":[[\"a3107530757941c9\"]]},{\"id\":\"d0eb89f611e377fd\",\"type\":\"http request\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Send request\",\"method\":\"POST\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"localhost:1880/run\",\"tls\":\"\",\"persist\":false,\"proxy\":\"\",\"authType\":\"basic\",\"senderr\":false,\"x\":490,\"y\":680,\"wires\":[[\"4078b21395814fb2\"]]},{\"id\":\"4078b21395814fb2\",\"type\":\"debug\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Inference\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":660,\"y\":680,\"wires\":[]},{\"id\":\"5f46f2f372d50ec2\",\"type\":\"http response\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"statusCode\":\"\",\"headers\":{},\"x\":870,\"y\":460,\"wires\":[]},{\"id\":\"89bbfca9894f9583\",\"type\":\"join\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"mode\":\"auto\",\"build\":\"array\",\"property\":\"payload\",\"propertyType\":\"msg\",\"key\":\"topic\",\"joiner\":\"\\\\n\",\"joinerType\":\"str\",\"accumulate\":false,\"timeout\":\"\",\"count\":\"2\",\"reduceRight\":false,\"reduceExp\":\"\",\"reduceInit\":\"\",\"reduceInitType\":\"\",\"reduceFixup\":\"\",\"x\":770,\"y\":340,\"wires\":[[\"8fe0a12ef00c83e0\"]]},{\"id\":\"8fe0a12ef00c83e0\",\"type\":\"function\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Prepare response\",\"func\":\"var input = msg.payload;\\nmsg.payload = {};\\nerrors = input[1];\\nif (input[0] == \\\"\\\") {\\n    msg.payload.errors = JSON.stringify(errors);\\n    msg.statusCode = 500;\\n} else {\\n    msg.payload.out = input[0];\\n    msg.payload.errors = JSON.stringify(errors);\\n}\\nmsg.filename = '/data/scripts/out_' + msg._msgid;\\nmsg.result = msg.payload;\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":210,\"y\":460,\"wires\":[[\"91e8d9a937614015\"]]},{\"id\":\"3ec2ee2e0cd2bb1b\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"2\",\"type\":\"num\"}],\"x\":610,\"y\":360,\"wires\":[[\"89bbfca9894f9583\"]]},{\"id\":\"bfc262ed8d69643a\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"1\",\"type\":\"num\"}],\"x\":610,\"y\":320,\"wires\":[[\"89bbfca9894f9583\"]]},{\"id\":\"a3bf1605553dc582\",\"type\":\"http in\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":80,\"y\":360,\"wires\":[[\"9e2f3aa450c84658\"]]},{\"id\":\"a3107530757941c9\",\"type\":\"function\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Prepare input\",\"func\":\"msg.payload = {};\\nmsg.payload.value = {};\\nmsg.payload.value.input = \\\"[{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.37319498,0.22020688,0.80695292,-0.14483578,0.82998543,-0.37742864,1.66220971,-0.65614964,-0.14292737,-0.37938052,0.79727469,0.11874357,-1.01171128,0.36931477]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.38092934,0.77517288,0.60602839,-0.74486557,0.55876642,-0.97958379,0.6130755,-1.33591593,0.23242436,0.20101902,0.57318741,-0.32033507,-0.32264458,0.70643433]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.40445467,1.08207716,0.75746139,-0.0749294,0.90057979,0.08020928,0.44294563,-0.95483483,0.79288105,0.84270299,1.23749778,0.99690085,-0.08768413,0.79027754]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.40896638,0.95170053,0.42175769,-1.12061238,0.47985993,-0.97055147,1.12346512,-0.0361204,0.53064902,0.24427862,1.03798781,0.48402748,0.4104772,1.2217207]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.39253087,-0.00477934,0.53616301,-0.60796557,0.86801974,0.23074807,1.18017507,0.04627552,0.75174661,0.44976169,1.17316305,0.82348324,0.90750891,1.51517193]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.41380036,0.89401176,0.55280539,-0.40407195,0.74137306,-0.1215127,0.66978546,-0.5119568,1.0756803,0.8210732,0.43006069,-1.13576682,0.33027435,0.62084439]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.43055813,1.23437552,0.2466346,-1.42354004,0.21542495,-1.64195446,0.69814044,-0.38424313,1.27621067,1.05179103,0.44379507,-1.03614394,-0.47288371,-0.61933637]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.43378078,1.12476685,0.14893176,-1.64491026,0.27156963,-1.32582301,0.17357333,-1.05988962,1.50245007,1.09865559,0.19585333,-1.66708887,0.46808769,0.83045241]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.4179898,0.41634871,0.19798855,-1.27207621,0.28847097,-1.13614413,0.42876814,-0.53667557,0.68490315,0.17578426,0.23705648,-1.35346127,0.54038322,0.83743934]},{\\\\\\\"patient\\\\\\\":\\\\\\\"4140D\\\\\\\",\\\\\\\"date\\\\\\\":\\\\\\\"10-06-2022\\\\\\\",\\\\\\\"vector\\\\\\\":[-0.17563081,0.37738442,-1.15970858,0.17140037,-1.32159323,0.21450978,-1.34689844,0.18775082,-0.80858208,-0.22005444,-0.85523605,0.39680903,-0.86272633,0.34382976,0.45315798]}]\\\";\\nmsg.payload.value.model = \\\"benchmark_tristate_NN_no_valid\\\";\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":680,\"wires\":[[\"d0eb89f611e377fd\",\"2c2d1ebff6a7cc1b\"]]},{\"id\":\"9e2f3aa450c84658\",\"type\":\"function\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Prepare CLA\",\"func\":\"msg.cla = \\\"'\\\" + msg.payload.value.input + \\\"' \\\" + msg.payload.value.model + \\\" \\\" + 'out_' + msg._msgid;\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":230,\"y\":360,\"wires\":[[\"48676e3bbd5ccbdd\"]]},{\"id\":\"c2a8ddbb8642a71c\",\"type\":\"comment\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Manual invocation section\",\"info\":\"\",\"x\":130,\"y\":580,\"wires\":[]},{\"id\":\"91e8d9a937614015\",\"type\":\"file in\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"filename\":\"\",\"format\":\"utf8\",\"chunk\":false,\"sendError\":false,\"encoding\":\"none\",\"allProps\":false,\"x\":380,\"y\":460,\"wires\":[[\"25518d73172e8ecf\"]]},{\"id\":\"25518d73172e8ecf\",\"type\":\"json\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"property\":\"payload\",\"action\":\"\",\"pretty\":false,\"x\":510,\"y\":460,\"wires\":[[\"a929760723e0c2c5\"]]},{\"id\":\"a929760723e0c2c5\",\"type\":\"function\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"final\",\"func\":\"msg.result.predictions = msg.payload;\\nmsg.payload = {};\\nmsg.payload = msg.result;\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":630,\"y\":460,\"wires\":[[\"a49f32e21f2ceea2\"]]},{\"id\":\"a49f32e21f2ceea2\",\"type\":\"file\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"filename\":\"\",\"appendNewline\":true,\"createDir\":false,\"overwriteFile\":\"delete\",\"encoding\":\"none\",\"x\":750,\"y\":460,\"wires\":[[\"5f46f2f372d50ec2\"]]},{\"id\":\"7cd54384e3001590\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":300,\"y\":100,\"wires\":[]},{\"id\":\"e0a44f9c057781b6\",\"type\":\"comment\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Annotations section\",\"info\":\"\",\"x\":110,\"y\":40,\"wires\":[]},{\"id\":\"738be79c50ce5ea0\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"},{\"name\":\"timeout\",\"value\":\"300000\",\"type\":\"num\"}],\"x\":100,\"y\":100,\"wires\":[[]]},{\"id\":\"b286543636b19b47\",\"type\":\"comment\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Endpoints' definition section\",\"info\":\"\",\"x\":140,\"y\":220,\"wires\":[]},{\"id\":\"b4e22c25249c9de1\",\"type\":\"http in\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":80,\"y\":280,\"wires\":[[\"13d4f7c0acaa0a39\"]]},{\"id\":\"13d4f7c0acaa0a39\",\"type\":\"http response\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"x\":380,\"y\":280,\"wires\":[]},{\"id\":\"2c2d1ebff6a7cc1b\",\"type\":\"json\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"property\":\"payload.value.input\",\"action\":\"\",\"pretty\":false,\"x\":490,\"y\":620,\"wires\":[[\"99c7424da4aad1d3\"]]},{\"id\":\"99c7424da4aad1d3\",\"type\":\"debug\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"Input data\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":660,\"y\":620,\"wires\":[]},{\"id\":\"2d64e8357aafa568\",\"type\":\"subflow:40ce9e05d2b123a0\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"gpu_enabled\",\"value\":\"true\",\"type\":\"str\"},{\"name\":\"architecture\",\"value\":\"x86_64\",\"type\":\"str\"}],\"x\":490,\"y\":100,\"wires\":[]},{\"id\":\"ec218f71071744ae\",\"type\":\"subflow:05f045b87080a61e\",\"z\":\"f4a0fb9518d4df8d\",\"name\":\"\",\"env\":[{\"name\":\"locality\",\"value\":\"Cloud\",\"type\":\"str\"}],\"x\":690,\"y\":100,\"wires\":[]},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"170d11b5c7d5b61a\",\"type\":\"comment\",\"z\":\"40ce9e05d2b123a0\",\"name\":\"\",\"info\":\"\",\"x\":140,\"y\":60,\"wires\":[]},{\"id\":\"40ce9e05d2b123a0\",\"type\":\"subflow\",\"name\":\"architecture\",\"info\":\"\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"gpu_enabled\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"true\"},\"v\":\"true\"},{\"l\":{\"en-US\":\"false\"},\"v\":\"false\"}]}}},{\"name\":\"architecture\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"x86_64\"},\"v\":\"x86_64\"},{\"l\":{\"en-US\":\"arm64\"},\"v\":\"arm64\"}]}}}],\"meta\":{},\"color\":\"#87A980\",\"icon\":\"font-awesome/fa-object-group\"},{\"id\":\"30ee5c09f384361d\",\"type\":\"comment\",\"z\":\"05f045b87080a61e\",\"name\":\"README\",\"info\":\"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \",\"x\":400,\"y\":220,\"wires\":[]},{\"id\":\"05f045b87080a61e\",\"type\":\"subflow\",\"name\":\"Locality(flow level)\",\"info\":\"\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"locality\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"HPC\"},\"v\":\"HPC\"},{\"l\":{\"en-US\":\"Cloud\"},\"v\":\"Cloud\"},{\"l\":{\"en-US\":\"Edge\"},\"v\":\"Edge\"}]}}}],\"meta\":{},\"color\":\"#D8BFD8\",\"icon\":\"font-awesome/fa-braille\"}],\"artifact\":\"registry.apps.ocphub.physics-faas.eu/custom/ehealth:19\",\"type\":\"image\",\"actionName\":\"Inference_3fff08e8-3617-4eb4-b118-4229f30514e3.json\"}],\"displayName\":\"ehealth_inference_app\",\"branchName\":\"ehealth\"}",
        "payloadType": "json",
        "x": 180,
        "y": 40,
        "wires": [
            [
                "b7a69d1ce95a0c4e"
            ]
        ]
    },
    {
        "id": "b7a69d1ce95a0c4e",
        "type": "http request",
        "z": "75bc5fa0db2ad379",
        "name": "Call Extractor (/transform)",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:1880/transform",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 40,
        "wires": [
            [
                "047e5a0f56c51ec3"
            ]
        ]
    },
    {
        "id": "047e5a0f56c51ec3",
        "type": "debug",
        "z": "75bc5fa0db2ad379",
        "name": "Extractor Output (/transform)",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 40,
        "wires": []
    },
    {
        "id": "26bb8519128453c3",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "ORCHESTRATOR WITH HELLO",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{     \"flows\": [         {             \"flowID\": \"39ef55a8.55f96a\",             \"flowName\": \"HelloFunctionV2\",             \"flow\": [                 {                     \"id\": \"39ef55a8.55f96a\",                     \"type\": \"tab\",                     \"label\": \"HelloFunctionV2\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"f70d642d7d615561\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 160,                     \"wires\": [                         [                             \"a8ea37eb3bb8cf23\"                         ]                     ]                 },                 {                     \"id\": \"ee0278d90f6393a9\",                     \"type\": \"http in\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 340,                     \"y\": 280,                     \"wires\": [                         [                             \"f52b7bec399e315a\"                         ]                     ]                 },                 {                     \"id\": \"a8ea37eb3bb8cf23\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 730,                     \"y\": 180,                     \"wires\": []                 },                 {                     \"id\": \"ab91c6c51decfbab\",                     \"type\": \"http response\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"x\": 870,                     \"y\": 380,                     \"wires\": []                 },                 {                     \"id\": \"f52b7bec399e315a\",                     \"type\": \"function\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"hello world\",                     \"func\": \"console.log(msg.payload);\\nif ( Array.isArray(msg.payload.value.input)){\\n    console.log('Step 1');\\n    var names=msg.payload.value.input;\\n    console.log('Step 2');\\n    msg.payload={'response':'hello'};\\n    console.log('Step 3');\\n    for (i=0;i<names.length;i++){\\n        console.log('Step:'+i);\\n        msg.payload.response=msg.payload.response+' '+names[i].name;\\n    }\\n} else {\\n    msg.payload={'response':'hello '+msg.payload.value.name};    \\n}\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 670,                     \"y\": 280,                     \"wires\": [                         [                             \"ab91c6c51decfbab\"                         ]                     ]                 },                 {                     \"id\": \"47d1123d17b41031\",                     \"type\": \"comment\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"OW SKELETON with hello world function\",                     \"info\": \"\",                     \"x\": 440,                     \"y\": 360,                     \"wires\": []                 },                 {                     \"id\": \"129fabd43047059b\",                     \"type\": \"subflow:694cb784968dc0b9\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"value\": \"NoderedFunction\",                             \"type\": \"str\"                         }                     ],                     \"x\": 230,                     \"y\": 480,                     \"wires\": []                 },                 {                     \"id\": \"bba4b91d07643081\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"220000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 220,                     \"y\": 540,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"46230eca45760f58\",                     \"type\": \"subflow:f0b9b88b6dcb2ece\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"goal\",                             \"value\": \"energy\",                             \"type\": \"str\"                         }                     ],                     \"x\": 270,                     \"y\": 600,                     \"wires\": []                 },                 {                     \"id\": \"be87371dd5bad13a\",                     \"type\": \"subflow:94dffc86e4af9a58\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"importance\",                             \"value\": \"high\",                             \"type\": \"str\"                         }                     ],                     \"x\": 240,                     \"y\": 660,                     \"wires\": []                 },                 {                     \"id\": \"7ec29cdc3b1457ea\",                     \"type\": \"subflow:05f045b87080a61e\",                     \"z\": \"39ef55a8.55f96a\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"locality\",                             \"value\": \"aws\",                             \"type\": \"str\"                         }                     ],                     \"x\": 250,                     \"y\": 840,                     \"wires\": []                 },                 {                     \"id\": \"82b665f654048ecf\",                     \"type\": \"function\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"\",                     \"func\": \"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 360,                     \"y\": 140,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"eeb5210da7efebd3\",                     \"type\": \"comment\",                     \"z\": \"694cb784968dc0b9\",                     \"name\": \"Instructions\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"x\": 560,                     \"y\": 280,                     \"wires\": []                 },                 {                     \"id\": \"694cb784968dc0b9\",                     \"type\": \"subflow\",                     \"name\": \"Executor Mode\",                     \"info\": \"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"Executor Mode\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"Service\"                                             },                                             \"v\": \"Service\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NoderedFunction\"                                             },                                             \"v\": \"NoderedFunction\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"NativeSequence\"                                             },                                             \"v\": \"NativeSequence\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"font-awesome/fa-angle-right\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"ef33a2b7c53c600f\",                     \"type\": \"comment\",                     \"z\": \"f0b9b88b6dcb2ece\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 200,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"f0b9b88b6dcb2ece\",                     \"type\": \"subflow\",                     \"name\": \"Optimization Goal (Flow Level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"goal\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"performance\"                                             },                                             \"v\": \"performance\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"energy\"                                             },                                             \"v\": \"energy\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"availability\"                                             },                                             \"v\": \"availability\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#FFAAAA\",                     \"icon\": \"font-awesome/fa-sliders\"                 },                 {                     \"id\": \"1896904e3b2cf282\",                     \"type\": \"comment\",                     \"z\": \"94dffc86e4af9a58\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level what is the importance of the flow (to be taken under consideration in the scheduling aspects of PHYSICS)\",                     \"x\": 400,                     \"y\": 160,                     \"wires\": []                 },                 {                     \"id\": \"94dffc86e4af9a58\",                     \"type\": \"subflow\",                     \"name\": \"Importance (Flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"importance\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"high\"                                             },                                             \"v\": \"high\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"medium\"                                             },                                             \"v\": \"medium\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"low\"                                             },                                             \"v\": \"low\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#3FADB5\",                     \"icon\": \"node-red/alert.svg\"                 },                 {                     \"id\": \"30ee5c09f384361d\",                     \"type\": \"comment\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"README\",                     \"info\": \"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name.\\n\\nThe new clusters need to be retrieved from an external location and put in the msg.newClusters field as an array:\\n[\\n    \\\"aws\\\",\\n    \\\"edgeA\\\",\\n    \\\"edgeB\\\",\\n    \\\"azure\\\"\\n]\\n\\nThen all current flows are retrieved and the subflow definition of Locality is updated with the new options. Following, the flows are reposted to Node-RED. Be sure to check the merge afterwards, in case someone else has changed the flows in the meantime.\\n\\nThere is no API at the subflow level at the moment:\\nhttps://discourse.nodered.org/t/api-for-subflows/20325/2\\n\\nPENDING: WE CAN ADD THE RETRIEVAL PART OF THE NEW CLUSTER LIST INSIDE THE SUBFLOW IF WE ALSO ADD PARAMETERS IN THE UI REGARDING THE ENDPOINT FROM WHICH TO RETRIEVE THE LIST\",                     \"x\": 400,                     \"y\": 220,                     \"wires\": []                 },                 {                     \"id\": \"55a2a753e271d52e\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"SUBFLOW FORMAT\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\", \\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"[     {         \\\"id\\\": \\\"05f045b87080a61e\\\",         \\\"type\\\": \\\"subflow\\\",         \\\"name\\\": \\\"Locality(flow level)\\\",         \\\"info\\\": \\\"\\\",         \\\"category\\\": \\\"PHYSICS Annotators\\\",         \\\"in\\\": [],         \\\"out\\\": [],         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"type\\\": \\\"str\\\",                 \\\"value\\\": \\\"\\\",                 \\\"ui\\\": {                     \\\"type\\\": \\\"select\\\",                     \\\"opts\\\": {                         \\\"opts\\\": [                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"aws\\\"                                 },                                 \\\"v\\\": \\\"aws\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"azure\\\"                                 },                                 \\\"v\\\": \\\"azure\\\"                             },                             {                                 \\\"l\\\": {                                     \\\"en-US\\\": \\\"edge\\\"                                 },                                 \\\"v\\\": \\\"edge\\\"                             }                         ]                     }                 }             }         ],         \\\"meta\\\": {},         \\\"color\\\": \\\"#D8BFD8\\\",         \\\"icon\\\": \\\"font-awesome/fa-braille\\\"     },     {         \\\"id\\\": \\\"30ee5c09f384361d\\\",         \\\"type\\\": \\\"comment\\\",         \\\"z\\\": \\\"05f045b87080a61e\\\",         \\\"name\\\": \\\"README\\\",         \\\"info\\\": \\\"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \\\",         \\\"x\\\": 400,         \\\"y\\\": 220,         \\\"wires\\\": []     },     {         \\\"id\\\": \\\"7ec29cdc3b1457ea\\\",         \\\"type\\\": \\\"subflow:05f045b87080a61e\\\",         \\\"z\\\": \\\"f8346d4a3a5cf215\\\",         \\\"name\\\": \\\"\\\",         \\\"env\\\": [             {                 \\\"name\\\": \\\"locality\\\",                 \\\"value\\\": \\\"aws\\\",                 \\\"type\\\": \\\"str\\\"             }         ],         \\\"x\\\": 550,         \\\"y\\\": 300,         \\\"wires\\\": []     } ]\",                     \"payloadType\": \"json\",                     \"x\": 390,                     \"y\": 340,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"0e0216a1434ea57a\",                     \"type\": \"function\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"UPDATE CLUSTERS\",                     \"func\": \"msg.headers={};\\nvar changedNodes=[];\\nfor (i=0;i<msg.payload.length;i++){\\n    if ((msg.payload[i].type==\\\"subflow\\\")&&(msg.payload[i].name==\\\"Locality(flow level)\\\")){\\n        msg.payload[i].env[0].ui.opts.opts=[];\\n        var k=0;\\n        for (k=0;k<msg.newClusters.length;k++){\\n            var opt={\\\"l\\\":{\\\"en-US\\\":\\\"\\\"},\\\"v\\\":\\\"\\\"};\\n            opt.l[\\\"en-US\\\"]=msg.newClusters[k];\\n            opt.v=msg.newClusters[k];\\n            console.log(\\\"K:\\\",k);\\n            console.log(\\\"Opt:\\\",opt);\\n            msg.payload[i].env[0].ui.opts.opts[k]=opt;\\n            console.log(\\\"Array:\\\",msg.payload[i].env[0].ui.opts.opts);\\n        }\\n        changedNodes.push(msg.payload[i]);\\n    }\\n}\\nmsg.changedNodes=changedNodes;\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 460,                     \"y\": 420,                     \"wires\": [                         [                             \"e1deff3989857115\"                         ]                     ]                 },                 {                     \"id\": \"0607edf39bc4fcdd\",                     \"type\": \"inject\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"newClusters test\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"newClusters\",                             \"v\": \"[\\\"aws\\\",\\\"edgeA\\\",\\\"edgeB\\\",\\\"azure\\\"]\",                             \"vt\": \"json\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"\",                     \"payloadType\": \"date\",                     \"x\": 160,                     \"y\": 500,                     \"wires\": [                         [                             \"2dfd6d65fe6d1982\"                         ]                     ]                 },                 {                     \"id\": \"2dfd6d65fe6d1982\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"GET FLOWS\",                     \"method\": \"GET\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 230,                     \"y\": 420,                     \"wires\": [                         [                             \"0e0216a1434ea57a\"                         ]                     ]                 },                 {                     \"id\": \"e1deff3989857115\",                     \"type\": \"http request\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"POST FLOW\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"localhost:1880/flows\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 670,                     \"y\": 420,                     \"wires\": [                         [                             \"fd2b4eee698cdcc4\"                         ]                     ]                 },                 {                     \"id\": \"fd2b4eee698cdcc4\",                     \"type\": \"debug\",                     \"z\": \"05f045b87080a61e\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 810,                     \"y\": 420,                     \"wires\": []                 },                 {                     \"id\": \"05f045b87080a61e\",                     \"type\": \"subflow\",                     \"name\": \"Locality(flow level)\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 80,                             \"y\": 420,                             \"wires\": [                                 {                                     \"id\": \"2dfd6d65fe6d1982\"                                 }                             ]                         }                     ],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"locality\",                             \"type\": \"str\",                             \"value\": \"\",                             \"ui\": {                                 \"type\": \"select\",                                 \"opts\": {                                     \"opts\": [                                         {                                             \"l\": {                                                 \"en-US\": \"aws\"                                             },                                             \"v\": \"aws\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeA\"                                             },                                             \"v\": \"edgeA\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"edgeB\"                                             },                                             \"v\": \"edgeB\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"azure\"                                             },                                             \"v\": \"azure\"                                         },                                         {                                             \"l\": {                                                 \"en-US\": \"hua\"                                             },                                             \"v\": \"hua\"                                         }                                     ]                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#D8BFD8\",                     \"icon\": \"font-awesome/fa-braille\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:199\",             \"type\": \"image\"         },         {             \"flowID\": \"a714de618203e22e\",             \"flowName\": \"orchestrator\",             \"flow\": [                 {                     \"id\": \"a714de618203e22e\",                     \"type\": \"tab\",                     \"label\": \"orchestrator\",                     \"disabled\": false,                     \"info\": \"\",                     \"env\": []                 },                 {                     \"id\": \"ad0beb0a878c622a\",                     \"type\": \"subflow:3352c7dddc9aad6d\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"call HelloFunctionV2\",                     \"env\": [                         {                             \"name\": \"dynamicActionName\",                             \"value\": \"HelloFunctionV2_george\",                             \"type\": \"str\"                         },                         {                             \"name\": \"actionName\",                             \"value\": \"HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json\",                             \"type\": \"str\"                         },                         {                             \"name\": \"token\",                             \"type\": \"cred\"                         }                     ],                     \"x\": 340,                     \"y\": 240,                     \"wires\": [                         [                             \"d759376bc9171438\"                         ]                     ]                 },                 {                     \"id\": \"bf09047153273cf2\",                     \"type\": \"http in\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"url\": \"/init\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 100,                     \"y\": 140,                     \"wires\": [                         [                             \"45437512996b2c7a\"                         ]                     ]                 },                 {                     \"id\": \"45437512996b2c7a\",                     \"type\": \"http response\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"x\": 530,                     \"y\": 140,                     \"wires\": []                 },                 {                     \"id\": \"d759376bc9171438\",                     \"type\": \"http response\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"statusCode\": \"\",                     \"headers\": {},                     \"x\": 650,                     \"y\": 240,                     \"wires\": []                 },                 {                     \"id\": \"fbf1b0d24c05f997\",                     \"type\": \"inject\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"TEST_DELETECREDS BEFOREPUBLIC\",                     \"props\": [                         {                             \"p\": \"payload\"                         },                         {                             \"p\": \"topic\",                             \"vt\": \"str\"                         }                     ],                     \"repeat\": \"\",                     \"crontab\": \"\",                     \"once\": false,                     \"onceDelay\": 0.1,                     \"topic\": \"\",                     \"payload\": \"{\\\"value\\\":{\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_HOST\\\":\\\"https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/\\\",\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_NAMESPACE\\\":\\\"guest\\\",\\\"__HelloFunctionV2_george_9d780eb8-7441-4377-a648-4a1fceee3518.json_CREDS\\\":\\\"17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF\\\",\\\"name\\\":\\\"george\\\"}}\",                     \"payloadType\": \"json\",                     \"x\": 220,                     \"y\": 580,                     \"wires\": [                         [                             \"73608b4ce219374a\"                         ]                     ]                 },                 {                     \"id\": \"73608b4ce219374a\",                     \"type\": \"http request\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"http://localhost:1880/run\",                     \"tls\": \"\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 490,                     \"y\": 580,                     \"wires\": [                         [                             \"8c2df5bff072d0f7\"                         ]                     ]                 },                 {                     \"id\": \"8c2df5bff072d0f7\",                     \"type\": \"debug\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"false\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 710,                     \"y\": 580,                     \"wires\": []                 },                 {                     \"id\": \"311e4be150c63a56\",                     \"type\": \"http in\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"url\": \"/run\",                     \"method\": \"post\",                     \"upload\": false,                     \"swaggerDoc\": \"\",                     \"x\": 100,                     \"y\": 240,                     \"wires\": [                         [                             \"ad0beb0a878c622a\"                         ]                     ]                 },                 {                     \"id\": \"a0e2929e2897b0cd\",                     \"type\": \"subflow:789351ac.02c9d\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"value\": \"20\",                             \"type\": \"str\"                         },                         {                             \"name\": \"pollPeriod\",                             \"value\": \"3000\",                             \"type\": \"num\"                         },                         {                             \"name\": \"method\",                             \"value\": \"GET\",                             \"type\": \"str\"                         },                         {                             \"name\": \"functionChain\",                             \"value\": \"false\",                             \"type\": \"bool\"                         }                     ],                     \"x\": 270,                     \"y\": 440,                     \"wires\": [                         [],                         [],                         []                     ]                 },                 {                     \"id\": \"60aae624d21f2cf1\",                     \"type\": \"subflow:dd8835083692860a\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"memory\",                             \"value\": \"512\",                             \"type\": \"num\"                         },                         {                             \"name\": \"timeout\",                             \"value\": \"300000\",                             \"type\": \"num\"                         }                     ],                     \"x\": 140,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"0a47269f76b1f09b\",                     \"type\": \"subflow:2f92914d720ab974\",                     \"z\": \"a714de618203e22e\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"averageWaitTime\",                             \"value\": \"200\",                             \"type\": \"num\"                         }                     ],                     \"x\": 350,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"a80b2fa1299e3bb8\",                     \"type\": \"tls-config\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"cert\": \"\",                     \"key\": \"\",                     \"ca\": \"\",                     \"certname\": \"\",                     \"keyname\": \"\",                     \"caname\": \"\",                     \"servername\": \"\",                     \"verifyservercert\": false,                     \"alpnprotocol\": \"\"                 },                 {                     \"id\": \"b9c86339cffd54ea\",                     \"type\": \"http request\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"method\": \"POST\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"\",                     \"tls\": \"a80b2fa1299e3bb8\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 370,                     \"y\": 180,                     \"wires\": [                         [                             \"27c3b0af40ccb4e0\"                         ]                     ]                 },                 {                     \"id\": \"60d351e91c4f1f19\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"create dynamic\",                     \"func\": \"//msg.headers={};\\n\\n\\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\\nconst prophost='__'+env.get('actionName')+'_HOST';\\nconst propcreds='__'+env.get('actionName')+'_CREDS';\\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\\n\\n//retrieve from incoming msg params\\nmsg.namespace=msg.payload.value[propnamespace];\\nmsg.creds=msg.payload.value[propcreds];\\nmsg.baseurl=msg.payload.value[prophost];\\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\\n\\n//delete info so that it does not leak into the newly called function, we dont know how the payload \\n//is going to be used after that\\n\\ndelete msg.payload.value[propcreds];\\ndelete msg.payload.value[propnamespace];\\ndelete msg.payload.value[prophost]\\n\\n\\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \\n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\\nvar input=msg.payload.value;\\nmsg.payload={};\\nmsg.payload=input;\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 200,                     \"y\": 180,                     \"wires\": [                         [                             \"b9c86339cffd54ea\"                         ]                     ]                 },                 {                     \"id\": \"27c3b0af40ccb4e0\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"add activation id\",                     \"func\": \"\\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\\n//msg.oldheaders=msg.headers;\\n//msg.headers={};\\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 540,                     \"y\": 180,                     \"wires\": [                         [                             \"5e15f34e1caa9fe7\"                         ]                     ]                 },                 {                     \"id\": \"5e15f34e1caa9fe7\",                     \"type\": \"subflow:789351ac.02c9d\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"value\": \"20\",                             \"type\": \"str\"                         },                         {                             \"name\": \"pollPeriod\",                             \"value\": \"3000\",                             \"type\": \"num\"                         },                         {                             \"name\": \"method\",                             \"value\": \"GET\",                             \"type\": \"str\"                         },                         {                             \"name\": \"functionChain\",                             \"value\": \"false\",                             \"type\": \"bool\"                         }                     ],                     \"x\": 610,                     \"y\": 260,                     \"wires\": [                         [                             \"b84a3ec8968b0617\",                             \"47a494805843dcd7\"                         ],                         [],                         []                     ]                 },                 {                     \"id\": \"b84a3ec8968b0617\",                     \"type\": \"function\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"reduce output\",                     \"func\": \"//msg.headers={};\\nvar response=msg.payload.response;\\nmsg.payload={};\\nmsg.payload.response=response;\\n\\nreturn msg;\\n//return msg.oldmsg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 840,                     \"y\": 280,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"47a494805843dcd7\",                     \"type\": \"debug\",                     \"z\": \"3352c7dddc9aad6d\",                     \"name\": \"\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"false\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 610,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"3352c7dddc9aad6d\",                     \"type\": \"subflow\",                     \"name\": \"Dynamic OW action\",                     \"info\": \"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\\n\\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\\n\\n\\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\\n$ACTIONNAME_OW_CREDS=user:pwd\\n\\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\\n\\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\\n\\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\\na typical nodered environment. However the retrieved information from the environment variables prevail\\nover the set ones in the UI.\\n\\nPENDING: check how to pass token from UI to http request node\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 80,                             \"y\": 180,                             \"wires\": [                                 {                                     \"id\": \"60d351e91c4f1f19\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 980,                             \"y\": 280,                             \"wires\": [                                 {                                     \"id\": \"b84a3ec8968b0617\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"dynamicActionName\",                             \"type\": \"str\",                             \"value\": \"dockeraction\"                         }                     ],                     \"meta\": {},                     \"color\": \"#C0DEED\",                     \"icon\": \"node-red/function.svg\"                 },                 {                     \"id\": \"2934f390.711324\",                     \"type\": \"tls-config\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"\",                     \"cert\": \"\",                     \"key\": \"\",                     \"ca\": \"\",                     \"certname\": \"\",                     \"keyname\": \"\",                     \"caname\": \"\",                     \"servername\": \"\",                     \"verifyservercert\": false,                     \"alpnprotocol\": \"\"                 },                 {                     \"id\": \"7d194c10.33b51c\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"defaults+activation id\",                     \"func\": \"\\nif (msg.hasOwnProperty('maxAttempts')){\\n    msg.iterations=msg.maxAttempts;\\n} else {\\n    msg.iterations=env.get('maxAttempts');\\n}\\n//needed to reset the iterations after function chaining\\nmsg.defaultAttempts=msg.iterations;\\n\\nif (msg.hasOwnProperty('pollPeriod')){\\n    \\n} else {\\n    msg.pollPeriod=env.get('pollPeriod');\\n}\\n\\nif (msg.hasOwnProperty('method')){\\n    \\n} else {\\n    msg.method=env.get('method');\\n}\\n\\nif (msg.hasOwnProperty('url')){\\n    \\n} else {\\n    msg.url=env.get('url');\\n}\\n\\nif (msg.hasOwnProperty('retryCode')){\\n    \\n} else {\\n    msg.retryCode=env.get('retryCode');\\n}\\n\\nif (msg.hasOwnProperty('acceptCode')){\\n    \\n} else {\\n    msg.acceptCode=env.get('acceptCode');\\n}\\n\\nif (msg.hasOwnProperty('creds')){\\n    \\n} else {\\n    msg.creds=env.get('creds');\\n}\\n\\nif (msg.hasOwnProperty('functionChain')){\\n    \\n} else {\\n    msg.functionChain=env.get('functionChain');\\n}\\n\\nif (msg.hasOwnProperty('inputData')){\\n    if (msg.inputData.hasOwnProperty('creds')){\\n        msg.creds=msg.inputData.creds;\\n    }\\n}\\n\\n\\n\\nmsg.delay=msg.pollPeriod;\\nmsg.start=Date.now();\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 200,                     \"y\": 160,                     \"wires\": [                         [                             \"cad17b04.a2b4d8\"                         ]                     ]                 },                 {                     \"id\": \"4be3f205.3e8dc4\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"iterations--\",                     \"func\": \"msg.iterations=msg.iterations-1;\\n/*\\nif (flow.get('stop')==true){\\n    msg.iterations=-1;\\n}*/\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 350,                     \"y\": 300,                     \"wires\": [                         [                             \"c2cf68b7.263d4\"                         ]                     ]                 },                 {                     \"id\": \"c2cf68b7.263d4\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"if iterations finished\",                     \"property\": \"iterations\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"gte\",                             \"v\": \"1\",                             \"vt\": \"num\"                         },                         {                             \"t\": \"lt\",                             \"v\": \"1\",                             \"vt\": \"num\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 550,                     \"y\": 300,                     \"wires\": [                         [                             \"cad17b04.a2b4d8\"                         ],                         []                     ]                 },                 {                     \"id\": \"76299695.812bd8\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"SUCCESS\",                     \"info\": \"\",                     \"x\": 1100,                     \"y\": 60,                     \"wires\": []                 },                 {                     \"id\": \"48093072.b17a6\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"FINAL FAIL\",                     \"info\": \"\",                     \"x\": 890,                     \"y\": 360,                     \"wires\": []                 },                 {                     \"id\": \"d5960f2f.2e9448\",                     \"type\": \"delay\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"delay\",                     \"pauseType\": \"delayv\",                     \"timeout\": \"5\",                     \"timeoutUnits\": \"seconds\",                     \"rate\": \"1\",                     \"nbRateUnits\": \"1\",                     \"rateUnits\": \"second\",                     \"randomFirst\": \"1\",                     \"randomLast\": \"5\",                     \"randomUnits\": \"seconds\",                     \"drop\": false,                     \"outputs\": 1,                     \"x\": 170,                     \"y\": 300,                     \"wires\": [                         [                             \"4be3f205.3e8dc4\"                         ]                     ]                 },                 {                     \"id\": \"471b3d64.265894\",                     \"type\": \"http request\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"\",                     \"method\": \"use\",                     \"ret\": \"obj\",                     \"paytoqs\": \"ignore\",                     \"url\": \"\",                     \"tls\": \"2934f390.711324\",                     \"persist\": false,                     \"proxy\": \"\",                     \"authType\": \"\",                     \"senderr\": false,                     \"x\": 590,                     \"y\": 160,                     \"wires\": [                         [                             \"8694180b.ec1c68\"                         ]                     ]                 },                 {                     \"id\": \"8694180b.ec1c68\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"Status code check\",                     \"property\": \"statusCode\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"lte\",                             \"v\": \"acceptCode\",                             \"vt\": \"msg\"                         },                         {                             \"t\": \"gte\",                             \"v\": \"retryCode\",                             \"vt\": \"msg\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 810,                     \"y\": 160,                     \"wires\": [                         [                             \"f9d0aba7.72382\"                         ],                         [                             \"d5960f2f.2e9448\"                         ]                     ]                 },                 {                     \"id\": \"ef03414f.ad9d78\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"RETRY FAIL\",                     \"info\": \"\",                     \"x\": 890,                     \"y\": 260,                     \"wires\": []                 },                 {                     \"id\": \"66bbc0cf.0c62f\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"BEFORE AUTH\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": false,                     \"tostatus\": false,                     \"complete\": \"true\",                     \"targetType\": \"full\",                     \"x\": 370,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"13791c2d.8cea7c\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"URL\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"url\",                     \"targetType\": \"msg\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 580,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"cad17b04.a2b4d8\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"add auth\",                     \"func\": \"msg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\nmsg.method='GET';\\n\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 420,                     \"y\": 160,                     \"wires\": [                         [                             \"471b3d64.265894\"                         ]                     ]                 },                 {                     \"id\": \"f2b7c4e4.a24c3\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"adapt to new activation\",                     \"func\": \"\\n\\nmsg.url=msg.payload.response.result.newActivationIDURL;\\nmsg.iterations=msg.defaultAttempts+1;\\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\\nreturn msg;\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 1500,                     \"y\": 160,                     \"wires\": [                         [                             \"d5960f2f.2e9448\",                             \"ee1dbf44.7368f8\"                         ]                     ]                 },                 {                     \"id\": \"c338e47b.b00ed\",                     \"type\": \"comment\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"FUNCTION CHAIN CONTINUATION\",                     \"info\": \"\",                     \"x\": 1240,                     \"y\": 240,                     \"wires\": []                 },                 {                     \"id\": \"ee1dbf44.7368f8\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"AFTER CONTINUATION IN Poll2Push\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"statusVal\": \"\",                     \"statusType\": \"auto\",                     \"x\": 1420,                     \"y\": 300,                     \"wires\": []                 },                 {                     \"id\": \"f9d0aba7.72382\",                     \"type\": \"switch\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"is Chain\",                     \"property\": \"functionChain\",                     \"propertyType\": \"msg\",                     \"rules\": [                         {                             \"t\": \"false\"                         },                         {                             \"t\": \"true\"                         }                     ],                     \"checkall\": \"true\",                     \"repair\": false,                     \"outputs\": 2,                     \"x\": 1020,                     \"y\": 160,                     \"wires\": [                         [],                         [                             \"6da1eea0.969368\",                             \"1bbc6fa0.4879c\"                         ]                     ]                 },                 {                     \"id\": \"6da1eea0.969368\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"RESULT STATUS\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1100,                     \"y\": 300,                     \"wires\": []                 },                 {                     \"id\": \"f20a68d.9711598\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"AFTER CODE CHECK\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"functionChain\",                     \"targetType\": \"msg\",                     \"x\": 890,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"36905e62.dfad92\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP1\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1120,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"9610a737.bf275\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP2\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1300,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"c52af08f.756ee8\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"TOP3\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"payload\",                     \"targetType\": \"msg\",                     \"x\": 1600,                     \"y\": 100,                     \"wires\": []                 },                 {                     \"id\": \"1bbc6fa0.4879c\",                     \"type\": \"function\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"compare completion\",                     \"func\": \"console.log('IN COMPARE COMPLETION',msg.payload.response);\\nif (msg.payload.response.result.status==='Completed'){\\n    return [msg,null];\\n} else {\\n    return [null,msg];\\n}\\n\",                     \"outputs\": 2,                     \"noerr\": 0,                     \"initialize\": \"\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 1240,                     \"y\": 160,                     \"wires\": [                         [                             \"c52af08f.756ee8\"                         ],                         [                             \"f2b7c4e4.a24c3\"                         ]                     ]                 },                 {                     \"id\": \"d8305759.866988\",                     \"type\": \"debug\",                     \"z\": \"789351ac.02c9d\",                     \"name\": \"URL\",                     \"active\": true,                     \"tosidebar\": true,                     \"console\": true,                     \"tostatus\": false,                     \"complete\": \"iterations\",                     \"targetType\": \"msg\",                     \"x\": 500,                     \"y\": 380,                     \"wires\": []                 },                 {                     \"id\": \"789351ac.02c9d\",                     \"type\": \"subflow\",                     \"name\": \"PollTOPushConverterFC\",                     \"info\": \"This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\\n\\nThe according function should return as a response the following structure:\\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \\n\\nThe node also can get credentials from the msg.creds field of the input message.\\n\\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\\n\\nThe node has three outputs:\\n - Output 1 indicates successful finalization of the API call\\n - Output 2 indicates intermediate failure and was added to return the reason for failure\\n - Output 3 indicates final failure after max attempts\\n\\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\\n\\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\\n\\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\\n\\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\\n \\n\",                     \"category\": \"PHYSICS Helpers\",                     \"in\": [                         {                             \"x\": 60,                             \"y\": 160,                             \"wires\": [                                 {                                     \"id\": \"7d194c10.33b51c\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 1380,                             \"y\": 40,                             \"wires\": [                                 {                                     \"id\": \"f9d0aba7.72382\",                                     \"port\": 0                                 },                                 {                                     \"id\": \"1bbc6fa0.4879c\",                                     \"port\": 0                                 }                             ]                         },                         {                             \"x\": 780,                             \"y\": 260,                             \"wires\": [                                 {                                     \"id\": \"c2cf68b7.263d4\",                                     \"port\": 0                                 }                             ]                         },                         {                             \"x\": 780,                             \"y\": 360,                             \"wires\": [                                 {                                     \"id\": \"c2cf68b7.263d4\",                                     \"port\": 1                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"maxAttempts\",                             \"type\": \"str\",                             \"value\": \"3\"                         },                         {                             \"name\": \"pollPeriod\",                             \"type\": \"str\",                             \"value\": \"3000\"                         },                         {                             \"name\": \"method\",                             \"type\": \"str\",                             \"value\": \"\"                         },                         {                             \"name\": \"url\",                             \"type\": \"str\",                             \"value\": \"http://10.100.59.182:3233/api/v1/namespaces/_/activations/\"                         },                         {                             \"name\": \"retryCode\",                             \"type\": \"num\",                             \"value\": \"202\"                         },                         {                             \"name\": \"acceptCode\",                             \"type\": \"num\",                             \"value\": \"200\"                         },                         {                             \"name\": \"functionChain\",                             \"type\": \"bool\",                             \"value\": \"true\"                         }                     ],                     \"meta\": {},                     \"color\": \"#b4e8a9\"                 },                 {                     \"id\": \"c66966a2d36f06b5\",                     \"type\": \"function\",                     \"z\": \"dd8835083692860a\",                     \"name\": \"add sizing\",                     \"func\": \"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",                     \"outputs\": 1,                     \"noerr\": 0,                     \"initialize\": \"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",                     \"finalize\": \"\",                     \"libs\": [],                     \"x\": 300,                     \"y\": 60,                     \"wires\": [                         []                     ]                 },                 {                     \"id\": \"dd8835083692860a\",                     \"type\": \"subflow\",                     \"name\": \"SizingAnnotator\",                     \"info\": \"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [                         {                             \"x\": 120,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\"                                 }                             ]                         }                     ],                     \"out\": [                         {                             \"x\": 440,                             \"y\": 60,                             \"wires\": [                                 {                                     \"id\": \"c66966a2d36f06b5\",                                     \"port\": 0                                 }                             ]                         }                     ],                     \"env\": [                         {                             \"name\": \"memory\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"label\": {                                     \"en-US\": \"Memory (MB)\"                                 }                             }                         },                         {                             \"name\": \"timeout\",                             \"type\": \"num\",                             \"value\": \"\",                             \"ui\": {                                 \"icon\": \"font-awesome/fa-times-circle-o\",                                 \"label\": {                                     \"en-US\": \"Timeout (millisecs)\"                                 }                             }                         }                     ],                     \"meta\": {},                     \"color\": \"#E9967A\",                     \"icon\": \"font-awesome/fa-arrows-h\"                 },                 {                     \"id\": \"b87db5bf54ee1249\",                     \"type\": \"comment\",                     \"z\": \"2f92914d720ab974\",                     \"name\": \"\",                     \"info\": \"\",                     \"x\": 190,                     \"y\": 80,                     \"wires\": []                 },                 {                     \"id\": \"2f92914d720ab974\",                     \"type\": \"subflow\",                     \"name\": \"QoS Requirements\",                     \"info\": \"\",                     \"category\": \"PHYSICS Annotators\",                     \"in\": [],                     \"out\": [],                     \"env\": [                         {                             \"name\": \"averageDuration\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"averageInitTime\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"averageWaitTime\",                             \"type\": \"num\",                             \"value\": \"\"                         },                         {                             \"name\": \"windowOfTime\",                             \"type\": \"str\",                             \"value\": \"\"                         }                     ],                     \"meta\": {},                     \"color\": \"#FDF0C2\",                     \"icon\": \"font-awesome/fa-align-left\"                 }             ],             \"artifact\": \"registry.apps.ocphub.physics-faas.eu/custom/george:200\",             \"type\": \"image\"         }     ],     \"displayName\": \"p2app\",     \"branchName\": \"george\" }",
        "payloadType": "json",
        "x": 470,
        "y": 1160,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "ab52b9c7423651e7",
        "type": "file",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "filename": "/data/OrchestratorExample",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1140,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "12cbe09fdd8cec44",
        "type": "json",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 910,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8a56904a703dc0dd",
        "type": "json",
        "z": "75bc5fa0db2ad379",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1150,
        "y": 860,
        "wires": [
            [
                "7fdb5a767e787b5f"
            ]
        ]
    },
    {
        "id": "da04346bdc5774aa",
        "type": "inject",
        "z": "75bc5fa0db2ad379",
        "name": "TEST SM QC GRAPH",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"flows\":[{\"flowID\":\"cc81b2e355ce5694\",\"flowName\":\"QC2\",\"flow\":[{\"id\":\"cc81b2e355ce5694\",\"type\":\"tab\",\"label\":\"QC2\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"ae5de2de81cfad54\",\"type\":\"debug\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"active\":false,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":130,\"y\":820,\"wires\":[]},{\"id\":\"76fc91c809b3024b\",\"type\":\"image\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"width\":\"300\",\"data\":\"payload.image\",\"dataType\":\"msg\",\"thumbnail\":false,\"active\":true,\"pass\":false,\"outputs\":0,\"x\":160,\"y\":860,\"wires\":[]},{\"id\":\"1778a57288f1e208\",\"type\":\"image\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"width\":\"600\",\"data\":\"payload.image\",\"dataType\":\"msg\",\"thumbnail\":false,\"active\":true,\"pass\":false,\"outputs\":0,\"x\":480,\"y\":860,\"wires\":[]},{\"id\":\"39e88c22cf495373\",\"type\":\"http response\",\"z\":\"cc81b2e355ce5694\",\"name\":\"AllOK\",\"statusCode\":\"200\",\"headers\":{},\"x\":1410,\"y\":400,\"wires\":[]},{\"id\":\"9255c806f79d5e3c\",\"type\":\"http response\",\"z\":\"cc81b2e355ce5694\",\"name\":\"CertaintyOK QualityNotOK\",\"statusCode\":\"400\",\"headers\":{},\"x\":1480,\"y\":440,\"wires\":[]},{\"id\":\"28c1998c014e18b0\",\"type\":\"http response\",\"z\":\"cc81b2e355ce5694\",\"name\":\"CertaintyNotOK\",\"statusCode\":\"400\",\"headers\":{},\"x\":1520,\"y\":720,\"wires\":[]},{\"id\":\"a4beb21d363277ca\",\"type\":\"comment\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Notify Operator\",\"info\":\"\",\"x\":1520,\"y\":760,\"wires\":[]},{\"id\":\"b04443e064b94e38\",\"type\":\"debug\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"active\":false,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":1110,\"y\":820,\"wires\":[]},{\"id\":\"c1916b788677cea5\",\"type\":\"image\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"width\":\"600\",\"data\":\"payload.image\",\"dataType\":\"msg\",\"thumbnail\":false,\"active\":true,\"pass\":false,\"outputs\":0,\"x\":1120,\"y\":860,\"wires\":[]},{\"id\":\"b35bd645a6863235\",\"type\":\"subflow:aa40c3c502023f84\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"x\":640,\"y\":460,\"wires\":[[\"4d0646eb0e987866\"],[\"666dcd7d4bac95b3\",\"f2569f083176ae03\"]]},{\"id\":\"e823a15efde8481b\",\"type\":\"subflow:aa40c3c502023f84\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"x\":1080,\"y\":620,\"wires\":[[\"6a17a52884acb602\"],[\"28c1998c014e18b0\"]]},{\"id\":\"973f2de05456700a\",\"type\":\"show-value\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Result (UpperPart)\",\"path\":\"results.0\",\"x\":490,\"y\":800,\"wires\":[[]]},{\"id\":\"96c79f894df8537d\",\"type\":\"show-value\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Result (LowerPart)\",\"path\":\"results.1\",\"x\":490,\"y\":740,\"wires\":[[]]},{\"id\":\"4c564c615ab9bae9\",\"type\":\"show-value\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Expected parts\",\"path\":\"expected\",\"x\":160,\"y\":760,\"wires\":[[]]},{\"id\":\"4d0646eb0e987866\",\"type\":\"subflow:591464d0f904f811\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"x\":1040,\"y\":420,\"wires\":[[\"39e88c22cf495373\",\"16119ed4515be054\"],[\"9255c806f79d5e3c\",\"16119ed4515be054\"]]},{\"id\":\"61f4d67cfa2b8ba8\",\"type\":\"http in\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":140,\"y\":380,\"wires\":[[\"3f55d8dada5b7061\"]]},{\"id\":\"3f55d8dada5b7061\",\"type\":\"http response\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"statusCode\":\"\",\"headers\":{},\"x\":440,\"y\":380,\"wires\":[]},{\"id\":\"e4332c1de7729695\",\"type\":\"http in\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":120,\"y\":460,\"wires\":[[\"23253bb27160603c\",\"c45fc1401c202d24\"]]},{\"id\":\"c45fc1401c202d24\",\"type\":\"change\",\"z\":\"cc81b2e355ce5694\",\"name\":\"OW value -> payload\",\"rules\":[{\"t\":\"set\",\"p\":\"payload\",\"pt\":\"msg\",\"to\":\"msg.payload.value\",\"tot\":\"msg\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":180,\"y\":540,\"wires\":[[\"ae5de2de81cfad54\",\"76fc91c809b3024b\",\"cd6e6ff477813c62\",\"c524b5dcc1cd8ce9\"]]},{\"id\":\"cd6e6ff477813c62\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"1\",\"type\":\"num\"}],\"x\":390,\"y\":460,\"wires\":[[\"b35bd645a6863235\"]]},{\"id\":\"ee3d90e9a1c7f018\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"2\",\"type\":\"num\"}],\"x\":490,\"y\":540,\"wires\":[[\"b35bd645a6863235\"]]},{\"id\":\"d1f2db35a2e177e9\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"2\",\"type\":\"num\"}],\"x\":1070,\"y\":560,\"wires\":[[\"e823a15efde8481b\"]]},{\"id\":\"666dcd7d4bac95b3\",\"type\":\"subflow:61834c2663a6ece6\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"totalcount\",\"value\":\"2\",\"type\":\"num\"},{\"name\":\"position\",\"value\":\"1\",\"type\":\"num\"}],\"x\":690,\"y\":620,\"wires\":[[\"e823a15efde8481b\"]]},{\"id\":\"16119ed4515be054\",\"type\":\"debug\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"active\":false,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":1330,\"y\":360,\"wires\":[]},{\"id\":\"23253bb27160603c\",\"type\":\"debug\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"active\":false,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":290,\"y\":420,\"wires\":[]},{\"id\":\"6d44bd9c795b2ef8\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":680,\"y\":360,\"wires\":[]},{\"id\":\"0d0b17acd84267df\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"},{\"name\":\"timeout\",\"value\":\"300000\",\"type\":\"num\"}],\"x\":880,\"y\":360,\"wires\":[[]]},{\"id\":\"6a17a52884acb602\",\"type\":\"change\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"rules\":[{\"t\":\"set\",\"p\":\"payload[1].complex\",\"pt\":\"msg\",\"to\":\"true\",\"tot\":\"bool\"}],\"action\":\"\",\"property\":\"\",\"from\":\"\",\"to\":\"\",\"reg\":false,\"x\":1350,\"y\":560,\"wires\":[[\"4d0646eb0e987866\"]]},{\"id\":\"1c9e4394410d845a\",\"type\":\"http request\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"\",\"tls\":\"\",\"persist\":false,\"proxy\":\"\",\"insecureHTTPParser\":false,\"authType\":\"basic\",\"senderr\":false,\"headers\":[],\"x\":450,\"y\":1040,\"wires\":[[]]},{\"id\":\"9a08741c3144cee3\",\"type\":\"function\",\"z\":\"cc81b2e355ce5694\",\"name\":\"insert action invocation url - simple\",\"func\":\"var method='simple_qc_aherget_1cf38725-f5f6-4874-a47c-44e7706548c2';\\nmsg.url=`https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/guest/actions/${method}?blocking=true&result=true`;\\n\\n\\nvar creds='17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF';\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":200,\"y\":1040,\"wires\":[[\"1c9e4394410d845a\"]]},{\"id\":\"106e0b74c991d632\",\"type\":\"function\",\"z\":\"cc81b2e355ce5694\",\"name\":\"insert action invocation url - complex\",\"func\":\"var method='complex-qc-v5_aherget_cae54468-41dc-4040-9112-f910b37b9cd0';\\nmsg.url=`https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/guest/actions/${method}?blocking=true&result=true`;\\n\\n\\nvar creds='17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF';\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":870,\"y\":1020,\"wires\":[[\"d1497d8c9d4233d9\"]]},{\"id\":\"d1497d8c9d4233d9\",\"type\":\"http request\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"\",\"tls\":\"\",\"persist\":false,\"proxy\":\"\",\"insecureHTTPParser\":false,\"authType\":\"basic\",\"senderr\":false,\"headers\":[],\"x\":1150,\"y\":1020,\"wires\":[[]]},{\"id\":\"358f56192fe0d987\",\"type\":\"subflow:cc355ea3b5a58c54\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"locality\",\"value\":\"default\",\"type\":\"str\"}],\"x\":320,\"y\":160,\"wires\":[]},{\"id\":\"c524b5dcc1cd8ce9\",\"type\":\"subflow:3352c7dddc9aad6d\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Dynamic simple QC action\",\"env\":[{\"name\":\"dynamicActionName\",\"value\":\"simple_qc_aherget\",\"type\":\"str\"}],\"x\":380,\"y\":660,\"wires\":[[\"ee3d90e9a1c7f018\",\"96c79f894df8537d\",\"973f2de05456700a\",\"1778a57288f1e208\"]]},{\"id\":\"f2569f083176ae03\",\"type\":\"subflow:3352c7dddc9aad6d\",\"z\":\"cc81b2e355ce5694\",\"name\":\"Dynamic complex QC action\",\"env\":[{\"name\":\"dynamicActionName\",\"value\":\"complex_qc_aherget\",\"type\":\"str\"}],\"x\":800,\"y\":560,\"wires\":[[\"d1f2db35a2e177e9\",\"b04443e064b94e38\",\"c1916b788677cea5\"]]},{\"id\":\"b4638640181eac85\",\"type\":\"subflow:789351ac.02c9d\",\"z\":\"cc81b2e355ce5694\",\"name\":\"\",\"env\":[{\"name\":\"maxAttempts\",\"value\":\"20\",\"type\":\"str\"},{\"name\":\"pollPeriod\",\"value\":\"3000\",\"type\":\"num\"},{\"name\":\"method\",\"value\":\"GET\",\"type\":\"str\"},{\"name\":\"functionChain\",\"value\":\"false\",\"type\":\"bool\"}],\"x\":710,\"y\":220,\"wires\":[[],[],[]]},{\"id\":\"5a3afc7aff7f239e\",\"type\":\"function\",\"z\":\"aa40c3c502023f84\",\"name\":\"check certainty\",\"func\":\"// first msg should be the original request, second one from QC\\n\\nif (typeof msg.payload[1].results == 'undefined') {\\n    return [null, msg, {payload: { fill:\\\"red\\\", shape:\\\"dot\\\", text:\\\"No results!\\\" }}]\\n}\\n\\nvar score_total = 0\\nvar score_min = 999\\nfor (const result of msg.payload[1].results)\\n{\\n    score_total += result.score\\n    // old version\\n    if (result.score < score_min)\\n    {\\n        score_min = result.score\\n    }\\n    // new version\\n    if (result.confidence < score_min) {\\n        score_min = result.confidence\\n    }\\n}\\n\\n//const certainty = score_total / msg.payload.results.length\\nconst certainty = score_min\\nif (certainty > 0.8)\\n{\\n    // both messages for inspecting results\\n    return [msg, null, {payload: { fill:\\\"green\\\", shape:\\\"dot\\\", text:\\\"Certainty=\\\" + certainty }}]\\n}\\nelse \\n{\\n    msg.payload = msg.payload[0]\\n    return [null, msg, {payload: { fill:\\\"yellow\\\", shape:\\\"dot\\\", text:\\\"Certainty=\\\" + certainty }}]\\n}\\n\",\"outputs\":3,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":380,\"y\":80,\"wires\":[[],[],[]],\"outputLabels\":[\"\",\"\",\"status\"]},{\"id\":\"10c7aa9f7e3b1b87\",\"type\":\"join\",\"z\":\"aa40c3c502023f84\",\"name\":\"join 2 msg\",\"mode\":\"auto\",\"build\":\"array\",\"property\":\"payload\",\"propertyType\":\"msg\",\"key\":\"topic\",\"joiner\":\"\\\\n\",\"joinerType\":\"str\",\"accumulate\":false,\"timeout\":\"\",\"count\":\"2\",\"reduceRight\":false,\"reduceExp\":\"\",\"reduceInit\":\"\",\"reduceInitType\":\"\",\"reduceFixup\":\"\",\"x\":170,\"y\":80,\"wires\":[[\"5a3afc7aff7f239e\"]]},{\"id\":\"aa40c3c502023f84\",\"type\":\"subflow\",\"name\":\"QC - Check Certainty\",\"info\":\"\",\"category\":\"\",\"in\":[{\"x\":40,\"y\":80,\"wires\":[{\"id\":\"10c7aa9f7e3b1b87\"}]}],\"out\":[{\"x\":570,\"y\":60,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":0}]},{\"x\":570,\"y\":100,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":1}]}],\"env\":[],\"meta\":{},\"color\":\"#DDAA99\",\"outputLabels\":[\"above\",\"below\"],\"status\":{\"x\":540,\"y\":160,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":2}]}},{\"id\":\"5a3afc7aff7f239e\",\"type\":\"function\",\"z\":\"aa40c3c502023f84\",\"name\":\"check certainty\",\"func\":\"// first msg should be the original request, second one from QC\\n\\nif (typeof msg.payload[1].results == 'undefined') {\\n    return [null, msg, {payload: { fill:\\\"red\\\", shape:\\\"dot\\\", text:\\\"No results!\\\" }}]\\n}\\n\\nvar score_total = 0\\nvar score_min = 999\\nfor (const result of msg.payload[1].results)\\n{\\n    score_total += result.score\\n    // old version\\n    if (result.score < score_min)\\n    {\\n        score_min = result.score\\n    }\\n    // new version\\n    if (result.confidence < score_min) {\\n        score_min = result.confidence\\n    }\\n}\\n\\n//const certainty = score_total / msg.payload.results.length\\nconst certainty = score_min\\nif (certainty > 0.8)\\n{\\n    // both messages for inspecting results\\n    return [msg, null, {payload: { fill:\\\"green\\\", shape:\\\"dot\\\", text:\\\"Certainty=\\\" + certainty }}]\\n}\\nelse \\n{\\n    msg.payload = msg.payload[0]\\n    return [null, msg, {payload: { fill:\\\"yellow\\\", shape:\\\"dot\\\", text:\\\"Certainty=\\\" + certainty }}]\\n}\\n\",\"outputs\":3,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":380,\"y\":80,\"wires\":[[],[],[]],\"outputLabels\":[\"\",\"\",\"status\"]},{\"id\":\"10c7aa9f7e3b1b87\",\"type\":\"join\",\"z\":\"aa40c3c502023f84\",\"name\":\"join 2 msg\",\"mode\":\"auto\",\"build\":\"array\",\"property\":\"payload\",\"propertyType\":\"msg\",\"key\":\"topic\",\"joiner\":\"\\\\n\",\"joinerType\":\"str\",\"accumulate\":false,\"timeout\":\"\",\"count\":\"2\",\"reduceRight\":false,\"reduceExp\":\"\",\"reduceInit\":\"\",\"reduceInitType\":\"\",\"reduceFixup\":\"\",\"x\":170,\"y\":80,\"wires\":[[\"5a3afc7aff7f239e\"]]},{\"id\":\"aa40c3c502023f84\",\"type\":\"subflow\",\"name\":\"QC - Check Certainty\",\"info\":\"\",\"category\":\"\",\"in\":[{\"x\":40,\"y\":80,\"wires\":[{\"id\":\"10c7aa9f7e3b1b87\"}]}],\"out\":[{\"x\":570,\"y\":60,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":0}]},{\"x\":570,\"y\":100,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":1}]}],\"env\":[],\"meta\":{},\"color\":\"#DDAA99\",\"outputLabels\":[\"above\",\"below\"],\"status\":{\"x\":540,\"y\":160,\"wires\":[{\"id\":\"5a3afc7aff7f239e\",\"port\":2}]}},{\"id\":\"05898d2a8fe617e7\",\"type\":\"function\",\"z\":\"591464d0f904f811\",\"name\":\"Check Results\",\"func\":\"\\nif (typeof msg.payload[1].results == 'undefined') {\\n    return [null, null, {payload: { fill:\\\"red\\\", shape:\\\"dot\\\", text:\\\"No results!\\\" }}]\\n} else if (typeof msg.payload[0].expected == 'undefined') {\\n    return [null, null, {payload: { fill:\\\"red\\\", shape:\\\"dot\\\", text:\\\"No expected parts!\\\" }}]\\n}\\n\\nvar result_parts = []\\nfor (const result of msg.payload[1].results)\\n{\\n    result_parts.push(result.class)\\n    result_parts.push(result.label)  // new version\\n}\\n\\nfor (const part of msg.payload[0].expected)\\n{\\n    if (!result_parts.includes(part.name))\\n    {\\n        msg.payload = msg.payload[1]\\n        return [null, msg, {payload: { fill:\\\"yellow\\\", shape:\\\"dot\\\", text:\\\"Quality NOT OK! Part \\\"+part.name+\\\" not found in result!\\\" }}]\\n    }\\n}\\n\\nmsg.payload = msg.payload[1]\\nreturn [msg, null, {payload: { fill:\\\"green\\\", shape:\\\"dot\\\", text:\\\"Quality OK!\\\" }}]\",\"outputs\":3,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":220,\"y\":180,\"wires\":[[],[],[]]},{\"id\":\"591464d0f904f811\",\"type\":\"subflow\",\"name\":\"Check Results\",\"info\":\"\",\"category\":\"\",\"in\":[{\"x\":60,\"y\":180,\"wires\":[{\"id\":\"05898d2a8fe617e7\"}]}],\"out\":[{\"x\":380,\"y\":120,\"wires\":[{\"id\":\"05898d2a8fe617e7\",\"port\":0}]},{\"x\":400,\"y\":180,\"wires\":[{\"id\":\"05898d2a8fe617e7\",\"port\":1}]}],\"env\":[],\"meta\":{},\"color\":\"#DDAA99\",\"outputLabels\":[\"OK\",\"Not OK\"],\"status\":{\"x\":360,\"y\":240,\"wires\":[{\"id\":\"05898d2a8fe617e7\",\"port\":2}]}},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"6cf5b4224f0daa69\",\"type\":\"function\",\"z\":\"61834c2663a6ece6\",\"name\":\"create artificial msg.parts\",\"func\":\"\\n//need to push the new parts down a LIFO structure?\\nif (msg.hasOwnProperty(\\\"parts\\\")){\\n    var parts={};\\n    parts=msg.parts;\\n    delete msg.parts;\\n    msg.parts={};\\n    msg.parts.parts=parts;\\n    msg.parts.id=msg._msgid;\\n} else {\\n    msg.parts={};\\n    msg.parts.id=msg._msgid;\\n}\\n\\nmsg.parts.count=env.get('totalcount');\\nmsg.parts.len=1;\\nmsg.parts.index=env.get('position')-1;\\nmsg.parts.type=\\\"array\\\";\\n\\n//msg.topic='topic2';\\n\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":330,\"y\":120,\"wires\":[[]]},{\"id\":\"61834c2663a6ece6\",\"type\":\"subflow\",\"name\":\"BranchJoin\",\"info\":\"\\nTotal count is the total number of branches expected to join.\\n\\nPosition in sequence should be from 1 to total count.\\n\\nBoth variables are set via the node UI.\",\"category\":\"PHYSICS\",\"in\":[{\"x\":140,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\"}]}],\"out\":[{\"x\":520,\"y\":120,\"wires\":[{\"id\":\"6cf5b4224f0daa69\",\"port\":0}]}],\"env\":[{\"name\":\"totalcount\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Total Count\"}}},{\"name\":\"position\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Position in sequence\"}}}],\"meta\":{},\"color\":\"#FFF0F0\"},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"a1b2b984f0c8eebd\",\"type\":\"comment\",\"z\":\"cc355ea3b5a58c54\",\"name\":\"README\",\"info\":\"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name \",\"x\":400,\"y\":220,\"wires\":[]},{\"id\":\"cc355ea3b5a58c54\",\"type\":\"subflow\",\"name\":\"Locality(flow level) (2)\",\"info\":\"\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"locality\",\"type\":\"str\",\"value\":\"\"}],\"meta\":{},\"color\":\"#D8BFD8\",\"icon\":\"font-awesome/fa-braille\"},{\"id\":\"a80b2fa1299e3bb8\",\"type\":\"tls-config\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"cert\":\"\",\"key\":\"\",\"ca\":\"\",\"certname\":\"\",\"keyname\":\"\",\"caname\":\"\",\"servername\":\"\",\"verifyservercert\":false,\"alpnprotocol\":\"\"},{\"id\":\"b9c86339cffd54ea\",\"type\":\"http request\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"\",\"tls\":\"a80b2fa1299e3bb8\",\"persist\":false,\"proxy\":\"\",\"authType\":\"\",\"x\":370,\"y\":180,\"wires\":[[\"27c3b0af40ccb4e0\"]]},{\"id\":\"60d351e91c4f1f19\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"create dynamic\",\"func\":\"//msg.headers={};\\n\\n\\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\\nconst prophost='__'+env.get('actionName')+'_HOST';\\nconst propcreds='__'+env.get('actionName')+'_CREDS';\\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\\n\\n//retrieve from incoming msg params\\nmsg.namespace=msg.payload.value[propnamespace];\\nmsg.creds=msg.payload.value[propcreds];\\nmsg.baseurl=msg.payload.value[prophost];\\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\\n\\n//delete info so that it does not leak into the newly called function, we dont know how the payload \\n//is going to be used after that\\n\\ndelete msg.payload.value[propcreds];\\ndelete msg.payload.value[propnamespace];\\ndelete msg.payload.value[prophost]\\n\\n\\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \\n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\\nvar input=msg.payload.value;\\nmsg.payload={};\\nmsg.payload=input;\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":200,\"y\":180,\"wires\":[[\"b9c86339cffd54ea\"]]},{\"id\":\"27c3b0af40ccb4e0\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"add activation id\",\"func\":\"\\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\\n//msg.oldheaders=msg.headers;\\n//msg.headers={};\\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":540,\"y\":180,\"wires\":[[\"5e15f34e1caa9fe7\"]]},{\"id\":\"5e15f34e1caa9fe7\",\"type\":\"subflow:789351ac.02c9d\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"env\":[{\"name\":\"maxAttempts\",\"value\":\"20\",\"type\":\"str\"},{\"name\":\"pollPeriod\",\"value\":\"3000\",\"type\":\"num\"},{\"name\":\"method\",\"value\":\"GET\",\"type\":\"str\"},{\"name\":\"functionChain\",\"value\":\"false\",\"type\":\"bool\"}],\"x\":610,\"y\":260,\"wires\":[[\"b84a3ec8968b0617\",\"47a494805843dcd7\"],[],[]]},{\"id\":\"b84a3ec8968b0617\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"reduce output\",\"func\":\"//msg.headers={};\\nvar response=msg.payload.response;\\nmsg.payload={};\\nmsg.payload.response=response;\\n\\nreturn msg;\\n//return msg.oldmsg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":840,\"y\":280,\"wires\":[[]]},{\"id\":\"47a494805843dcd7\",\"type\":\"debug\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":610,\"y\":60,\"wires\":[]},{\"id\":\"3352c7dddc9aad6d\",\"type\":\"subflow\",\"name\":\"Dynamic OW action\",\"info\":\"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\\n\\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\\n\\n\\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\\n$ACTIONNAME_OW_CREDS=user:pwd\\n\\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\\n\\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\\n\\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\\na typical nodered environment. However the retrieved information from the environment variables prevail\\nover the set ones in the UI.\\n\\nPENDING: check how to pass token from UI to http request node\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":80,\"y\":180,\"wires\":[{\"id\":\"60d351e91c4f1f19\"}]}],\"out\":[{\"x\":980,\"y\":280,\"wires\":[{\"id\":\"b84a3ec8968b0617\",\"port\":0}]}],\"env\":[{\"name\":\"dynamicActionName\",\"type\":\"str\",\"value\":\"dockeraction\"}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"node-red/function.svg\"},{\"id\":\"a80b2fa1299e3bb8\",\"type\":\"tls-config\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"cert\":\"\",\"key\":\"\",\"ca\":\"\",\"certname\":\"\",\"keyname\":\"\",\"caname\":\"\",\"servername\":\"\",\"verifyservercert\":false,\"alpnprotocol\":\"\"},{\"id\":\"b9c86339cffd54ea\",\"type\":\"http request\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"method\":\"POST\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"\",\"tls\":\"a80b2fa1299e3bb8\",\"persist\":false,\"proxy\":\"\",\"authType\":\"\",\"x\":370,\"y\":180,\"wires\":[[\"27c3b0af40ccb4e0\"]]},{\"id\":\"60d351e91c4f1f19\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"create dynamic\",\"func\":\"//msg.headers={};\\n\\n\\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\\nconst prophost='__'+env.get('actionName')+'_HOST';\\nconst propcreds='__'+env.get('actionName')+'_CREDS';\\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\\n\\n//retrieve from incoming msg params\\nmsg.namespace=msg.payload.value[propnamespace];\\nmsg.creds=msg.payload.value[propcreds];\\nmsg.baseurl=msg.payload.value[prophost];\\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\\n\\n//delete info so that it does not leak into the newly called function, we dont know how the payload \\n//is going to be used after that\\n\\ndelete msg.payload.value[propcreds];\\ndelete msg.payload.value[propnamespace];\\ndelete msg.payload.value[prophost]\\n\\n\\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \\n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\\nvar input=msg.payload.value;\\nmsg.payload={};\\nmsg.payload=input;\\n\\nmsg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":200,\"y\":180,\"wires\":[[\"b9c86339cffd54ea\"]]},{\"id\":\"27c3b0af40ccb4e0\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"add activation id\",\"func\":\"\\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\\n//msg.oldheaders=msg.headers;\\n//msg.headers={};\\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":540,\"y\":180,\"wires\":[[\"5e15f34e1caa9fe7\"]]},{\"id\":\"5e15f34e1caa9fe7\",\"type\":\"subflow:789351ac.02c9d\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"env\":[{\"name\":\"maxAttempts\",\"value\":\"20\",\"type\":\"str\"},{\"name\":\"pollPeriod\",\"value\":\"3000\",\"type\":\"num\"},{\"name\":\"method\",\"value\":\"GET\",\"type\":\"str\"},{\"name\":\"functionChain\",\"value\":\"false\",\"type\":\"bool\"}],\"x\":610,\"y\":260,\"wires\":[[\"b84a3ec8968b0617\",\"47a494805843dcd7\"],[],[]]},{\"id\":\"b84a3ec8968b0617\",\"type\":\"function\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"reduce output\",\"func\":\"//msg.headers={};\\nvar response=msg.payload.response;\\nmsg.payload={};\\nmsg.payload.response=response;\\n\\nreturn msg;\\n//return msg.oldmsg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":840,\"y\":280,\"wires\":[[]]},{\"id\":\"47a494805843dcd7\",\"type\":\"debug\",\"z\":\"3352c7dddc9aad6d\",\"name\":\"\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"false\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":610,\"y\":60,\"wires\":[]},{\"id\":\"3352c7dddc9aad6d\",\"type\":\"subflow\",\"name\":\"Dynamic OW action\",\"info\":\"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\\n\\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\\n\\n\\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\\n$ACTIONNAME_OW_CREDS=user:pwd\\n\\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\\n\\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\\n\\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\\na typical nodered environment. However the retrieved information from the environment variables prevail\\nover the set ones in the UI.\\n\\nPENDING: check how to pass token from UI to http request node\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":80,\"y\":180,\"wires\":[{\"id\":\"60d351e91c4f1f19\"}]}],\"out\":[{\"x\":980,\"y\":280,\"wires\":[{\"id\":\"b84a3ec8968b0617\",\"port\":0}]}],\"env\":[{\"name\":\"dynamicActionName\",\"type\":\"str\",\"value\":\"dockeraction\"}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"node-red/function.svg\"},{\"id\":\"2934f390.711324\",\"type\":\"tls-config\",\"z\":\"789351ac.02c9d\",\"name\":\"\",\"cert\":\"\",\"key\":\"\",\"ca\":\"\",\"certname\":\"\",\"keyname\":\"\",\"caname\":\"\",\"servername\":\"\",\"verifyservercert\":false},{\"id\":\"7d194c10.33b51c\",\"type\":\"function\",\"z\":\"789351ac.02c9d\",\"name\":\"defaults+activation id\",\"func\":\"\\nif (msg.hasOwnProperty('maxAttempts')){\\n    msg.iterations=msg.maxAttempts;\\n} else {\\n    msg.iterations=env.get('maxAttempts');\\n}\\n//needed to reset the iterations after function chaining\\nmsg.defaultAttempts=msg.iterations;\\n\\nif (msg.hasOwnProperty('pollPeriod')){\\n    \\n} else {\\n    msg.pollPeriod=env.get('pollPeriod');\\n}\\n\\nif (msg.hasOwnProperty('method')){\\n    \\n} else {\\n    msg.method=env.get('method');\\n}\\n\\nif (msg.hasOwnProperty('url')){\\n    \\n} else {\\n    msg.url=env.get('url');\\n}\\n\\nif (msg.hasOwnProperty('retryCode')){\\n    \\n} else {\\n    msg.retryCode=env.get('retryCode');\\n}\\n\\nif (msg.hasOwnProperty('acceptCode')){\\n    \\n} else {\\n    msg.acceptCode=env.get('acceptCode');\\n}\\n\\nif (msg.hasOwnProperty('creds')){\\n    \\n} else {\\n    msg.creds=env.get('creds');\\n}\\n\\nif (msg.hasOwnProperty('functionChain')){\\n    \\n} else {\\n    msg.functionChain=env.get('functionChain');\\n}\\n\\nif (msg.hasOwnProperty('inputData')){\\n    if (msg.inputData.hasOwnProperty('creds')){\\n        msg.creds=msg.inputData.creds;\\n    }\\n}\\n\\n\\n\\nmsg.delay=msg.pollPeriod;\\nmsg.start=Date.now();\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":200,\"y\":160,\"wires\":[[\"cad17b04.a2b4d8\"]]},{\"id\":\"4be3f205.3e8dc4\",\"type\":\"function\",\"z\":\"789351ac.02c9d\",\"name\":\"iterations--\",\"func\":\"msg.iterations=msg.iterations-1;\\n/*\\nif (flow.get('stop')==true){\\n    msg.iterations=-1;\\n}*/\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":350,\"y\":300,\"wires\":[[\"c2cf68b7.263d4\",\"d8305759.866988\"]]},{\"id\":\"c2cf68b7.263d4\",\"type\":\"switch\",\"z\":\"789351ac.02c9d\",\"name\":\"if iterations finished\",\"property\":\"iterations\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"gte\",\"v\":\"1\",\"vt\":\"num\"},{\"t\":\"lt\",\"v\":\"1\",\"vt\":\"num\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":2,\"x\":550,\"y\":300,\"wires\":[[\"cad17b04.a2b4d8\"],[]]},{\"id\":\"76299695.812bd8\",\"type\":\"comment\",\"z\":\"789351ac.02c9d\",\"name\":\"SUCCESS\",\"info\":\"\",\"x\":1100,\"y\":60,\"wires\":[]},{\"id\":\"48093072.b17a6\",\"type\":\"comment\",\"z\":\"789351ac.02c9d\",\"name\":\"FINAL FAIL\",\"info\":\"\",\"x\":890,\"y\":360,\"wires\":[]},{\"id\":\"d5960f2f.2e9448\",\"type\":\"delay\",\"z\":\"789351ac.02c9d\",\"name\":\"delay\",\"pauseType\":\"delayv\",\"timeout\":\"5\",\"timeoutUnits\":\"seconds\",\"rate\":\"1\",\"nbRateUnits\":\"1\",\"rateUnits\":\"second\",\"randomFirst\":\"1\",\"randomLast\":\"5\",\"randomUnits\":\"seconds\",\"drop\":false,\"outputs\":1,\"x\":170,\"y\":300,\"wires\":[[\"4be3f205.3e8dc4\"]]},{\"id\":\"471b3d64.265894\",\"type\":\"http request\",\"z\":\"789351ac.02c9d\",\"name\":\"\",\"method\":\"GET\",\"ret\":\"obj\",\"paytoqs\":\"ignore\",\"url\":\"\",\"tls\":\"2934f390.711324\",\"persist\":false,\"proxy\":\"\",\"authType\":\"\",\"x\":590,\"y\":160,\"wires\":[[\"8694180b.ec1c68\"]]},{\"id\":\"8694180b.ec1c68\",\"type\":\"switch\",\"z\":\"789351ac.02c9d\",\"name\":\"Status code check\",\"property\":\"statusCode\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"lte\",\"v\":\"acceptCode\",\"vt\":\"msg\"},{\"t\":\"gte\",\"v\":\"retryCode\",\"vt\":\"msg\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":2,\"x\":810,\"y\":160,\"wires\":[[\"f9d0aba7.72382\"],[\"d5960f2f.2e9448\"]]},{\"id\":\"ef03414f.ad9d78\",\"type\":\"comment\",\"z\":\"789351ac.02c9d\",\"name\":\"RETRY FAIL\",\"info\":\"\",\"x\":890,\"y\":260,\"wires\":[]},{\"id\":\"66bbc0cf.0c62f\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"BEFORE AUTH\",\"active\":true,\"tosidebar\":true,\"console\":false,\"tostatus\":false,\"complete\":\"true\",\"targetType\":\"full\",\"x\":370,\"y\":100,\"wires\":[]},{\"id\":\"13791c2d.8cea7c\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"URL\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"url\",\"targetType\":\"msg\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":580,\"y\":100,\"wires\":[]},{\"id\":\"cad17b04.a2b4d8\",\"type\":\"function\",\"z\":\"789351ac.02c9d\",\"name\":\"add auth\",\"func\":\"msg.headers={};\\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\\nmsg.headers = {\\n    \\\"Authorization\\\": auth\\n}\\n\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":420,\"y\":160,\"wires\":[[\"471b3d64.265894\",\"13791c2d.8cea7c\"]]},{\"id\":\"f2b7c4e4.a24c3\",\"type\":\"function\",\"z\":\"789351ac.02c9d\",\"name\":\"adapt to new activation\",\"func\":\"\\n\\nmsg.url=msg.payload.response.result.newActivationIDURL;\\nmsg.iterations=msg.defaultAttempts+1;\\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":1500,\"y\":160,\"wires\":[[\"d5960f2f.2e9448\",\"ee1dbf44.7368f8\"]]},{\"id\":\"c338e47b.b00ed\",\"type\":\"comment\",\"z\":\"789351ac.02c9d\",\"name\":\"FUNCTION CHAIN CONTINUATION\",\"info\":\"\",\"x\":1240,\"y\":240,\"wires\":[]},{\"id\":\"ee1dbf44.7368f8\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"AFTER CONTINUATION IN Poll2Push\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"statusVal\":\"\",\"statusType\":\"auto\",\"x\":1420,\"y\":300,\"wires\":[]},{\"id\":\"f9d0aba7.72382\",\"type\":\"switch\",\"z\":\"789351ac.02c9d\",\"name\":\"is Chain\",\"property\":\"functionChain\",\"propertyType\":\"msg\",\"rules\":[{\"t\":\"false\"},{\"t\":\"true\"}],\"checkall\":\"true\",\"repair\":false,\"outputs\":2,\"x\":1020,\"y\":160,\"wires\":[[],[\"6da1eea0.969368\",\"1bbc6fa0.4879c\"]]},{\"id\":\"6da1eea0.969368\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"RESULT STATUS\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"x\":1100,\"y\":300,\"wires\":[]},{\"id\":\"f20a68d.9711598\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"AFTER CODE CHECK\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"functionChain\",\"targetType\":\"msg\",\"x\":890,\"y\":100,\"wires\":[]},{\"id\":\"36905e62.dfad92\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"TOP1\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"x\":1120,\"y\":100,\"wires\":[]},{\"id\":\"9610a737.bf275\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"TOP2\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"x\":1300,\"y\":100,\"wires\":[]},{\"id\":\"c52af08f.756ee8\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"TOP3\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"payload\",\"targetType\":\"msg\",\"x\":1600,\"y\":100,\"wires\":[]},{\"id\":\"1bbc6fa0.4879c\",\"type\":\"function\",\"z\":\"789351ac.02c9d\",\"name\":\"compare completion\",\"func\":\"console.log('IN COMPARE COMPLETION',msg.payload.response);\\nif (msg.payload.response.result.status==='Completed'){\\n    return [msg,null];\\n} else {\\n    return [null,msg];\\n}\\n\",\"outputs\":2,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":1240,\"y\":160,\"wires\":[[\"c52af08f.756ee8\"],[\"f2b7c4e4.a24c3\"]]},{\"id\":\"d8305759.866988\",\"type\":\"debug\",\"z\":\"789351ac.02c9d\",\"name\":\"URL\",\"active\":true,\"tosidebar\":true,\"console\":true,\"tostatus\":false,\"complete\":\"iterations\",\"targetType\":\"msg\",\"x\":500,\"y\":380,\"wires\":[]},{\"id\":\"789351ac.02c9d\",\"type\":\"subflow\",\"name\":\"PollTOPushConverterFC\",\"info\":\"This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\\n\\nThe according function should return as a response the following structure:\\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \\n\\nThe node also can get credentials from the msg.creds field of the input message.\\n\\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\\n\\nThe node has three outputs:\\n - Output 1 indicates successful finalization of the API call\\n - Output 2 indicates intermediate failure and was added to return the reason for failure\\n - Output 3 indicates final failure after max attempts\\n\\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\\n\\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\\n\\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\\n\\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\\n \\n\",\"category\":\"PHYSICS Helpers\",\"in\":[{\"x\":60,\"y\":160,\"wires\":[{\"id\":\"7d194c10.33b51c\"}]}],\"out\":[{\"x\":1380,\"y\":40,\"wires\":[{\"id\":\"f9d0aba7.72382\",\"port\":0},{\"id\":\"1bbc6fa0.4879c\",\"port\":0}]},{\"x\":780,\"y\":260,\"wires\":[{\"id\":\"c2cf68b7.263d4\",\"port\":0}]},{\"x\":780,\"y\":360,\"wires\":[{\"id\":\"c2cf68b7.263d4\",\"port\":1}]}],\"env\":[{\"name\":\"maxAttempts\",\"type\":\"str\",\"value\":\"3\"},{\"name\":\"pollPeriod\",\"type\":\"str\",\"value\":\"3000\"},{\"name\":\"method\",\"type\":\"str\",\"value\":\"\"},{\"name\":\"url\",\"type\":\"str\",\"value\":\"http://10.100.59.182:3233/api/v1/namespaces/_/activations/\"},{\"name\":\"retryCode\",\"type\":\"num\",\"value\":\"202\"},{\"name\":\"acceptCode\",\"type\":\"num\",\"value\":\"200\"},{\"name\":\"functionChain\",\"type\":\"bool\",\"value\":\"true\"}],\"meta\":{},\"color\":\"#b4e8a9\"}],\"artifact\":\"registry.apps.ocphub.physics-faas.eu/custom/aherget:10\",\"type\":\"image\"},{\"flowID\":\"48c8d5fcf45af123\",\"flowName\":\"simple_qc\",\"flow\":[{\"id\":\"48c8d5fcf45af123\",\"type\":\"tab\",\"label\":\"simple_qc\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"3e4008afcef21679\",\"type\":\"subflow:b5d1dcf74fe240aa\",\"z\":\"48c8d5fcf45af123\",\"name\":\"\",\"env\":[{\"name\":\"customImage\",\"value\":\"registry.apps.ocphub.physics-faas.eu/external-uploaded/physics-test-aherget:v1\",\"type\":\"str\"}],\"x\":790,\"y\":360,\"wires\":[]},{\"id\":\"626cb7ccd6b044a6\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"48c8d5fcf45af123\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"}],\"x\":740,\"y\":440,\"wires\":[[]]},{\"id\":\"f9bb1731578b6903\",\"type\":\"subflow:16204fd1ca5591c5\",\"z\":\"48c8d5fcf45af123\",\"name\":\"\",\"env\":[{\"name\":\"goal\",\"value\":\"availability\",\"type\":\"str\"}],\"x\":680,\"y\":240,\"wires\":[]},{\"id\":\"25e8c046a47e4bfe\",\"type\":\"comment\",\"z\":\"b5d1dcf74fe240aa\",\"name\":\"Subflows need at least 1 node inside\",\"info\":\"\",\"x\":250,\"y\":80,\"wires\":[]},{\"id\":\"b5d1dcf74fe240aa\",\"type\":\"subflow\",\"name\":\"Custom Function Image Importer\",\"info\":\"This node includes the necessary fields in order to declare an external image as an existing Openwhisk action. Contrary to the Function Importer node, it assumes that the function registration will be performed to a known and existing OW instance from a flow inside Node-RED.\\n\\nThe external image needs to be ready to be executed on Openwhisk, i.e. implementing the necessary POST /init and /run methods on port 8080.\\n\\nAlternatively it can be included in a flow as a regular node, in which case it does not affect the msg.payload and creates a msg.annotations object that includes the defined values.\\n\\nThis can later on be used in order to perform the necessary actions from other helper flows.\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"customImage\",\"type\":\"str\",\"value\":\"\"}],\"meta\":{},\"color\":\"#FFCC66\",\"icon\":\"font-awesome/fa-arrow-right\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"8303025f7940685a\",\"type\":\"comment\",\"z\":\"16204fd1ca5591c5\",\"name\":\"README\",\"info\":\"The node is used to set the desired optimization goal: performance/energy\",\"x\":340,\"y\":160,\"wires\":[]},{\"id\":\"16204fd1ca5591c5\",\"type\":\"subflow\",\"name\":\"Optimization Goal (Flow Level) (2)\",\"info\":\"\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"goal\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"performance\"},\"v\":\"performance\"},{\"l\":{\"en-US\":\"energy\"},\"v\":\"energy\"},{\"l\":{\"en-US\":\"availability\"},\"v\":\"availability\"}]}}}],\"meta\":{},\"color\":\"#FFAAAA\",\"icon\":\"font-awesome/fa-sliders\"}],\"artifact\":\"registry.apps.ocphub.physics-faas.eu/custom/aherget:7\",\"type\":\"image\"},{\"flowID\":\"ef04bbdffd041a11\",\"flowName\":\"complex_qc\",\"flow\":[{\"id\":\"ef04bbdffd041a11\",\"type\":\"tab\",\"label\":\"complex_qc\",\"disabled\":false,\"info\":\"\",\"env\":[]},{\"id\":\"cc1334c9cc8313a3\",\"type\":\"subflow:b5d1dcf74fe240aa\",\"z\":\"ef04bbdffd041a11\",\"name\":\"\",\"env\":[{\"name\":\"customImage\",\"value\":\"registry.apps.ocphub.physics-faas.eu/external-uploaded/phy-qc-compl-aherget:v5\",\"type\":\"str\"}],\"x\":890,\"y\":420,\"wires\":[]},{\"id\":\"b953f753df04ebc4\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"ef04bbdffd041a11\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"}],\"x\":840,\"y\":500,\"wires\":[[]]},{\"id\":\"48fb6bfa6a7412be\",\"type\":\"subflow:16204fd1ca5591c5\",\"z\":\"ef04bbdffd041a11\",\"name\":\"\",\"env\":[{\"name\":\"goal\",\"value\":\"performance\",\"type\":\"str\"}],\"x\":600,\"y\":220,\"wires\":[]},{\"id\":\"25e8c046a47e4bfe\",\"type\":\"comment\",\"z\":\"b5d1dcf74fe240aa\",\"name\":\"Subflows need at least 1 node inside\",\"info\":\"\",\"x\":250,\"y\":80,\"wires\":[]},{\"id\":\"b5d1dcf74fe240aa\",\"type\":\"subflow\",\"name\":\"Custom Function Image Importer\",\"info\":\"This node includes the necessary fields in order to declare an external image as an existing Openwhisk action. Contrary to the Function Importer node, it assumes that the function registration will be performed to a known and existing OW instance from a flow inside Node-RED.\\n\\nThe external image needs to be ready to be executed on Openwhisk, i.e. implementing the necessary POST /init and /run methods on port 8080.\\n\\nAlternatively it can be included in a flow as a regular node, in which case it does not affect the msg.payload and creates a msg.annotations object that includes the defined values.\\n\\nThis can later on be used in order to perform the necessary actions from other helper flows.\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"customImage\",\"type\":\"str\",\"value\":\"\"}],\"meta\":{},\"color\":\"#FFCC66\",\"icon\":\"font-awesome/fa-arrow-right\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"8303025f7940685a\",\"type\":\"comment\",\"z\":\"16204fd1ca5591c5\",\"name\":\"README\",\"info\":\"The node is used to set the desired optimization goal: performance/energy\",\"x\":340,\"y\":160,\"wires\":[]},{\"id\":\"16204fd1ca5591c5\",\"type\":\"subflow\",\"name\":\"Optimization Goal (Flow Level) (2)\",\"info\":\"\",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"goal\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"performance\"},\"v\":\"performance\"},{\"l\":{\"en-US\":\"energy\"},\"v\":\"energy\"},{\"l\":{\"en-US\":\"availability\"},\"v\":\"availability\"}]}}}],\"meta\":{},\"color\":\"#FFAAAA\",\"icon\":\"font-awesome/fa-sliders\"}],\"artifact\":\"registry.apps.ocphub.physics-faas.eu/custom/aherget:8\",\"type\":\"image\"}],\"displayName\":\"\",\"branchName\":\"aherget\"}",
        "payloadType": "json",
        "x": 560,
        "y": 1260,
        "wires": [
            [
                "b9b1d7ce2ee4ab48"
            ]
        ]
    },
    {
        "id": "88498354456c8fbb",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "SET TARGET URL and CREDENTIALS",
        "props": [
            {
                "p": "myUrl",
                "v": "10.100.59.183:1881",
                "vt": "str"
            },
            {
                "p": "username",
                "v": "admin",
                "vt": "str"
            },
            {
                "p": "password",
                "v": "bigds",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "fadb1d1b8b7541e6"
            ]
        ]
    },
    {
        "id": "fadb1d1b8b7541e6",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "auth_prep",
        "func": "msg.payload = `client_id=node-red-admin&grant_type=password&scope=*&username=${msg.username}&password=${msg.password}`;\nmsg.headers = {\n    \"Content-Type\": \"application/x-www-form-urlencoded\"\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 180,
        "wires": [
            [
                "d24935614c83db0d"
            ]
        ]
    },
    {
        "id": "d24935614c83db0d",
        "type": "http request",
        "z": "da309c1626dccde8",
        "name": "Auth to target Node-RED",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "{{myUrl}}/auth/token",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 650,
        "y": 160,
        "wires": [
            [
                "32190c23d5cb8bea",
                "adae8d257a7fc0ee"
            ]
        ]
    },
    {
        "id": "32190c23d5cb8bea",
        "type": "change",
        "z": "da309c1626dccde8",
        "name": "Set access",
        "rules": [
            {
                "t": "set",
                "p": "access_token",
                "pt": "flow",
                "to": "payload.access_token",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "username",
                "pt": "flow",
                "to": "username",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "password",
                "pt": "flow",
                "to": "password",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "target_url",
                "pt": "flow",
                "to": "myUrl",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 870,
        "y": 160,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "adae8d257a7fc0ee",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "MSG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 200,
        "wires": []
    },
    {
        "id": "5a0025f4901d044b",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "Authentication for target NODE-RED Auth API",
        "info": "",
        "x": 220,
        "y": 120,
        "wires": []
    },
    {
        "id": "1bf0817082422b56",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 300,
        "wires": [
            [
                "3f8679cba15f1ec3"
            ]
        ]
    },
    {
        "id": "48da7b84a29d170d",
        "type": "http request",
        "z": "da309c1626dccde8",
        "name": "Flows Test",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{myUrl}}/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 370,
        "y": 300,
        "wires": [
            [
                "5a11d47e0565edd8",
                "2e929fd3ed790657"
            ]
        ]
    },
    {
        "id": "2e929fd3ed790657",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "MSG",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 300,
        "wires": []
    },
    {
        "id": "3f8679cba15f1ec3",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "prep",
        "func": "msg.myUrl = flow.get(\"target_url\");\nmsg.headers = {\n   \"Authorization\":  `Bearer ${flow.get(\"access_token\")}`\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 300,
        "wires": [
            [
                "48da7b84a29d170d"
            ]
        ]
    },
    {
        "id": "8897c0319e2d8a2b",
        "type": "file",
        "z": "da309c1626dccde8",
        "name": "Flows Output",
        "filename": "/mnt/d/Users/Stelios/Desktop/app_semantic_tests/RemoteFlows.json",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "utf8",
        "x": 650,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "5a11d47e0565edd8",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "beautify",
        "func": "msg.payload = {\"allFlows\": msg.payload}\n\nmsg.payload = JSON.stringify(msg.payload, null, 2)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 360,
        "wires": [
            [
                "8897c0319e2d8a2b"
            ]
        ]
    },
    {
        "id": "e94231e67204af92",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "clear",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 460,
        "wires": [
            [
                "3c93039e9058b6f5"
            ]
        ]
    },
    {
        "id": "3c93039e9058b6f5",
        "type": "change",
        "z": "da309c1626dccde8",
        "name": "Set Subflows",
        "rules": [
            {
                "t": "set",
                "p": "SubFlows",
                "pt": "flow",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "flowAnnotators",
                "pt": "flow",
                "to": "{}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 260,
        "y": 460,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "3b25b238b61c3fcd",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "TEST target NODE-RED, get flows",
        "info": "",
        "x": 190,
        "y": 260,
        "wires": []
    },
    {
        "id": "44ecf011703cf431",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "SET SUBFLOWS",
        "info": "",
        "x": 130,
        "y": 420,
        "wires": []
    },
    {
        "id": "1e82ad79db03e6e4",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Get Sub-Flows",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0.2",
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 580,
        "wires": [
            [
                "1a171fd05db0ed73"
            ]
        ]
    },
    {
        "id": "89a3050fecff5830",
        "type": "http request",
        "z": "da309c1626dccde8",
        "name": "Flows, all",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{myUrl}}/flows",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 460,
        "y": 580,
        "wires": [
            [
                "8a5f4014faa25fb3"
            ]
        ]
    },
    {
        "id": "1a171fd05db0ed73",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "prep",
        "func": "msg.myUrl = flow.get(\"target_url\");\nmsg.headers = {\n   \"Authorization\":  `Bearer ${flow.get(\"access_token\")}`\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 580,
        "wires": [
            [
                "89a3050fecff5830"
            ]
        ]
    },
    {
        "id": "8a5f4014faa25fb3",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "Filter and index subflows",
        "func": "msg.payload = {\"allFlows\": msg.payload};\nconst expression = jsonata(\"allFlows[type='subflow']\");\nconst results = expression.evaluate(msg.payload);\n\nmsg.payload = {};\nmsg.annotators = {};\nfor (const subflow of results){\n    msg.payload[subflow.id] = subflow;\n    if(subflow.category == \"PHYSICS Annotators\"){\n        msg.annotators[subflow.id] = subflow;\n    }\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "jsonata",
                "module": "jsonata"
            }
        ],
        "x": 650,
        "y": 580,
        "wires": [
            [
                "f2738807754ea794",
                "c006d64d242686bd",
                "0c4bb2cdbef575d3"
            ]
        ]
    },
    {
        "id": "f2738807754ea794",
        "type": "change",
        "z": "da309c1626dccde8",
        "name": "Set Subflows",
        "rules": [
            {
                "t": "set",
                "p": "SubFlows",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "flowAnnotators",
                "pt": "flow",
                "to": "annotators",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 580,
        "wires": [
            [
                "90d281d1569362ab"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "0c4bb2cdbef575d3",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "Annotators",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "annotators",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 540,
        "wires": []
    },
    {
        "id": "90d281d1569362ab",
        "type": "switch",
        "z": "da309c1626dccde8",
        "name": "Continue with function",
        "property": "tempFlowData",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1180,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "c006d64d242686bd",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "Subflows",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 500,
        "wires": []
    },
    {
        "id": "9b53b21aea3eac78",
        "type": "change",
        "z": "da309c1626dccde8",
        "name": "tempFlowData",
        "rules": [
            {
                "t": "set",
                "p": "tempFlowData",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 680,
        "wires": [
            [
                "1a171fd05db0ed73"
            ]
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "1ff73a345a65b226",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "Get, filter and index subflows",
        "info": "",
        "x": 160,
        "y": 540,
        "wires": []
    },
    {
        "id": "0d810790aff10754",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Set Utils",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 400,
        "y": 40,
        "wires": [
            [
                "4c63e4e18379fcfa"
            ]
        ]
    },
    {
        "id": "30fd03dacb287b88",
        "type": "change",
        "z": "da309c1626dccde8",
        "name": "Set utility functions",
        "rules": [
            {
                "t": "set",
                "p": "utilFunctions",
                "pt": "flow",
                "to": "utilFunctions",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 710,
        "y": 40,
        "wires": [
            []
        ],
        "icon": "font-awesome/fa-save"
    },
    {
        "id": "4c63e4e18379fcfa",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "Utilities",
        "func": "// Check if node type is supported\nconst supportedNodeType = (nodeType) => {\n    if(typeof nodeType != \"string\"){\n        console.error(`supportedNodeType: nodeType input ${nodeType} is not a string!`);\n        return false;\n    }\n    \n    if(!!flow.get(\"supportedNodes\")[nodeType]){\n        return true;\n    }\n        \n    if(nodeType.includes(\":\")){\n        const localTypes = nodeType.split(\":\");\n        for(const localType of localTypes){\n            if (supportedNodeType(localType)){\n                return true;\n            }\n        }\n        return false;\n    }\n    \n    if(nodeType.includes(\" \")){\n        const localTypes = nodeType.split(\" \");\n        for(const localType of localTypes){\n            if (supportedNodeType(localType)){\n                return true;\n            }\n        }\n        return false;\n    }\n        \n    return false;\n};\n\n\n// Check if is valid NPM name. Does not support old package names by default.\nconst validNpmPackage = (str, oldPackages=false) => {\n    const ret = validNpm(str); // Imported library validate-npm-package-name.\n    return oldPackages ?\n        ret.validForNewPackages || ret.validForOldPackages :\n        ret.validForNewPackages;\n};\n\n\n// Check if Path or URI\nconst isPathOrUri = (str) => {\n    return isAbsolutePath(str) || isRelativePath(str) || isUri(str);\n};\n\n// Add object-property-value to a temp triples index for multiple objects.\nconst tempTripleToIndex = (object, property, value, tempTriplesIndex) => {\n    // Not a pure function! An empty or non empty object is changed here!\n    // tempTriplesIndex: { object: { property: [value] } }\n    // For multiple values, input all values in an array as value parameter.\n    if (!(object in tempTriplesIndex)) {\n        tempTriplesIndex[object] = {};\n    }\n    if(!(property in tempTriplesIndex[object])) {\n        tempTriplesIndex[object][property] = [];\n    }\n    if(Array.isArray(value)){\n        const temp = tempTriplesIndex[object][property];\n        tempTriplesIndex[object][property] = temp.concat(value);\n    }else tempTriplesIndex[object][property].push(value);\n};\n\n// Clean a temp triples index. Meant for the same type of index as above!\nconst cleanTriplesIndex = (tempTriplesIndex) => {\n    // Not a pure function! Input object is changed here!\n    // tempTriplesIndex: { object: { property: [value] } }\n    for(const object in tempTriplesIndex){\n        for(let property in tempTriplesIndex[object]){\n            // Remove any duplicate values.\n            if (tempTriplesIndex[object][property].length > 1) {\n                let temp = tempTriplesIndex[object][property];\n                tempTriplesIndex[object][property] = [...new Set(temp)];\n            }\n            \n            // If only one value, set value directly.\n            if(tempTriplesIndex[object][property].length == 1){\n                tempTriplesIndex[object][property] = tempTriplesIndex[object][property][0];\n            }\n        }\n    }\n};\n\n// Add a property value as in semantics, in a JS object for semantics.\n// Does NOT take array value.\nconst addPropertyValue = (js_obj, property, value) => {\n    if (! (property in js_obj)){\n        js_obj[property] = value;\n    } else {\n        // Results in array.\n        if ( ! (Array.isArray(js_obj[property]))) {\n            const temp = js_obj[property];\n            js_obj[property] = [ temp, value ];\n        } else js_obj[property].push(value);\n        // Removes duplicates\n        js_obj[property] = [...new Set(js_obj[property])]\n    }\n}\n\n// Deep clean all empty and faulty values, even NaN.\nconst cleanObj = (obj) => {\n    return cleanDeep(obj, NaNValues=true);\n}\n\n// First letter uppercase, rest lowercase\nconst firstLetter = (str) => {\n    return str.replace(/^.{1}/g, str[0].toUpperCase());\n}\n\n// Canonical Semantic property or class name style\nconst toSemanticName = (str, isProperty=false) => {\n    if (isAbsolutePath(str) || isUri(str)){\n        return str;\n    }\n    \n    let newStr = \"\";\n    let i = 0;\n    for (const part of str.split(\" \")){\n        if (isProperty && i==0) {\n            for (let subPart of part.split(/(?=[A-Z])/) ) {\n                if (isProperty && i==0){\n                    newStr = newStr.concat(subPart.toLowerCase());\n                    \n                } else newStr = newStr.concat(subPart);\n                i++;\n            }\n        }else newStr = newStr.concat(firstLetter(part));\n        i++;\n    }\n    return newStr;\n}\n\nmsg.utilFunctions = {\n    // ALL UTIL FUNCTIONS TO FLOW CONTEXT\n    \"supportedNodeType\": supportedNodeType,\n    \"isUri\": isUri, // Imported library validate.io-uri.\n    \"isAbsolutePath\": isAbsolutePath, // Imported library @stdlib/assert-is-absolute-path.\n    \"isRelativePath\": isRelativePath, // Imported library @stdlib/assert-is-relative-path.\n    \"isPathOrUri\": isPathOrUri,\n    \"validNpmPackage\": validNpmPackage,\n    \"tempTripleToIndex\": tempTripleToIndex,\n    \"cleanTriplesIndex\": cleanTriplesIndex,\n    \"addPropertyValue\": addPropertyValue,\n    \"cleanDeep\": cleanDeep, // Imported library clean-deep.\n    \"cleanObj\": cleanObj,\n    \"firstLetter\": firstLetter,\n    \"toSemanticName\": toSemanticName, \n    \n    // Test console log only\n    \"testFunc\": () => {\n        console.log(\"Hello testFunc\");\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "isUri",
                "module": "validate.io-uri"
            },
            {
                "var": "isRelativePath",
                "module": "@stdlib/assert-is-relative-path"
            },
            {
                "var": "isAbsolutePath",
                "module": "@stdlib/assert-is-absolute-path"
            },
            {
                "var": "validNpm",
                "module": "validate-npm-package-name"
            },
            {
                "var": "jsonata",
                "module": "jsonata"
            },
            {
                "var": "cleanDeep",
                "module": "clean-deep"
            }
        ],
        "x": 540,
        "y": 40,
        "wires": [
            [
                "30fd03dacb287b88"
            ]
        ]
    },
    {
        "id": "c9add37576062962",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "OLD UTILITY FUNCTIONS",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "b454e01e2df1a38e",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Get Flow (id)",
        "props": [
            {
                "p": "flowId",
                "v": "26279234de993606",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "18d872a1b01601f6"
            ]
        ]
    },
    {
        "id": "18d872a1b01601f6",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "prep",
        "func": "msg.myUrl = flow.get(\"target_url\");\nmsg.headers = {\n   \"Authorization\":  `Bearer ${flow.get(\"access_token\")}`\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 900,
        "wires": [
            [
                "16625bf36418b8c5"
            ]
        ]
    },
    {
        "id": "d6948773ee303343",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Get Flow: Hello Sequence",
        "props": [
            {
                "p": "flowId",
                "v": "19fe4293742e0b2c",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 900,
        "wires": [
            [
                "18d872a1b01601f6"
            ]
        ]
    },
    {
        "id": "c2e60599859472ed",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Get Flow: Hello NR function annotated",
        "props": [
            {
                "p": "flowId",
                "v": "7c6a3de135b840c5",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 190,
        "y": 960,
        "wires": [
            [
                "18d872a1b01601f6"
            ]
        ]
    },
    {
        "id": "abe761a65db238f7",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Get Flow: Hello Service",
        "props": [
            {
                "p": "flowId",
                "v": "1b3cbb423e3ab1b3",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 1020,
        "wires": [
            [
                "18d872a1b01601f6"
            ]
        ]
    },
    {
        "id": "16625bf36418b8c5",
        "type": "http request",
        "z": "da309c1626dccde8",
        "name": "Get Flow",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "{{myUrl}}/flow/{{flowId}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 580,
        "y": 900,
        "wires": [
            [
                "f4e3464d453c5279"
            ]
        ]
    },
    {
        "id": "f4e3464d453c5279",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "Flow data",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 840,
        "wires": []
    },
    {
        "id": "28fe27ac186f03d0",
        "type": "comment",
        "z": "da309c1626dccde8",
        "name": "Get a Flow from target Node-RED",
        "info": "",
        "x": 190,
        "y": 800,
        "wires": []
    },
    {
        "id": "ab381d3f8c99d341",
        "type": "inject",
        "z": "da309c1626dccde8",
        "name": "Nodered Function Flow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "[{\"id\":\"dd8835083692860a\",\"type\":\"subflow\",\"name\":\"SizingAnnotator\",\"info\":\"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\\n\\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\\n\",\"category\":\"PHYSICS Annotators\",\"in\":[{\"x\":120,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\"}]}],\"out\":[{\"x\":440,\"y\":60,\"wires\":[{\"id\":\"c66966a2d36f06b5\",\"port\":0}]}],\"env\":[{\"name\":\"memory\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"label\":{\"en-US\":\"Memory (MB)\"}}},{\"name\":\"timeout\",\"type\":\"num\",\"value\":\"\",\"ui\":{\"icon\":\"font-awesome/fa-times-circle-o\",\"label\":{\"en-US\":\"Timeout (millisecs)\"}}}],\"meta\":{},\"color\":\"#E9967A\",\"icon\":\"font-awesome/fa-arrows-h\"},{\"id\":\"c66966a2d36f06b5\",\"type\":\"function\",\"z\":\"dd8835083692860a\",\"name\":\"add sizing\",\"func\":\"\\nmsg.annotations={};\\nmsg.annotations.sizing={};\\nmsg.annotations.sizing.memory=env.get('memory');\\nmsg.annotations.sizing.timeout=env.get('timeout');\\n\\nreturn msg;\\n\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":300,\"y\":60,\"wires\":[[]]},{\"id\":\"694cb784968dc0b9\",\"type\":\"subflow\",\"name\":\"Executor Mode\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"category\":\"PHYSICS Annotators\",\"in\":[],\"out\":[],\"env\":[{\"name\":\"Executor Mode\",\"type\":\"str\",\"value\":\"\",\"ui\":{\"type\":\"select\",\"opts\":{\"opts\":[{\"l\":{\"en-US\":\"Service\"},\"v\":\"Service\"},{\"l\":{\"en-US\":\"NoderedFunction\"},\"v\":\"NoderedFunction\"},{\"l\":{\"en-US\":\"NativeSequence\"},\"v\":\"NativeSequence\"}]}}}],\"meta\":{},\"color\":\"#C0DEED\",\"icon\":\"font-awesome/fa-angle-right\"},{\"id\":\"82b665f654048ecf\",\"type\":\"function\",\"z\":\"694cb784968dc0b9\",\"name\":\"\",\"func\":\"msg.annotations={};\\nmsg.annotations.executorMode=env.get('Executor Mode');\",\"outputs\":1,\"noerr\":0,\"initialize\":\"// Code added here will be run once\\n// whenever the node is started.\\n\\n//msg.payload.imageName=env.get('Image Name');\\n//return msg;\",\"finalize\":\"\",\"libs\":[],\"x\":360,\"y\":140,\"wires\":[[]]},{\"id\":\"eeb5210da7efebd3\",\"type\":\"comment\",\"z\":\"694cb784968dc0b9\",\"name\":\"Instructions\",\"info\":\"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. \",\"x\":560,\"y\":280,\"wires\":[]},{\"id\":\"dbb496ac5b4b1756\",\"type\":\"http in\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"url\":\"/init\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":260,\"y\":140,\"wires\":[[\"dfd5d7f2a1e4bdce\"]]},{\"id\":\"b3ae2348a7357f89\",\"type\":\"http in\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"url\":\"/run\",\"method\":\"post\",\"upload\":false,\"swaggerDoc\":\"\",\"x\":260,\"y\":240,\"wires\":[[\"247a1728e0231123\"]]},{\"id\":\"dfd5d7f2a1e4bdce\",\"type\":\"http response\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"x\":560,\"y\":140,\"wires\":[]},{\"id\":\"6d597da6d88a144a\",\"type\":\"http response\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"x\":690,\"y\":320,\"wires\":[]},{\"id\":\"247a1728e0231123\",\"type\":\"function\",\"z\":\"7c6a3de135b840c5\",\"name\":\"hello world\",\"func\":\"//@importance=high\\n//@OptimizationGoal=performance\\nconsole.log(msg);\\nmsg.payload={'response':'hello '+msg.payload.value.name};\\nreturn msg;\",\"outputs\":1,\"noerr\":0,\"initialize\":\"\",\"finalize\":\"\",\"libs\":[],\"x\":550,\"y\":240,\"wires\":[[\"6d597da6d88a144a\"]]},{\"id\":\"d2f80557dffd0854\",\"type\":\"comment\",\"z\":\"7c6a3de135b840c5\",\"name\":\"OW SKELETON with hello world function\",\"info\":\"\",\"x\":360,\"y\":320,\"wires\":[]},{\"id\":\"164958dd7f2a7c37\",\"type\":\"subflow:694cb784968dc0b9\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"env\":[{\"name\":\"Executor Mode\",\"value\":\"NoderedFunction\",\"type\":\"str\"}],\"x\":310,\"y\":440,\"wires\":[]},{\"id\":\"ed773d649e8294b1\",\"type\":\"subflow:dd8835083692860a\",\"z\":\"7c6a3de135b840c5\",\"name\":\"\",\"env\":[{\"name\":\"memory\",\"value\":\"512\",\"type\":\"num\"},{\"name\":\"timeout\",\"value\":\"120000\",\"type\":\"num\"}],\"x\":300,\"y\":540,\"wires\":[[]]}]",
        "payloadType": "json",
        "x": 140,
        "y": 1140,
        "wires": [
            [
                "36eacb9b8556a6fd"
            ]
        ]
    },
    {
        "id": "36eacb9b8556a6fd",
        "type": "function",
        "z": "da309c1626dccde8",
        "name": "",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1140,
        "wires": [
            [
                "498586d213c968ce"
            ]
        ]
    },
    {
        "id": "498586d213c968ce",
        "type": "debug",
        "z": "da309c1626dccde8",
        "name": "Final output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 1140,
        "wires": []
    }
]
