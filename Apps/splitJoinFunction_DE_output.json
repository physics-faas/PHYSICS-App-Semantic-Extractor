{
    "flows": [
        {
            "flowID": "e98bf48d7a877d25",
            "flowName": "splitjoinFunction",
            "flow": [
                {
                    "id": "e98bf48d7a877d25",
                    "type": "tab",
                    "label": "splitjoinFunction",
                    "disabled": false,
                    "info": "",
                    "env": []
                },
                {
                    "id": "6c475d976512ab6c",
                    "type": "http in",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "url": "/run",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 500,
                    "y": 500,
                    "wires": [
                        [
                            "e9e20d06928e3a23"
                        ]
                    ]
                },
                {
                    "id": "d8ea5c991b7256b2",
                    "type": "http in",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "url": "/init",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 540,
                    "y": 380,
                    "wires": [
                        [
                            "0bf6e36501ea140c"
                        ]
                    ]
                },
                {
                    "id": "0bf6e36501ea140c",
                    "type": "http response",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "statusCode": "",
                    "headers": {},
                    "x": 830,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "729306c6b37c0ec0",
                    "type": "http response",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "statusCode": "",
                    "headers": {},
                    "x": 1090,
                    "y": 500,
                    "wires": []
                },
                {
                    "id": "e385b549bc1cae8d",
                    "type": "subflow:694cb784968dc0b9",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "env": [
                        {
                            "name": "Executor Mode",
                            "value": "NoderedFunction",
                            "type": "str"
                        }
                    ],
                    "x": 550,
                    "y": 700,
                    "wires": []
                },
                {
                    "id": "e9e20d06928e3a23",
                    "type": "function",
                    "z": "e98bf48d7a877d25",
                    "name": "add test inputs",
                    "func": "\n//aws wp4\nmsg.creds='178f79b4-4540-449c-a815-f3b50602aeca:0EWLwLLxVWFsBrW4Lq7Y1EuTYRcfVSsYjXQANDQ78nO9tgzT6B2nui2whli9wlc5';\nmsg.namespace='wp4namespace';\n\n//hua guest\n//msg.creds='23bc46b1-71f6-4ed5-8c54-816aa4f8c502:123zO3xZCLrMN6v2BKK1dXYFpXlPkccOFqm12CdAsMgRU4VrNZ9lyGVCGuMDGIwP';\n\n//aws wp3\n//msg.creds='17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF';\n\nmsg.payload={};\nmsg.payload.value={};\nmsg.payload.value={\"values\":[\n    {'run':'run1','delay':12000,'iterations':1},\n    {'run':'run2','delay':3000,'iterations':1},\n    {'run':'run3','delay':3000,'iterations':1},\n    {'run':'run4','delay':3000,'iterations':1},\n    ], \n    'action':'delayaction'\n    //\"execution\":'local_multiprocess', //or faas\n    //\"splitsize\":global.get('splitsize')\n    //\"maxOWmillisecinterarrival\":20\n};\n\nmsg.url='https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/wp4namespace/actions/delayaction?blocking=true';\n\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 700,
                    "y": 500,
                    "wires": [
                        [
                            "da1cd4a2ba26b2ce"
                        ]
                    ]
                },
                {
                    "id": "da1cd4a2ba26b2ce",
                    "type": "subflow:5813b63f70690303",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "x": 880,
                    "y": 500,
                    "wires": [
                        [
                            "729306c6b37c0ec0"
                        ]
                    ]
                },
                {
                    "id": "84e7befdcccb2e4e",
                    "type": "subflow:edfbba7dd979ecf1",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "env": [
                        {
                            "name": "affinityArtefactID",
                            "value": "https://registry.apps.ocphub.physics-faas.eu/custom:54",
                            "type": "str"
                        },
                        {
                            "name": "affinityAppID",
                            "value": "app0",
                            "type": "str"
                        },
                        {
                            "name": "affinity",
                            "value": "affinity",
                            "type": "str"
                        }
                    ],
                    "x": 540,
                    "y": 780,
                    "wires": []
                },
                {
                    "id": "82b665f654048ecf",
                    "type": "function",
                    "z": "694cb784968dc0b9",
                    "name": "",
                    "func": "msg.annotations={};\nmsg.annotations.executorMode=env.get('Executor Mode');",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "// Code added here will be run once\n// whenever the node is started.\n\n//msg.payload.imageName=env.get('Image Name');\n//return msg;",
                    "finalize": "",
                    "libs": [],
                    "x": 360,
                    "y": 140,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "eeb5210da7efebd3",
                    "type": "comment",
                    "z": "694cb784968dc0b9",
                    "name": "Instructions",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "x": 560,
                    "y": 280,
                    "wires": []
                },
                {
                    "id": "694cb784968dc0b9",
                    "type": "subflow",
                    "name": "Executor Mode",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "Executor Mode",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Service"
                                            },
                                            "v": "Service"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NoderedFunction"
                                            },
                                            "v": "NoderedFunction"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NativeSequence"
                                            },
                                            "v": "NativeSequence"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "font-awesome/fa-angle-right"
                },
                {
                    "id": "64f1be8afce20915",
                    "type": "openwhisk-service",
                    "z": "5813b63f70690303",
                    "name": "aws",
                    "api": "https://openwhisk.apps.ocphub.physics-faas.eu/api/v1"
                },
                {
                    "id": "1f13a2c0346f82c6",
                    "type": "tls-config",
                    "z": "5813b63f70690303",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": false,
                    "alpnprotocol": ""
                },
                {
                    "id": "770ef202c7ccecb6",
                    "type": "split",
                    "z": "5813b63f70690303",
                    "name": "",
                    "splt": "\\n",
                    "spltType": "str",
                    "arraySplt": "1",
                    "arraySpltType": "len",
                    "stream": false,
                    "addname": "",
                    "x": 330,
                    "y": 100,
                    "wires": [
                        [
                            "cb539c8dcce538f8",
                            "4b0793e93fa7e4c7"
                        ]
                    ]
                },
                {
                    "id": "fef7008cea92f52d",
                    "type": "join",
                    "z": "5813b63f70690303",
                    "name": "",
                    "mode": "auto",
                    "build": "string",
                    "property": "payload",
                    "propertyType": "msg",
                    "key": "topic",
                    "joiner": "\\n",
                    "joinerType": "str",
                    "accumulate": "false",
                    "timeout": "",
                    "count": "",
                    "reduceRight": false,
                    "x": 650,
                    "y": 100,
                    "wires": [
                        [
                            "933bd2f642873790"
                        ]
                    ]
                },
                {
                    "id": "8ca660db8c891c1f",
                    "type": "comment",
                    "z": "5813b63f70690303",
                    "name": "NEEDS CONFIGURATION WITH OW ENDPOINT",
                    "info": "",
                    "x": 470,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "ce0ad53cb5c6ef33",
                    "type": "function",
                    "z": "5813b63f70690303",
                    "name": "",
                    "func": "msg.action=msg.payload.value.action;\n\nmsg.oldpayload=msg.payload;\nmsg.payload={};\nmsg.payload=msg.oldpayload.value.values;\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 160,
                    "y": 100,
                    "wires": [
                        [
                            "770ef202c7ccecb6"
                        ]
                    ]
                },
                {
                    "id": "933bd2f642873790",
                    "type": "function",
                    "z": "5813b63f70690303",
                    "name": "",
                    "func": "msg.newpayload=msg.payload;\nmsg.payload=[];\nmsg.payload=msg.oldpayload;\nmsg.payload.value=msg.newpayload;\n\nmsg.payload.value.myvar=env.get('setsplit');\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 800,
                    "y": 100,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "cb539c8dcce538f8",
                    "type": "debug",
                    "z": "5813b63f70690303",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 420,
                    "y": 240,
                    "wires": []
                },
                {
                    "id": "4b0793e93fa7e4c7",
                    "type": "http request",
                    "z": "5813b63f70690303",
                    "name": "",
                    "method": "POST",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "1f13a2c0346f82c6",
                    "persist": false,
                    "proxy": "",
                    "authType": "basic",
                    "senderr": false,
                    "x": 510,
                    "y": 100,
                    "wires": [
                        [
                            "fef7008cea92f52d"
                        ]
                    ]
                },
                {
                    "id": "5813b63f70690303",
                    "type": "subflow",
                    "name": "SplitJoin",
                    "info": "This is an implementation of the Single Instruction Multiple Data parallelization pattern with an output barrier.\n\nThe pattern expects the name of the parallel function to invoke in the msg.payload.value.action field and the input array in the msg.payload.value.values field (in order to adapt to the usage inside Openwhisk). The input message array is split into individual messages in order to invoke one inner Openwhisk function with each input array row.\n\nIn the future further parameters may be added with relation to how the incoming array message is split into individual messages in order to support a more customizable job splitting in chunk sizes.",
                    "category": "PHYSICS",
                    "in": [
                        {
                            "x": 60,
                            "y": 100,
                            "wires": [
                                {
                                    "id": "ce0ad53cb5c6ef33"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 1020,
                            "y": 100,
                            "wires": [
                                {
                                    "id": "933bd2f642873790",
                                    "port": 0
                                }
                            ]
                        }
                    ],
                    "env": [],
                    "meta": {},
                    "color": "#FFAAAA"
                },
                {
                    "id": "6675030579fdcb44",
                    "type": "switch",
                    "z": "edfbba7dd979ecf1",
                    "name": "",
                    "property": "payload",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "eq",
                            "v": "",
                            "vt": "str"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 1,
                    "x": 360,
                    "y": 140,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "edfbba7dd979ecf1",
                    "type": "subflow",
                    "name": "Affinity Annotator",
                    "info": "\n\nThis is a semantic node to indicate that a flow has affinity considerations with flows in the same or other app. This information may be useful for the placement and optimization processes of PHYSICS. \n\nThe target action is referenced through the deployment artefact id (e.g. imageID), so it needs to have been built beforehand. The relevant information will be included in the Build Tab of the Design Environment.\n\nThe app ID can be used to indicate an action belonging to a different app. Therefore this information needs to be available in the Design Environment (it is under the Graphs tab).\n\nIf the app ID is left empty, it is assumed that the node refers to this app, since the app ID is given during application creation and it is not available at design time.\n",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "affinityArtefactID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "affinityAppID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "affinity",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "affinity"
                                            },
                                            "v": "affinity"
                                        },
                                        {
                                            "l": {
                                                "en-US": "antiaffinity"
                                            },
                                            "v": "antiaffinity"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#FFF0F0"
                }
            ],
            "artifact": "registry.apps.ocphub.physics-faas.eu/custom/george:71",
            "type": "image"
        }
    ],
    "displayName": "Application"
}