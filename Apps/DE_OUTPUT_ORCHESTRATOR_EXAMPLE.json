{
    "flows": [
        {
            "flowID": "3dc59d6aea6e35a4",
            "flowName": "Hello_DMS",
            "flow": [
                {
                    "id": "3dc59d6aea6e35a4",
                    "type": "tab",
                    "label": "Hello_DMS",
                    "disabled": false,
                    "info": "",
                    "env": []
                },
                {
                    "id": "3acefcfb6e6a91ea",
                    "type": "http in",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "url": "/init",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 360,
                    "y": 160,
                    "wires": [
                        [
                            "8cf8bcdd0361dcf7"
                        ]
                    ]
                },
                {
                    "id": "b519f76492b660c7",
                    "type": "http in",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "url": "/run",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 360,
                    "y": 260,
                    "wires": [
                        [
                            "2347840f70beb926",
                            "1b65c81292a1cc77"
                        ]
                    ]
                },
                {
                    "id": "8cf8bcdd0361dcf7",
                    "type": "http response",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "x": 660,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "d484c0db85f77685",
                    "type": "http response",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "x": 930,
                    "y": 320,
                    "wires": []
                },
                {
                    "id": "2347840f70beb926",
                    "type": "function",
                    "z": "3dc59d6aea6e35a4",
                    "name": "hello world",
                    "func": "\nconsole.log(msg);\nmsg.payload='hello '+msg.payload.value.name;\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 570,
                    "y": 260,
                    "wires": [
                        [
                            "223f577e6b96a222"
                        ]
                    ]
                },
                {
                    "id": "7f89bdaad11eb775",
                    "type": "comment",
                    "z": "3dc59d6aea6e35a4",
                    "name": "OW SKELETON with hello world function",
                    "info": "",
                    "x": 460,
                    "y": 340,
                    "wires": []
                },
                {
                    "id": "dc598c2fb4701083",
                    "type": "subflow:694cb784968dc0b9",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "env": [
                        {
                            "name": "Executor Mode",
                            "value": "NoderedFunction",
                            "type": "str"
                        }
                    ],
                    "x": 220,
                    "y": 420,
                    "wires": []
                },
                {
                    "id": "1fcff8400467c8f4",
                    "type": "subflow:dd8835083692860a",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "env": [
                        {
                            "name": "memory",
                            "value": "512",
                            "type": "num"
                        },
                        {
                            "name": "timeout",
                            "value": "150000",
                            "type": "num"
                        }
                    ],
                    "x": 220,
                    "y": 480,
                    "wires": []
                },
                {
                    "id": "cbb90d5abd6aeb85",
                    "type": "subflow:f0b9b88b6dcb2ece",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "env": [
                        {
                            "name": "goal",
                            "value": "performance",
                            "type": "str"
                        }
                    ],
                    "x": 270,
                    "y": 540,
                    "wires": []
                },
                {
                    "id": "a928d25a87bb1f70",
                    "type": "subflow:94dffc86e4af9a58",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "env": [
                        {
                            "name": "importance",
                            "value": "high",
                            "type": "str"
                        }
                    ],
                    "x": 240,
                    "y": 600,
                    "wires": []
                },
                {
                    "id": "e92d973a0c36b990",
                    "type": "subflow:05f045b87080a61e",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "env": [
                        {
                            "name": "locality",
                            "value": "aws",
                            "type": "str"
                        }
                    ],
                    "x": 230,
                    "y": 660,
                    "wires": []
                },
                {
                    "id": "223f577e6b96a222",
                    "type": "function",
                    "z": "3dc59d6aea6e35a4",
                    "name": "write",
                    "func": "var data=msg.payload;\nmsg.payload={};\nmsg.payload.data=data;\nmsg.data=data;\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 750,
                    "y": 260,
                    "wires": [
                        [
                            "cabbea3d9687c2e4",
                            "1621f8dd5bf2de51"
                        ]
                    ]
                },
                {
                    "id": "3402a8de3203b61c",
                    "type": "function",
                    "z": "3dc59d6aea6e35a4",
                    "name": "results",
                    "func": "var input=msg.payload;\n\nmsg.payload={};\nmsg.payload.dmsResult=input.response.result;\nmsg.payload.data=msg.data;\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 770,
                    "y": 320,
                    "wires": [
                        [
                            "d484c0db85f77685",
                            "690e6fa8cb324459"
                        ]
                    ]
                },
                {
                    "id": "1b65c81292a1cc77",
                    "type": "debug",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 530,
                    "y": 200,
                    "wires": []
                },
                {
                    "id": "cabbea3d9687c2e4",
                    "type": "debug",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 950,
                    "y": 260,
                    "wires": []
                },
                {
                    "id": "7988bc52cb5a9350",
                    "type": "debug",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 730,
                    "y": 460,
                    "wires": []
                },
                {
                    "id": "690e6fa8cb324459",
                    "type": "debug",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 930,
                    "y": 520,
                    "wires": []
                },
                {
                    "id": "f6e5aeef996faf78",
                    "type": "subflow:789351ac.02c9d",
                    "z": "3dc59d6aea6e35a4",
                    "name": "",
                    "x": 630,
                    "y": 620,
                    "wires": [
                        [],
                        [],
                        []
                    ]
                },
                {
                    "id": "1621f8dd5bf2de51",
                    "type": "subflow:d5cdb05c4a8f64a4",
                    "z": "3dc59d6aea6e35a4",
                    "name": "write",
                    "env": [
                        {
                            "name": "dms_location",
                            "value": "https://openwhisk.apps.ocphub.physics-faas.eu/api/v1",
                            "type": "str"
                        },
                        {
                            "name": "dms_job_id",
                            "value": "ss",
                            "type": "str"
                        },
                        {
                            "name": "dms_pocket_dst_file",
                            "value": "dd",
                            "type": "str"
                        },
                        {
                            "name": "dms_operation",
                            "value": "dms-w",
                            "type": "str"
                        },
                        {
                            "name": "dms_namespace",
                            "value": "wp4namespace",
                            "type": "str"
                        },
                        {
                            "name": "dms_size",
                            "value": "10",
                            "type": "num"
                        }
                    ],
                    "x": 630,
                    "y": 320,
                    "wires": [
                        [
                            "3402a8de3203b61c",
                            "7988bc52cb5a9350"
                        ]
                    ]
                },
                {
                    "id": "eeb5210da7efebd3",
                    "type": "comment",
                    "z": "694cb784968dc0b9",
                    "name": "Instructions",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "x": 560,
                    "y": 280,
                    "wires": []
                },
                {
                    "id": "694cb784968dc0b9",
                    "type": "subflow",
                    "name": "Executor Mode",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "Executor Mode",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Service"
                                            },
                                            "v": "Service"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NoderedFunction"
                                            },
                                            "v": "NoderedFunction"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NativeSequence"
                                            },
                                            "v": "NativeSequence"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "isChoreographer",
                            "type": "str",
                            "value": "false",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "true"
                                            },
                                            "v": "true"
                                        },
                                        {
                                            "l": {
                                                "en-US": "false"
                                            },
                                            "v": "false"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "font-awesome/fa-angle-right"
                },
                {
                    "id": "827476cff63f679c",
                    "type": "comment",
                    "z": "dd8835083692860a",
                    "name": "README",
                    "info": "The node is used to indicate memory and timing preferences for the final OW action.",
                    "x": 440,
                    "y": 180,
                    "wires": []
                },
                {
                    "id": "dd8835083692860a",
                    "type": "subflow",
                    "name": "SizingAnnotator",
                    "info": "This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\n\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\n",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "memory",
                            "type": "num",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "Memory (MB)"
                                }
                            }
                        },
                        {
                            "name": "timeout",
                            "type": "num",
                            "value": "",
                            "ui": {
                                "icon": "font-awesome/fa-times-circle-o",
                                "label": {
                                    "en-US": "Timeout (millisecs)"
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#E9967A",
                    "icon": "font-awesome/fa-arrows-h"
                },
                {
                    "id": "a0dfe746ee0c085b",
                    "type": "comment",
                    "z": "f0b9b88b6dcb2ece",
                    "name": "README",
                    "info": "The node is used to set the desired optimization goal: performance/energy",
                    "x": 340,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "f0b9b88b6dcb2ece",
                    "type": "subflow",
                    "name": "Optimization Goal (Flow Level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "goal",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "performance"
                                            },
                                            "v": "performance"
                                        },
                                        {
                                            "l": {
                                                "en-US": "energy"
                                            },
                                            "v": "energy"
                                        },
                                        {
                                            "l": {
                                                "en-US": "availability"
                                            },
                                            "v": "availability"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#FFAAAA",
                    "icon": "font-awesome/fa-sliders"
                },
                {
                    "id": "1896904e3b2cf282",
                    "type": "comment",
                    "z": "94dffc86e4af9a58",
                    "name": "README",
                    "info": "The node is used to indicate at the flow level what is the importance of the flow (to be taken under consideration in the scheduling aspects of PHYSICS)",
                    "x": 400,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "94dffc86e4af9a58",
                    "type": "subflow",
                    "name": "Importance (Flow level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "importance",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "high"
                                            },
                                            "v": "high"
                                        },
                                        {
                                            "l": {
                                                "en-US": "medium"
                                            },
                                            "v": "medium"
                                        },
                                        {
                                            "l": {
                                                "en-US": "low"
                                            },
                                            "v": "low"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#3FADB5",
                    "icon": "node-red/alert.svg"
                },
                {
                    "id": "30ee5c09f384361d",
                    "type": "comment",
                    "z": "05f045b87080a61e",
                    "name": "README",
                    "info": "The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name ",
                    "x": 400,
                    "y": 220,
                    "wires": []
                },
                {
                    "id": "05f045b87080a61e",
                    "type": "subflow",
                    "name": "Locality(flow level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "locality",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "meta": {},
                    "color": "#D8BFD8",
                    "icon": "font-awesome/fa-braille"
                },
                {
                    "id": "2934f390.711324",
                    "type": "tls-config",
                    "z": "789351ac.02c9d",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": false
                },
                {
                    "id": "7d194c10.33b51c",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "defaults+activation id",
                    "func": "\nif (msg.hasOwnProperty('maxAttempts')){\n    msg.iterations=msg.maxAttempts;\n} else {\n    msg.iterations=env.get('maxAttempts');\n}\n//needed to reset the iterations after function chaining\nmsg.defaultAttempts=msg.iterations;\n\nif (msg.hasOwnProperty('pollPeriod')){\n    \n} else {\n    msg.pollPeriod=env.get('pollPeriod');\n}\n\nif (msg.hasOwnProperty('method')){\n    \n} else {\n    msg.method=env.get('method');\n}\n\nif (msg.hasOwnProperty('url')){\n    \n} else {\n    msg.url=env.get('url');\n}\n\nif (msg.hasOwnProperty('retryCode')){\n    \n} else {\n    msg.retryCode=env.get('retryCode');\n}\n\nif (msg.hasOwnProperty('acceptCode')){\n    \n} else {\n    msg.acceptCode=env.get('acceptCode');\n}\n\nif (msg.hasOwnProperty('creds')){\n    \n} else {\n    msg.creds=env.get('creds');\n}\n\nif (msg.hasOwnProperty('functionChain')){\n    \n} else {\n    msg.functionChain=env.get('functionChain');\n}\n\nif (msg.hasOwnProperty('inputData')){\n    if (msg.inputData.hasOwnProperty('creds')){\n        msg.creds=msg.inputData.creds;\n    }\n}\n\n\n\nmsg.delay=msg.pollPeriod;\nmsg.start=Date.now();\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 200,
                    "y": 160,
                    "wires": [
                        [
                            "cad17b04.a2b4d8"
                        ]
                    ]
                },
                {
                    "id": "4be3f205.3e8dc4",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "iterations--",
                    "func": "msg.iterations=msg.iterations-1;\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "x": 350,
                    "y": 300,
                    "wires": [
                        [
                            "c2cf68b7.263d4",
                            "d8305759.866988"
                        ]
                    ]
                },
                {
                    "id": "c2cf68b7.263d4",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "if iterations finished",
                    "property": "iterations",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "gte",
                            "v": "1",
                            "vt": "num"
                        },
                        {
                            "t": "lt",
                            "v": "1",
                            "vt": "num"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 550,
                    "y": 300,
                    "wires": [
                        [
                            "cad17b04.a2b4d8"
                        ],
                        []
                    ]
                },
                {
                    "id": "76299695.812bd8",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "SUCCESS",
                    "info": "",
                    "x": 1100,
                    "y": 60,
                    "wires": []
                },
                {
                    "id": "48093072.b17a6",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "FINAL FAIL",
                    "info": "",
                    "x": 890,
                    "y": 360,
                    "wires": []
                },
                {
                    "id": "d5960f2f.2e9448",
                    "type": "delay",
                    "z": "789351ac.02c9d",
                    "name": "delay",
                    "pauseType": "delayv",
                    "timeout": "5",
                    "timeoutUnits": "seconds",
                    "rate": "1",
                    "nbRateUnits": "1",
                    "rateUnits": "second",
                    "randomFirst": "1",
                    "randomLast": "5",
                    "randomUnits": "seconds",
                    "drop": false,
                    "outputs": 1,
                    "x": 170,
                    "y": 300,
                    "wires": [
                        [
                            "4be3f205.3e8dc4"
                        ]
                    ]
                },
                {
                    "id": "471b3d64.265894",
                    "type": "http request",
                    "z": "789351ac.02c9d",
                    "name": "",
                    "method": "GET",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "2934f390.711324",
                    "persist": false,
                    "proxy": "",
                    "authType": "",
                    "x": 590,
                    "y": 160,
                    "wires": [
                        [
                            "8694180b.ec1c68"
                        ]
                    ]
                },
                {
                    "id": "8694180b.ec1c68",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "Status code check",
                    "property": "statusCode",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "lte",
                            "v": "acceptCode",
                            "vt": "msg"
                        },
                        {
                            "t": "gte",
                            "v": "retryCode",
                            "vt": "msg"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 810,
                    "y": 160,
                    "wires": [
                        [
                            "f9d0aba7.72382"
                        ],
                        [
                            "d5960f2f.2e9448"
                        ]
                    ]
                },
                {
                    "id": "ef03414f.ad9d78",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "RETRY FAIL",
                    "info": "",
                    "x": 890,
                    "y": 260,
                    "wires": []
                },
                {
                    "id": "66bbc0cf.0c62f",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "BEFORE AUTH",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "x": 370,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "13791c2d.8cea7c",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "URL",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "url",
                    "targetType": "msg",
                    "x": 580,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "cad17b04.a2b4d8",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "add auth",
                    "func": "msg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 420,
                    "y": 160,
                    "wires": [
                        [
                            "471b3d64.265894"
                        ]
                    ]
                },
                {
                    "id": "f2b7c4e4.a24c3",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "adapt to new activation",
                    "func": "\n\nmsg.url=msg.payload.response.result.newActivationIDURL;\nmsg.iterations=msg.defaultAttempts+1;\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 1500,
                    "y": 160,
                    "wires": [
                        [
                            "d5960f2f.2e9448",
                            "ee1dbf44.7368f8"
                        ]
                    ]
                },
                {
                    "id": "c338e47b.b00ed",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "FUNCTION CHAIN CONTINUATION",
                    "info": "",
                    "x": 1240,
                    "y": 240,
                    "wires": []
                },
                {
                    "id": "ee1dbf44.7368f8",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "AFTER CONTINUATION IN Poll2Push",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1420,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "f9d0aba7.72382",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "is Chain",
                    "property": "functionChain",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "false"
                        },
                        {
                            "t": "true"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 1020,
                    "y": 160,
                    "wires": [
                        [],
                        [
                            "6da1eea0.969368",
                            "1bbc6fa0.4879c"
                        ]
                    ]
                },
                {
                    "id": "6da1eea0.969368",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "RESULT STATUS",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1100,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "f20a68d.9711598",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "AFTER CODE CHECK",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "functionChain",
                    "targetType": "msg",
                    "x": 890,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "36905e62.dfad92",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP1",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1120,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "9610a737.bf275",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP2",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1300,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "c52af08f.756ee8",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP3",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1600,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "1bbc6fa0.4879c",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "compare completion",
                    "func": "console.log('IN COMPARE COMPLETION',msg.payload.response);\nif (msg.payload.response.result.status==='Completed'){\n    return [msg,null];\n} else {\n    return [null,msg];\n}\n",
                    "outputs": 2,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 1240,
                    "y": 160,
                    "wires": [
                        [
                            "c52af08f.756ee8"
                        ],
                        [
                            "f2b7c4e4.a24c3"
                        ]
                    ]
                },
                {
                    "id": "d8305759.866988",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "URL",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "iterations",
                    "targetType": "msg",
                    "x": 500,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "789351ac.02c9d",
                    "type": "subflow",
                    "name": "PollTOPushConverterFC",
                    "info": "This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\n\nThe according function should return as a response the following structure:\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \n\nThe node also can get credentials from the msg.creds field of the input message.\n\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\n\nThe node has three outputs:\n - Output 1 indicates successful finalization of the API call\n - Output 2 indicates intermediate failure and was added to return the reason for failure\n - Output 3 indicates final failure after max attempts\n\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\n\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\n\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\n\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\n \n",
                    "category": "PHYSICS Helpers",
                    "in": [
                        {
                            "x": 60,
                            "y": 160,
                            "wires": [
                                {
                                    "id": "7d194c10.33b51c"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 1380,
                            "y": 40,
                            "wires": [
                                {
                                    "id": "f9d0aba7.72382",
                                    "port": 0
                                },
                                {
                                    "id": "1bbc6fa0.4879c",
                                    "port": 0
                                }
                            ]
                        },
                        {
                            "x": 780,
                            "y": 260,
                            "wires": [
                                {
                                    "id": "c2cf68b7.263d4",
                                    "port": 0
                                }
                            ]
                        },
                        {
                            "x": 780,
                            "y": 360,
                            "wires": [
                                {
                                    "id": "c2cf68b7.263d4",
                                    "port": 1
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "maxAttempts",
                            "type": "str",
                            "value": "3"
                        },
                        {
                            "name": "pollPeriod",
                            "type": "str",
                            "value": "3000"
                        },
                        {
                            "name": "method",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": "http://10.100.59.182:3233/api/v1/namespaces/_/activations/"
                        },
                        {
                            "name": "retryCode",
                            "type": "num",
                            "value": "202"
                        },
                        {
                            "name": "acceptCode",
                            "type": "num",
                            "value": "200"
                        },
                        {
                            "name": "functionChain",
                            "type": "bool",
                            "value": "true"
                        }
                    ],
                    "meta": {},
                    "color": "#b4e8a9"
                },
                {
                    "id": "795bfb0aa4e6606a",
                    "type": "tls-config",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": false,
                    "alpnprotocol": ""
                },
                {
                    "id": "b1565887a7f49105",
                    "type": "function",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "adapt",
                    "func": "\nif (msg.hasOwnProperty('dms_job_id')){\n} else {\n    msg.dms_job_id=env.get('dms_job_id');\n}\n\nif (msg.hasOwnProperty('dms_size')){\n} else {\n    msg.dms_size=env.get('dms_size');\n}\n\nif (msg.hasOwnProperty('dms_location')){\n} else {\n    msg.dms_location=env.get('dms_location');\n}\n\n\nif (msg.hasOwnProperty('dms_operation')){\n} else {\n    msg.dms_operation=env.get('dms_operation');\n}\n\nif (msg.hasOwnProperty('dms_namespace')){\n} else {\n    msg.namespace=env.get('dms_namespace');\n}\n\n\nif (msg.hasOwnProperty('dms_pocket_dst_file')){\n    //msg.dms_pocket_dst_file=msg.payload.dms_pocket_dst_file;\n} else {\n    msg.dms_pocket_dst_file=env.get('dms_pocket_dst_file');\n}\n\nif (msg.hasOwnProperty('creds')){\n    //msg.creds=msg.payload.dms_namespace;\n} else {\n    msg.creds=env.get('creds');\n}\n\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 250,
                    "y": 80,
                    "wires": [
                        [
                            "ccb0503362a32b2a",
                            "4856665561ef0433"
                        ]
                    ]
                },
                {
                    "id": "ccb0503362a32b2a",
                    "type": "function",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "insert action invocation url and auth",
                    "func": "//msg.url='http://10.100.59.182:3233/api/v1/namespaces/guest/actions/dockeraction';\nmsg.url=msg.dms_location+'/namespaces/'+msg.namespace+'/actions/'+msg.dms_operation;\n\nconsole.log(msg.creds);\n//msg.creds='';\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\n\nmsg.payload.jobid=msg.dms_job_id;\nmsg.payload.pocketFile= msg.dms_pocket_dst_file;\nmsg.payload.size=msg.dms_size;\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 340,
                    "y": 140,
                    "wires": [
                        [
                            "3457bb2065109dc6",
                            "2c3be5d81299426d"
                        ]
                    ]
                },
                {
                    "id": "3457bb2065109dc6",
                    "type": "http request",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "method": "POST",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "795bfb0aa4e6606a",
                    "persist": false,
                    "proxy": "",
                    "authType": "basic",
                    "x": 290,
                    "y": 200,
                    "wires": [
                        [
                            "28af37e1ffcddb70",
                            "2faee81a277aefcd"
                        ]
                    ]
                },
                {
                    "id": "28af37e1ffcddb70",
                    "type": "function",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "add OW activation id from reply",
                    "func": "\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\n\n//msg.url='http://10.100.59.182:3233/api/v1/namespaces/_/activations/'+msg.activationID;\n\nmsg.url=msg.dms_location+'/namespaces/'+msg.namespace+'/activations/'+msg.activationID;\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 350,
                    "y": 260,
                    "wires": [
                        [
                            "f8348bbae5afdb07"
                        ]
                    ]
                },
                {
                    "id": "f8348bbae5afdb07",
                    "type": "subflow:789351ac.02c9d",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "env": [
                        {
                            "name": "maxAttempts",
                            "value": "20",
                            "type": "str"
                        },
                        {
                            "name": "pollPeriod",
                            "value": "10000",
                            "type": "str"
                        },
                        {
                            "name": "method",
                            "value": "POST",
                            "type": "str"
                        },
                        {
                            "name": "functionChain",
                            "value": "false",
                            "type": "bool"
                        }
                    ],
                    "x": 330,
                    "y": 320,
                    "wires": [
                        [],
                        [
                            "e5351303862f506c"
                        ],
                        []
                    ]
                },
                {
                    "id": "f3dce7600cf573ec",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "SUCCESS",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 930,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "e5351303862f506c",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "RETRY FAIL",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 930,
                    "y": 340,
                    "wires": []
                },
                {
                    "id": "9749a0001a768f9a",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "FINAL FAIL",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 930,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "4856665561ef0433",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 440,
                    "y": 80,
                    "wires": []
                },
                {
                    "id": "2c3be5d81299426d",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 570,
                    "y": 140,
                    "wires": []
                },
                {
                    "id": "2faee81a277aefcd",
                    "type": "debug",
                    "z": "d5cdb05c4a8f64a4",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 690,
                    "y": 200,
                    "wires": []
                },
                {
                    "id": "d5cdb05c4a8f64a4",
                    "type": "subflow",
                    "name": "DMS Interface",
                    "info": "The data to be written needs to be included in the \nmsg.payload.data.\n\nThe operation can be selected from the UI (Read/Write/Lookup) or can be set via the msg.operation field.\n\nThe job_id can be set from the UI  or can be set via the msg.job_id field. \n\nThe pocket destination file can be set from the UI  or can be set via the msg.pocket_dst_file field.\n\nThe pocket server location can be set from the UI or via the msg.dms_location field.\n\nThe credentials (user:key) for OW can be set either through the UI or through the msg.creds parameter.\n\nThe size parameter should be set either through the msg.dms_size or the UI.\n\nIn all cases, the incoming message parameters override the UI set ones. \n\nInternal dms function details:\n * /wp4namespace/dms-w:\n - input: '--param data \"hello world\" ' this param indicates the data to be stored in dms.\n - output: return {\"jobid\": jobid, \"pocketFile\": pocketFile,  \"size\": len(text)} The jobid is the identifier of the file where is stored the information, the pocketFile is the path where the jobId file is stored and the len is the amount of data to read in MB. \n * /wp4namespace/dms-r:\n - input:  --param jobid \"jobidX\" --param pocketFile \"pocketFileX\" --param size 100.\n - output: return {\"jobid\": jobid, \"pocketFile\": pocketFile}\n * /wp4namespace/dms-l:\n - input: --param jobid \"jobidX\" --param pocketFile \"pocketFileX\"\n - output:  return {\"result\": result} True if exists, false otherwise",
                    "category": "PHYSICS Annotators",
                    "in": [
                        {
                            "x": 100,
                            "y": 80,
                            "wires": [
                                {
                                    "id": "b1565887a7f49105"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 740,
                            "y": 260,
                            "wires": [
                                {
                                    "id": "f8348bbae5afdb07",
                                    "port": 0
                                },
                                {
                                    "id": "f8348bbae5afdb07",
                                    "port": 2
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "dms_location",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "dms_job_id",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "Custom Job ID"
                                }
                            }
                        },
                        {
                            "name": "dms_pocket_dst_file",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "Destination File"
                                }
                            }
                        },
                        {
                            "name": "dms_operation",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Read"
                                            },
                                            "v": "dms-r"
                                        },
                                        {
                                            "l": {
                                                "en-US": "Write"
                                            },
                                            "v": "dms-w"
                                        },
                                        {
                                            "l": {
                                                "en-US": "Lookup"
                                            },
                                            "v": "dms-l"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "dms_namespace",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "OW namespace"
                                }
                            }
                        },
                        {
                            "name": "creds",
                            "type": "str",
                            "value": "178f79b4-4540-449c-a815-f3b50602aeca:0EWLwLLxVWFsBrW4Lq7Y1EuTYRcfVSsYjXQANDQ78nO9tgzT6B2nui2whli9wlc5"
                        },
                        {
                            "name": "dms_size",
                            "type": "num",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "size"
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#FFAAAA",
                    "icon": "font-awesome/fa-database"
                }
            ],
            "artifact": "registry.apps.ocphub.physics-faas.eu/custom/george:101",
            "type": "image"
        },
        {
            "flowID": "39ef55a8.55f96a",
            "flowName": "HelloFunctionV2",
            "flow": [
                {
                    "id": "39ef55a8.55f96a",
                    "type": "tab",
                    "label": "HelloFunctionV2",
                    "disabled": false,
                    "info": "",
                    "env": []
                },
                {
                    "id": "f70d642d7d615561",
                    "type": "http in",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "url": "/init",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 340,
                    "y": 180,
                    "wires": [
                        [
                            "a8ea37eb3bb8cf23"
                        ]
                    ]
                },
                {
                    "id": "ee0278d90f6393a9",
                    "type": "http in",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "url": "/run",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 340,
                    "y": 280,
                    "wires": [
                        [
                            "f52b7bec399e315a"
                        ]
                    ]
                },
                {
                    "id": "a8ea37eb3bb8cf23",
                    "type": "http response",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "x": 730,
                    "y": 180,
                    "wires": []
                },
                {
                    "id": "ab91c6c51decfbab",
                    "type": "http response",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "x": 870,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "f52b7bec399e315a",
                    "type": "function",
                    "z": "39ef55a8.55f96a",
                    "name": "hello world",
                    "func": "//console.log(msg);\n\nmsg.payload={'response':'hello '+msg.payload.value.name};\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 630,
                    "y": 280,
                    "wires": [
                        [
                            "ab91c6c51decfbab"
                        ]
                    ]
                },
                {
                    "id": "47d1123d17b41031",
                    "type": "comment",
                    "z": "39ef55a8.55f96a",
                    "name": "OW SKELETON with hello world function",
                    "info": "",
                    "x": 440,
                    "y": 360,
                    "wires": []
                },
                {
                    "id": "129fabd43047059b",
                    "type": "subflow:694cb784968dc0b9",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "env": [
                        {
                            "name": "Executor Mode",
                            "value": "NoderedFunction",
                            "type": "str"
                        }
                    ],
                    "x": 230,
                    "y": 480,
                    "wires": []
                },
                {
                    "id": "bba4b91d07643081",
                    "type": "subflow:dd8835083692860a",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "env": [
                        {
                            "name": "memory",
                            "value": "512",
                            "type": "num"
                        },
                        {
                            "name": "timeout",
                            "value": "220000",
                            "type": "num"
                        }
                    ],
                    "x": 220,
                    "y": 540,
                    "wires": []
                },
                {
                    "id": "46230eca45760f58",
                    "type": "subflow:f0b9b88b6dcb2ece",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "env": [
                        {
                            "name": "goal",
                            "value": "performance",
                            "type": "str"
                        }
                    ],
                    "x": 280,
                    "y": 640,
                    "wires": []
                },
                {
                    "id": "be87371dd5bad13a",
                    "type": "subflow:94dffc86e4af9a58",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "env": [
                        {
                            "name": "importance",
                            "value": "high",
                            "type": "str"
                        }
                    ],
                    "x": 260,
                    "y": 740,
                    "wires": []
                },
                {
                    "id": "7ec29cdc3b1457ea",
                    "type": "subflow:05f045b87080a61e",
                    "z": "39ef55a8.55f96a",
                    "name": "",
                    "env": [
                        {
                            "name": "locality",
                            "value": "aws",
                            "type": "str"
                        }
                    ],
                    "x": 250,
                    "y": 840,
                    "wires": []
                },
                {
                    "id": "eeb5210da7efebd3",
                    "type": "comment",
                    "z": "694cb784968dc0b9",
                    "name": "Instructions",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "x": 560,
                    "y": 280,
                    "wires": []
                },
                {
                    "id": "694cb784968dc0b9",
                    "type": "subflow",
                    "name": "Executor Mode",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "Executor Mode",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Service"
                                            },
                                            "v": "Service"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NoderedFunction"
                                            },
                                            "v": "NoderedFunction"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NativeSequence"
                                            },
                                            "v": "NativeSequence"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "isChoreographer",
                            "type": "str",
                            "value": "false",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "true"
                                            },
                                            "v": "true"
                                        },
                                        {
                                            "l": {
                                                "en-US": "false"
                                            },
                                            "v": "false"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "font-awesome/fa-angle-right"
                },
                {
                    "id": "827476cff63f679c",
                    "type": "comment",
                    "z": "dd8835083692860a",
                    "name": "README",
                    "info": "The node is used to indicate memory and timing preferences for the final OW action.",
                    "x": 440,
                    "y": 180,
                    "wires": []
                },
                {
                    "id": "dd8835083692860a",
                    "type": "subflow",
                    "name": "SizingAnnotator",
                    "info": "This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\n\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\n",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "memory",
                            "type": "num",
                            "value": "",
                            "ui": {
                                "label": {
                                    "en-US": "Memory (MB)"
                                }
                            }
                        },
                        {
                            "name": "timeout",
                            "type": "num",
                            "value": "",
                            "ui": {
                                "icon": "font-awesome/fa-times-circle-o",
                                "label": {
                                    "en-US": "Timeout (millisecs)"
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#E9967A",
                    "icon": "font-awesome/fa-arrows-h"
                },
                {
                    "id": "a0dfe746ee0c085b",
                    "type": "comment",
                    "z": "f0b9b88b6dcb2ece",
                    "name": "README",
                    "info": "The node is used to set the desired optimization goal: performance/energy",
                    "x": 340,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "f0b9b88b6dcb2ece",
                    "type": "subflow",
                    "name": "Optimization Goal (Flow Level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "goal",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "performance"
                                            },
                                            "v": "performance"
                                        },
                                        {
                                            "l": {
                                                "en-US": "energy"
                                            },
                                            "v": "energy"
                                        },
                                        {
                                            "l": {
                                                "en-US": "availability"
                                            },
                                            "v": "availability"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#FFAAAA",
                    "icon": "font-awesome/fa-sliders"
                },
                {
                    "id": "1896904e3b2cf282",
                    "type": "comment",
                    "z": "94dffc86e4af9a58",
                    "name": "README",
                    "info": "The node is used to indicate at the flow level what is the importance of the flow (to be taken under consideration in the scheduling aspects of PHYSICS)",
                    "x": 400,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "94dffc86e4af9a58",
                    "type": "subflow",
                    "name": "Importance (Flow level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "importance",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "high"
                                            },
                                            "v": "high"
                                        },
                                        {
                                            "l": {
                                                "en-US": "medium"
                                            },
                                            "v": "medium"
                                        },
                                        {
                                            "l": {
                                                "en-US": "low"
                                            },
                                            "v": "low"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#3FADB5",
                    "icon": "node-red/alert.svg"
                },
                {
                    "id": "30ee5c09f384361d",
                    "type": "comment",
                    "z": "05f045b87080a61e",
                    "name": "README",
                    "info": "The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name ",
                    "x": 400,
                    "y": 220,
                    "wires": []
                },
                {
                    "id": "05f045b87080a61e",
                    "type": "subflow",
                    "name": "Locality(flow level)",
                    "info": "",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "locality",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "meta": {},
                    "color": "#D8BFD8",
                    "icon": "font-awesome/fa-braille"
                }
            ],
            "artifact": "registry.apps.ocphub.physics-faas.eu/custom/george:102",
            "type": "image"
        },
        {
            "flowID": "e98bf48d7a877d25",
            "flowName": "splitjoinFunction",
            "flow": [
                {
                    "id": "e98bf48d7a877d25",
                    "type": "tab",
                    "label": "splitjoinFunction",
                    "disabled": false,
                    "info": "",
                    "env": []
                },
                {
                    "id": "6c475d976512ab6c",
                    "type": "http in",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "url": "/run",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 500,
                    "y": 500,
                    "wires": [
                        [
                            "da1cd4a2ba26b2ce"
                        ]
                    ]
                },
                {
                    "id": "d8ea5c991b7256b2",
                    "type": "http in",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "url": "/init",
                    "method": "post",
                    "upload": false,
                    "swaggerDoc": "",
                    "x": 540,
                    "y": 380,
                    "wires": [
                        [
                            "0bf6e36501ea140c"
                        ]
                    ]
                },
                {
                    "id": "0bf6e36501ea140c",
                    "type": "http response",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "statusCode": "",
                    "headers": {},
                    "x": 830,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "729306c6b37c0ec0",
                    "type": "http response",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "statusCode": "",
                    "headers": {},
                    "x": 1090,
                    "y": 500,
                    "wires": []
                },
                {
                    "id": "e385b549bc1cae8d",
                    "type": "subflow:694cb784968dc0b9",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "env": [
                        {
                            "name": "Executor Mode",
                            "value": "NoderedFunction",
                            "type": "str"
                        }
                    ],
                    "x": 500,
                    "y": 600,
                    "wires": []
                },
                {
                    "id": "da1cd4a2ba26b2ce",
                    "type": "subflow:5813b63f70690303",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "x": 780,
                    "y": 500,
                    "wires": [
                        [
                            "729306c6b37c0ec0"
                        ]
                    ]
                },
                {
                    "id": "84e7befdcccb2e4e",
                    "type": "subflow:edfbba7dd979ecf1",
                    "z": "e98bf48d7a877d25",
                    "name": "",
                    "env": [
                        {
                            "name": "affinityArtefactID",
                            "value": "registry.apps.ocphub.physics-faas.eu/custom/george:102",
                            "type": "str"
                        },
                        {
                            "name": "affinityAppID",
                            "value": "this",
                            "type": "str"
                        },
                        {
                            "name": "affinity",
                            "value": "affinity",
                            "type": "str"
                        }
                    ],
                    "x": 490,
                    "y": 680,
                    "wires": []
                },
                {
                    "id": "eeb5210da7efebd3",
                    "type": "comment",
                    "z": "694cb784968dc0b9",
                    "name": "Instructions",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "x": 560,
                    "y": 280,
                    "wires": []
                },
                {
                    "id": "694cb784968dc0b9",
                    "type": "subflow",
                    "name": "Executor Mode",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "Executor Mode",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Service"
                                            },
                                            "v": "Service"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NoderedFunction"
                                            },
                                            "v": "NoderedFunction"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NativeSequence"
                                            },
                                            "v": "NativeSequence"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "isChoreographer",
                            "type": "str",
                            "value": "false",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "true"
                                            },
                                            "v": "true"
                                        },
                                        {
                                            "l": {
                                                "en-US": "false"
                                            },
                                            "v": "false"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "font-awesome/fa-angle-right"
                },
                {
                    "id": "64f1be8afce20915",
                    "type": "openwhisk-service",
                    "z": "5813b63f70690303",
                    "name": "aws",
                    "api": "https://openwhisk.apps.ocphub.physics-faas.eu/api/v1"
                },
                {
                    "id": "1f13a2c0346f82c6",
                    "type": "tls-config",
                    "z": "5813b63f70690303",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": false,
                    "alpnprotocol": ""
                },
                {
                    "id": "770ef202c7ccecb6",
                    "type": "split",
                    "z": "5813b63f70690303",
                    "name": "",
                    "splt": "\\n",
                    "spltType": "str",
                    "arraySplt": "1",
                    "arraySpltType": "len",
                    "stream": false,
                    "addname": "",
                    "x": 330,
                    "y": 100,
                    "wires": [
                        [
                            "cb539c8dcce538f8",
                            "4b0793e93fa7e4c7"
                        ]
                    ]
                },
                {
                    "id": "fef7008cea92f52d",
                    "type": "join",
                    "z": "5813b63f70690303",
                    "name": "",
                    "mode": "auto",
                    "build": "string",
                    "property": "payload",
                    "propertyType": "msg",
                    "key": "topic",
                    "joiner": "\\n",
                    "joinerType": "str",
                    "accumulate": "false",
                    "timeout": "",
                    "count": "",
                    "reduceRight": false,
                    "x": 650,
                    "y": 100,
                    "wires": [
                        [
                            "933bd2f642873790"
                        ]
                    ]
                },
                {
                    "id": "8ca660db8c891c1f",
                    "type": "comment",
                    "z": "5813b63f70690303",
                    "name": "NEEDS CONFIGURATION WITH OW ENDPOINT",
                    "info": "",
                    "x": 470,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "ce0ad53cb5c6ef33",
                    "type": "function",
                    "z": "5813b63f70690303",
                    "name": "",
                    "func": "//msg.action=msg.payload.value.action;\n\nmsg.url=msg.payload.value.url;\nmsg.creds=msg.payload.value.creds;\n\nmsg.oldpayload=msg.payload;\nmsg.payload={};\nmsg.payload=msg.oldpayload.value.values;\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 160,
                    "y": 100,
                    "wires": [
                        [
                            "770ef202c7ccecb6"
                        ]
                    ]
                },
                {
                    "id": "933bd2f642873790",
                    "type": "function",
                    "z": "5813b63f70690303",
                    "name": "",
                    "func": "msg.newpayload=msg.payload;\nmsg.payload=[];\nmsg.payload=msg.oldpayload;\nmsg.payload.value=msg.newpayload;\n\nmsg.payload.value.myvar=env.get('setsplit');\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 800,
                    "y": 100,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "cb539c8dcce538f8",
                    "type": "debug",
                    "z": "5813b63f70690303",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 420,
                    "y": 240,
                    "wires": []
                },
                {
                    "id": "4b0793e93fa7e4c7",
                    "type": "http request",
                    "z": "5813b63f70690303",
                    "name": "",
                    "method": "POST",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "1f13a2c0346f82c6",
                    "persist": false,
                    "proxy": "",
                    "authType": "basic",
                    "senderr": false,
                    "x": 510,
                    "y": 100,
                    "wires": [
                        [
                            "fef7008cea92f52d"
                        ]
                    ]
                },
                {
                    "id": "5813b63f70690303",
                    "type": "subflow",
                    "name": "SplitJoin",
                    "info": "This is an implementation of the Single Instruction Multiple Data parallelization pattern with an output barrier.\n\nThe pattern expects the name of the parallel function to invoke in the msg.payload.value.action field and the input array in the msg.payload.value.values field (in order to adapt to the usage inside Openwhisk). The input message array is split into individual messages in order to invoke one inner Openwhisk function with each input array row.\n\nIn the future further parameters may be added with relation to how the incoming array message is split into individual messages in order to support a more customizable job splitting in chunk sizes.",
                    "category": "PHYSICS",
                    "in": [
                        {
                            "x": 60,
                            "y": 100,
                            "wires": [
                                {
                                    "id": "ce0ad53cb5c6ef33"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 1020,
                            "y": 100,
                            "wires": [
                                {
                                    "id": "933bd2f642873790",
                                    "port": 0
                                }
                            ]
                        }
                    ],
                    "env": [],
                    "meta": {},
                    "color": "#FFAAAA"
                },
                {
                    "id": "1dc64fe5f2cdee5b",
                    "type": "comment",
                    "z": "edfbba7dd979ecf1",
                    "name": "README",
                    "info": "Affinity annotator node",
                    "x": 500,
                    "y": 200,
                    "wires": []
                },
                {
                    "id": "edfbba7dd979ecf1",
                    "type": "subflow",
                    "name": "Affinity Annotator",
                    "info": "\n\nThis is a semantic node to indicate that a flow has affinity considerations with flows in the same or other app. This information may be useful for the placement and optimization processes of PHYSICS. \n\nThe target action is referenced through the deployment artefact id (e.g. imageID), so it needs to have been built beforehand. The relevant information will be included in the Build Tab of the Design Environment.\n\nThe app ID can be used to indicate an action belonging to a different app. Therefore this information needs to be available in the Design Environment (it is under the Graphs tab).\n\nIf the app ID is left empty, it is assumed that the node refers to this app, since the app ID is given during application creation and it is not available at design time.\n",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "affinityArtefactID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "affinityAppID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "affinity",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "affinity"
                                            },
                                            "v": "affinity"
                                        },
                                        {
                                            "l": {
                                                "en-US": "antiaffinity"
                                            },
                                            "v": "antiaffinity"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#FFF0F0"
                }
            ],
            "artifact": "registry.apps.ocphub.physics-faas.eu/custom/george:103",
            "type": "image"
        },
        {
            "flowID": "d616400b75eac2fb",
            "flowName": "Choreographer Service",
            "flow": [
                {
                    "id": "d616400b75eac2fb",
                    "type": "tab",
                    "label": "Choreographer Service",
                    "disabled": false,
                    "info": "",
                    "env": []
                },
                {
                    "id": "8810a3bc8cb78ac2",
                    "type": "subflow:3352c7dddc9aad6d",
                    "z": "d616400b75eac2fb",
                    "name": "HelloFunctionV2",
                    "env": [
                        {
                            "name": "OWendpoint",
                            "value": "",
                            "type": "str"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "value": "HelloFunctionV2",
                            "type": "str"
                        },
                        {
                            "name": "method",
                            "value": "",
                            "type": "str"
                        }
                    ],
                    "x": 440,
                    "y": 460,
                    "wires": [
                        [
                            "e7f535ba18f5292b",
                            "7418d9069a25f945",
                            "65a2fd77d5dd173b"
                        ]
                    ]
                },
                {
                    "id": "9ba268dcb3efb932",
                    "type": "subflow:3352c7dddc9aad6d",
                    "z": "d616400b75eac2fb",
                    "name": "dms",
                    "env": [
                        {
                            "name": "OWendpoint",
                            "value": "",
                            "type": "env"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "value": "Hello_DMS",
                            "type": "str"
                        },
                        {
                            "name": "method",
                            "value": "",
                            "type": "str"
                        }
                    ],
                    "x": 850,
                    "y": 360,
                    "wires": [
                        [
                            "71b69c0824b8d1a5"
                        ]
                    ]
                },
                {
                    "id": "e05334d691cc7c32",
                    "type": "subflow:3352c7dddc9aad6d",
                    "z": "d616400b75eac2fb",
                    "name": "sj",
                    "env": [
                        {
                            "name": "OWendpoint",
                            "value": "",
                            "type": "env"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "value": "splitjoinFunction",
                            "type": "str"
                        },
                        {
                            "name": "dependentAppID",
                            "value": "this",
                            "type": "str"
                        },
                        {
                            "name": "method",
                            "value": "",
                            "type": "str"
                        }
                    ],
                    "x": 850,
                    "y": 540,
                    "wires": [
                        [
                            "4d3d411586a1b3a6"
                        ]
                    ]
                },
                {
                    "id": "66611dafc701f137",
                    "type": "comment",
                    "z": "d616400b75eac2fb",
                    "name": "INFO",
                    "info": "All invoked actions in this flow should have been included in the defined application graph.\n\nTheir actual deployment can be performed in the same or other OW clusters. \n\nThis flow should be executed as a service or as a OW action. In both cases we need to find the \ndetails of the OW environment for each flow, as decided by WP4, as environment variables in the\ncontainer used to run this flow.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.",
                    "x": 390,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "6b7eef155fe168bc",
                    "type": "inject",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "props": [
                        {
                            "p": "payload"
                        },
                        {
                            "p": "topic",
                            "vt": "str"
                        }
                    ],
                    "repeat": "",
                    "crontab": "",
                    "once": false,
                    "onceDelay": 0.1,
                    "topic": "",
                    "payload": "{}",
                    "payloadType": "json",
                    "x": 110,
                    "y": 460,
                    "wires": [
                        [
                            "b2131f1991cfb131"
                        ]
                    ]
                },
                {
                    "id": "e7f535ba18f5292b",
                    "type": "debug",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 450,
                    "y": 360,
                    "wires": []
                },
                {
                    "id": "ac02549b1db0d74c",
                    "type": "comment",
                    "z": "d616400b75eac2fb",
                    "name": "FIX",
                    "info": "check how to pass info, maybe as annotations?\n\nhandle UI inputs as second after environment\n\n\n\n",
                    "x": 560,
                    "y": 240,
                    "wires": []
                },
                {
                    "id": "7418d9069a25f945",
                    "type": "function",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "func": "msg.payload={};\nmsg.payload.value={};\nmsg.payload.value.name='george';\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 660,
                    "y": 360,
                    "wires": [
                        [
                            "9ba268dcb3efb932"
                        ]
                    ]
                },
                {
                    "id": "65a2fd77d5dd173b",
                    "type": "function",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "func": "msg.payload={};\nmsg.payload.value={};\nmsg.payload.value={\"values\":[\n    {'name':'george'},\n    {'name':'maria'},\n    {'name':'akis'},\n    {'name':'alex'}\n    ], \n    \"creds\":\"17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF\",\n    \"url\":\"https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/_/actions/HelloFunctionV2_b1d8d498-4197-420a-9ef8-56fec0c6d4ef.json?blocking=true\"\n};\n\n//msg.url='https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/_/actions/HelloFunctionV2_b1d8d498-4197-420a-9ef8-56fec0c6d4ef.json?blocking=true';\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 660,
                    "y": 540,
                    "wires": [
                        [
                            "e05334d691cc7c32"
                        ]
                    ]
                },
                {
                    "id": "079bfcdcd66f41ae",
                    "type": "comment",
                    "z": "d616400b75eac2fb",
                    "name": "LIMITATION",
                    "info": "THE ORCHESTRATING FLOW IS ABLE TO BE EXECUTED ONLY AS A SERVICE DUE TO THE FACT THAT ENV VARIABLES CAN NOT BE PASSED IN OW ACTIONS.",
                    "x": 310,
                    "y": 160,
                    "wires": []
                },
                {
                    "id": "5d32ba1c269db8e0",
                    "type": "subflow:694cb784968dc0b9",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "env": [
                        {
                            "name": "Executor Mode",
                            "value": "Service",
                            "type": "str"
                        },
                        {
                            "name": "isChoreographer",
                            "value": "true",
                            "type": "str"
                        }
                    ],
                    "x": 320,
                    "y": 200,
                    "wires": []
                },
                {
                    "id": "4d3d411586a1b3a6",
                    "type": "debug",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 1030,
                    "y": 540,
                    "wires": []
                },
                {
                    "id": "71b69c0824b8d1a5",
                    "type": "debug",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "false",
                    "statusVal": "",
                    "statusType": "auto",
                    "x": 1050,
                    "y": 360,
                    "wires": []
                },
                {
                    "id": "f3871cad3d0f0969",
                    "type": "subflow:789351ac.02c9d",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "x": 450,
                    "y": 820,
                    "wires": [
                        [],
                        [],
                        []
                    ]
                },
                {
                    "id": "b2131f1991cfb131",
                    "type": "function",
                    "z": "d616400b75eac2fb",
                    "name": "",
                    "func": "msg.payload={};\nmsg.payload.value={};\nmsg.payload.value.name='george';\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 260,
                    "y": 460,
                    "wires": [
                        [
                            "8810a3bc8cb78ac2"
                        ]
                    ]
                },
                {
                    "id": "a80b2fa1299e3bb8",
                    "type": "tls-config",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": true,
                    "alpnprotocol": ""
                },
                {
                    "id": "b9c86339cffd54ea",
                    "type": "http request",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "method": "use",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "a80b2fa1299e3bb8",
                    "persist": false,
                    "proxy": "",
                    "authType": "",
                    "x": 370,
                    "y": 180,
                    "wires": [
                        [
                            "27c3b0af40ccb4e0"
                        ]
                    ]
                },
                {
                    "id": "60d351e91c4f1f19",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "GET ENV OF ENDPOINT AND KEYS",
                    "func": "msg.url=env.get('OWendpoint');\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(env.get('token')).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 350,
                    "y": 120,
                    "wires": [
                        [
                            "b9c86339cffd54ea"
                        ]
                    ]
                },
                {
                    "id": "d01b33ba9a399455",
                    "type": "subflow:789351ac.02c9d",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "env": [],
                    "x": 390,
                    "y": 300,
                    "wires": [
                        [],
                        [],
                        []
                    ]
                },
                {
                    "id": "27c3b0af40ccb4e0",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "change url",
                    "func": "msg.headers={};\nmsg.url=env.get('')+'api/v1/namespaces/_/activations/';\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 370,
                    "y": 240,
                    "wires": [
                        [
                            "d01b33ba9a399455"
                        ]
                    ]
                },
                {
                    "id": "09223c13e462b3ba",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "func": "const propnamevar=env.get('actionName')+'_OW_endpoint';\n//+1 for creds user:key\n\nvar globalenv = global.get(\"env2\");//needs to be set in the settings file, globalContext env2:process.env\nmsg.payload4=globalenv[propnamevar];\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 260,
                    "y": 80,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "3352c7dddc9aad6d",
                    "type": "subflow",
                    "name": "Dynamic OW action",
                    "info": "This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\n\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\n\n\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\n$ACTIONNAME_OW_CREDS=user:pwd\n\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\n\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.\n\nPENDING: check how to pass token from UI to http request node",
                    "category": "PHYSICS Annotators",
                    "in": [
                        {
                            "x": 140,
                            "y": 120,
                            "wires": [
                                {
                                    "id": "09223c13e462b3ba"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 800,
                            "y": 180,
                            "wires": [
                                {
                                    "id": "d01b33ba9a399455",
                                    "port": 0
                                },
                                {
                                    "id": "09223c13e462b3ba",
                                    "port": 0
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "OWendpoint",
                            "type": "env",
                            "value": "{$ACTION}_OW_ENDPOINT"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "type": "str",
                            "value": "dockeraction"
                        },
                        {
                            "name": "dependentArtefactID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "dependentAppID",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "node-red/function.svg"
                },
                {
                    "id": "a80b2fa1299e3bb8",
                    "type": "tls-config",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": true,
                    "alpnprotocol": ""
                },
                {
                    "id": "b9c86339cffd54ea",
                    "type": "http request",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "method": "use",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "a80b2fa1299e3bb8",
                    "persist": false,
                    "proxy": "",
                    "authType": "",
                    "x": 370,
                    "y": 180,
                    "wires": [
                        [
                            "27c3b0af40ccb4e0"
                        ]
                    ]
                },
                {
                    "id": "60d351e91c4f1f19",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "GET ENV OF ENDPOINT AND KEYS",
                    "func": "msg.url=env.get('OWendpoint');\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(env.get('token')).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 350,
                    "y": 120,
                    "wires": [
                        [
                            "b9c86339cffd54ea"
                        ]
                    ]
                },
                {
                    "id": "d01b33ba9a399455",
                    "type": "subflow:789351ac.02c9d",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "env": [],
                    "x": 390,
                    "y": 300,
                    "wires": [
                        [],
                        [],
                        []
                    ]
                },
                {
                    "id": "27c3b0af40ccb4e0",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "change url",
                    "func": "msg.headers={};\nmsg.url=env.get('')+'api/v1/namespaces/_/activations/';\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 370,
                    "y": 240,
                    "wires": [
                        [
                            "d01b33ba9a399455"
                        ]
                    ]
                },
                {
                    "id": "09223c13e462b3ba",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "func": "const propnamevar=env.get('actionName')+'_OW_endpoint';\n//+1 for creds user:key\n\nvar globalenv = global.get(\"env2\");//needs to be set in the settings file, globalContext env2:process.env\nmsg.payload4=globalenv[propnamevar];\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 260,
                    "y": 80,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "3352c7dddc9aad6d",
                    "type": "subflow",
                    "name": "Dynamic OW action",
                    "info": "This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\n\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\n\n\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\n$ACTIONNAME_OW_CREDS=user:pwd\n\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\n\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.\n\nPENDING: check how to pass token from UI to http request node",
                    "category": "PHYSICS Annotators",
                    "in": [
                        {
                            "x": 140,
                            "y": 120,
                            "wires": [
                                {
                                    "id": "09223c13e462b3ba"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 800,
                            "y": 180,
                            "wires": [
                                {
                                    "id": "d01b33ba9a399455",
                                    "port": 0
                                },
                                {
                                    "id": "09223c13e462b3ba",
                                    "port": 0
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "OWendpoint",
                            "type": "env",
                            "value": "{$ACTION}_OW_ENDPOINT"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "type": "str",
                            "value": "dockeraction"
                        },
                        {
                            "name": "dependentArtefactID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "dependentAppID",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "node-red/function.svg"
                },
                {
                    "id": "a80b2fa1299e3bb8",
                    "type": "tls-config",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": true,
                    "alpnprotocol": ""
                },
                {
                    "id": "b9c86339cffd54ea",
                    "type": "http request",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "method": "use",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "a80b2fa1299e3bb8",
                    "persist": false,
                    "proxy": "",
                    "authType": "",
                    "x": 370,
                    "y": 180,
                    "wires": [
                        [
                            "27c3b0af40ccb4e0"
                        ]
                    ]
                },
                {
                    "id": "60d351e91c4f1f19",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "GET ENV OF ENDPOINT AND KEYS",
                    "func": "msg.url=env.get('OWendpoint');\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(env.get('token')).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 350,
                    "y": 120,
                    "wires": [
                        [
                            "b9c86339cffd54ea"
                        ]
                    ]
                },
                {
                    "id": "d01b33ba9a399455",
                    "type": "subflow:789351ac.02c9d",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "env": [],
                    "x": 390,
                    "y": 300,
                    "wires": [
                        [],
                        [],
                        []
                    ]
                },
                {
                    "id": "27c3b0af40ccb4e0",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "change url",
                    "func": "msg.headers={};\nmsg.url=env.get('')+'api/v1/namespaces/_/activations/';\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 370,
                    "y": 240,
                    "wires": [
                        [
                            "d01b33ba9a399455"
                        ]
                    ]
                },
                {
                    "id": "09223c13e462b3ba",
                    "type": "function",
                    "z": "3352c7dddc9aad6d",
                    "name": "",
                    "func": "const propnamevar=env.get('actionName')+'_OW_endpoint';\n//+1 for creds user:key\n\nvar globalenv = global.get(\"env2\");//needs to be set in the settings file, globalContext env2:process.env\nmsg.payload4=globalenv[propnamevar];\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 260,
                    "y": 80,
                    "wires": [
                        []
                    ]
                },
                {
                    "id": "3352c7dddc9aad6d",
                    "type": "subflow",
                    "name": "Dynamic OW action",
                    "info": "This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\n\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\n\n\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\n$ACTIONNAME_OW_CREDS=user:pwd\n\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\n\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.\n\nPENDING: check how to pass token from UI to http request node",
                    "category": "PHYSICS Annotators",
                    "in": [
                        {
                            "x": 140,
                            "y": 120,
                            "wires": [
                                {
                                    "id": "09223c13e462b3ba"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 800,
                            "y": 180,
                            "wires": [
                                {
                                    "id": "d01b33ba9a399455",
                                    "port": 0
                                },
                                {
                                    "id": "09223c13e462b3ba",
                                    "port": 0
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "OWendpoint",
                            "type": "env",
                            "value": "{$ACTION}_OW_ENDPOINT"
                        },
                        {
                            "name": "token",
                            "type": "cred"
                        },
                        {
                            "name": "actionName",
                            "type": "str",
                            "value": "dockeraction"
                        },
                        {
                            "name": "dependentArtefactID",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "dependentAppID",
                            "type": "str",
                            "value": ""
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "node-red/function.svg"
                },
                {
                    "id": "eeb5210da7efebd3",
                    "type": "comment",
                    "z": "694cb784968dc0b9",
                    "name": "Instructions",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "x": 560,
                    "y": 280,
                    "wires": []
                },
                {
                    "id": "694cb784968dc0b9",
                    "type": "subflow",
                    "name": "Executor Mode",
                    "info": "The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ",
                    "category": "PHYSICS Annotators",
                    "in": [],
                    "out": [],
                    "env": [
                        {
                            "name": "Executor Mode",
                            "type": "str",
                            "value": "",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "Service"
                                            },
                                            "v": "Service"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NoderedFunction"
                                            },
                                            "v": "NoderedFunction"
                                        },
                                        {
                                            "l": {
                                                "en-US": "NativeSequence"
                                            },
                                            "v": "NativeSequence"
                                        }
                                    ]
                                }
                            }
                        },
                        {
                            "name": "isChoreographer",
                            "type": "str",
                            "value": "false",
                            "ui": {
                                "type": "select",
                                "opts": {
                                    "opts": [
                                        {
                                            "l": {
                                                "en-US": "true"
                                            },
                                            "v": "true"
                                        },
                                        {
                                            "l": {
                                                "en-US": "false"
                                            },
                                            "v": "false"
                                        }
                                    ]
                                }
                            }
                        }
                    ],
                    "meta": {},
                    "color": "#C0DEED",
                    "icon": "font-awesome/fa-angle-right"
                },
                {
                    "id": "2934f390.711324",
                    "type": "tls-config",
                    "z": "789351ac.02c9d",
                    "name": "",
                    "cert": "",
                    "key": "",
                    "ca": "",
                    "certname": "",
                    "keyname": "",
                    "caname": "",
                    "servername": "",
                    "verifyservercert": false
                },
                {
                    "id": "7d194c10.33b51c",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "defaults+activation id",
                    "func": "\nif (msg.hasOwnProperty('maxAttempts')){\n    msg.iterations=msg.maxAttempts;\n} else {\n    msg.iterations=env.get('maxAttempts');\n}\n//needed to reset the iterations after function chaining\nmsg.defaultAttempts=msg.iterations;\n\nif (msg.hasOwnProperty('pollPeriod')){\n    \n} else {\n    msg.pollPeriod=env.get('pollPeriod');\n}\n\nif (msg.hasOwnProperty('method')){\n    \n} else {\n    msg.method=env.get('method');\n}\n\nif (msg.hasOwnProperty('url')){\n    \n} else {\n    msg.url=env.get('url');\n}\n\nif (msg.hasOwnProperty('retryCode')){\n    \n} else {\n    msg.retryCode=env.get('retryCode');\n}\n\nif (msg.hasOwnProperty('acceptCode')){\n    \n} else {\n    msg.acceptCode=env.get('acceptCode');\n}\n\nif (msg.hasOwnProperty('creds')){\n    \n} else {\n    msg.creds=env.get('creds');\n}\n\nif (msg.hasOwnProperty('functionChain')){\n    \n} else {\n    msg.functionChain=env.get('functionChain');\n}\n\nif (msg.hasOwnProperty('inputData')){\n    if (msg.inputData.hasOwnProperty('creds')){\n        msg.creds=msg.inputData.creds;\n    }\n}\n\n\n\nmsg.delay=msg.pollPeriod;\nmsg.start=Date.now();\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 200,
                    "y": 160,
                    "wires": [
                        [
                            "cad17b04.a2b4d8"
                        ]
                    ]
                },
                {
                    "id": "4be3f205.3e8dc4",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "iterations--",
                    "func": "msg.iterations=msg.iterations-1;\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "x": 350,
                    "y": 300,
                    "wires": [
                        [
                            "c2cf68b7.263d4",
                            "d8305759.866988"
                        ]
                    ]
                },
                {
                    "id": "c2cf68b7.263d4",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "if iterations finished",
                    "property": "iterations",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "gte",
                            "v": "1",
                            "vt": "num"
                        },
                        {
                            "t": "lt",
                            "v": "1",
                            "vt": "num"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 550,
                    "y": 300,
                    "wires": [
                        [
                            "cad17b04.a2b4d8"
                        ],
                        []
                    ]
                },
                {
                    "id": "76299695.812bd8",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "SUCCESS",
                    "info": "",
                    "x": 1100,
                    "y": 60,
                    "wires": []
                },
                {
                    "id": "48093072.b17a6",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "FINAL FAIL",
                    "info": "",
                    "x": 890,
                    "y": 360,
                    "wires": []
                },
                {
                    "id": "d5960f2f.2e9448",
                    "type": "delay",
                    "z": "789351ac.02c9d",
                    "name": "delay",
                    "pauseType": "delayv",
                    "timeout": "5",
                    "timeoutUnits": "seconds",
                    "rate": "1",
                    "nbRateUnits": "1",
                    "rateUnits": "second",
                    "randomFirst": "1",
                    "randomLast": "5",
                    "randomUnits": "seconds",
                    "drop": false,
                    "outputs": 1,
                    "x": 170,
                    "y": 300,
                    "wires": [
                        [
                            "4be3f205.3e8dc4"
                        ]
                    ]
                },
                {
                    "id": "471b3d64.265894",
                    "type": "http request",
                    "z": "789351ac.02c9d",
                    "name": "",
                    "method": "GET",
                    "ret": "obj",
                    "paytoqs": "ignore",
                    "url": "",
                    "tls": "2934f390.711324",
                    "persist": false,
                    "proxy": "",
                    "authType": "",
                    "x": 590,
                    "y": 160,
                    "wires": [
                        [
                            "8694180b.ec1c68"
                        ]
                    ]
                },
                {
                    "id": "8694180b.ec1c68",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "Status code check",
                    "property": "statusCode",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "lte",
                            "v": "acceptCode",
                            "vt": "msg"
                        },
                        {
                            "t": "gte",
                            "v": "retryCode",
                            "vt": "msg"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 810,
                    "y": 160,
                    "wires": [
                        [
                            "f9d0aba7.72382"
                        ],
                        [
                            "d5960f2f.2e9448"
                        ]
                    ]
                },
                {
                    "id": "ef03414f.ad9d78",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "RETRY FAIL",
                    "info": "",
                    "x": 890,
                    "y": 260,
                    "wires": []
                },
                {
                    "id": "66bbc0cf.0c62f",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "BEFORE AUTH",
                    "active": true,
                    "tosidebar": true,
                    "console": false,
                    "tostatus": false,
                    "complete": "true",
                    "targetType": "full",
                    "x": 370,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "13791c2d.8cea7c",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "URL",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "url",
                    "targetType": "msg",
                    "x": 580,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "cad17b04.a2b4d8",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "add auth",
                    "func": "msg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 420,
                    "y": 160,
                    "wires": [
                        [
                            "471b3d64.265894"
                        ]
                    ]
                },
                {
                    "id": "f2b7c4e4.a24c3",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "adapt to new activation",
                    "func": "\n\nmsg.url=msg.payload.response.result.newActivationIDURL;\nmsg.iterations=msg.defaultAttempts+1;\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\nreturn msg;",
                    "outputs": 1,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 1500,
                    "y": 160,
                    "wires": [
                        [
                            "d5960f2f.2e9448",
                            "ee1dbf44.7368f8"
                        ]
                    ]
                },
                {
                    "id": "c338e47b.b00ed",
                    "type": "comment",
                    "z": "789351ac.02c9d",
                    "name": "FUNCTION CHAIN CONTINUATION",
                    "info": "",
                    "x": 1240,
                    "y": 240,
                    "wires": []
                },
                {
                    "id": "ee1dbf44.7368f8",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "AFTER CONTINUATION IN Poll2Push",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1420,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "f9d0aba7.72382",
                    "type": "switch",
                    "z": "789351ac.02c9d",
                    "name": "is Chain",
                    "property": "functionChain",
                    "propertyType": "msg",
                    "rules": [
                        {
                            "t": "false"
                        },
                        {
                            "t": "true"
                        }
                    ],
                    "checkall": "true",
                    "repair": false,
                    "outputs": 2,
                    "x": 1020,
                    "y": 160,
                    "wires": [
                        [],
                        [
                            "6da1eea0.969368",
                            "1bbc6fa0.4879c"
                        ]
                    ]
                },
                {
                    "id": "6da1eea0.969368",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "RESULT STATUS",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1100,
                    "y": 300,
                    "wires": []
                },
                {
                    "id": "f20a68d.9711598",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "AFTER CODE CHECK",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "functionChain",
                    "targetType": "msg",
                    "x": 890,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "36905e62.dfad92",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP1",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1120,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "9610a737.bf275",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP2",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1300,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "c52af08f.756ee8",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "TOP3",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "payload",
                    "targetType": "msg",
                    "x": 1600,
                    "y": 100,
                    "wires": []
                },
                {
                    "id": "1bbc6fa0.4879c",
                    "type": "function",
                    "z": "789351ac.02c9d",
                    "name": "compare completion",
                    "func": "console.log('IN COMPARE COMPLETION',msg.payload.response);\nif (msg.payload.response.result.status==='Completed'){\n    return [msg,null];\n} else {\n    return [null,msg];\n}\n",
                    "outputs": 2,
                    "noerr": 0,
                    "initialize": "",
                    "finalize": "",
                    "libs": [],
                    "x": 1240,
                    "y": 160,
                    "wires": [
                        [
                            "c52af08f.756ee8"
                        ],
                        [
                            "f2b7c4e4.a24c3"
                        ]
                    ]
                },
                {
                    "id": "d8305759.866988",
                    "type": "debug",
                    "z": "789351ac.02c9d",
                    "name": "URL",
                    "active": true,
                    "tosidebar": true,
                    "console": true,
                    "tostatus": false,
                    "complete": "iterations",
                    "targetType": "msg",
                    "x": 500,
                    "y": 380,
                    "wires": []
                },
                {
                    "id": "789351ac.02c9d",
                    "type": "subflow",
                    "name": "PollTOPushConverterFC",
                    "info": "This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\n\nThe according function should return as a response the following structure:\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \n\nThe node also can get credentials from the msg.creds field of the input message.\n\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\n\nThe node has three outputs:\n - Output 1 indicates successful finalization of the API call\n - Output 2 indicates intermediate failure and was added to return the reason for failure\n - Output 3 indicates final failure after max attempts\n\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\n\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\n\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\n\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\n \n",
                    "category": "PHYSICS Helpers",
                    "in": [
                        {
                            "x": 60,
                            "y": 160,
                            "wires": [
                                {
                                    "id": "7d194c10.33b51c"
                                }
                            ]
                        }
                    ],
                    "out": [
                        {
                            "x": 1380,
                            "y": 40,
                            "wires": [
                                {
                                    "id": "f9d0aba7.72382",
                                    "port": 0
                                },
                                {
                                    "id": "1bbc6fa0.4879c",
                                    "port": 0
                                }
                            ]
                        },
                        {
                            "x": 780,
                            "y": 260,
                            "wires": [
                                {
                                    "id": "c2cf68b7.263d4",
                                    "port": 0
                                }
                            ]
                        },
                        {
                            "x": 780,
                            "y": 360,
                            "wires": [
                                {
                                    "id": "c2cf68b7.263d4",
                                    "port": 1
                                }
                            ]
                        }
                    ],
                    "env": [
                        {
                            "name": "maxAttempts",
                            "type": "str",
                            "value": "3"
                        },
                        {
                            "name": "pollPeriod",
                            "type": "str",
                            "value": "3000"
                        },
                        {
                            "name": "method",
                            "type": "str",
                            "value": ""
                        },
                        {
                            "name": "url",
                            "type": "str",
                            "value": "http://10.100.59.182:3233/api/v1/namespaces/_/activations/"
                        },
                        {
                            "name": "retryCode",
                            "type": "num",
                            "value": "202"
                        },
                        {
                            "name": "acceptCode",
                            "type": "num",
                            "value": "200"
                        },
                        {
                            "name": "functionChain",
                            "type": "bool",
                            "value": "true"
                        }
                    ],
                    "meta": {},
                    "color": "#b4e8a9"
                }
            ],
            "artifact": "registry.apps.ocphub.physics-faas.eu/custom/george:99",
            "type": "image"
        }
    ],
    "displayName": "",
    "branchName": "george"
}