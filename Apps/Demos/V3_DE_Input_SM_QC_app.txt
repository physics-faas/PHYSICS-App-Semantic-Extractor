{"flows":[{"flowID":"cc81b2e355ce5694","flowName":"QC2","flow":[{"id":"cc81b2e355ce5694","type":"tab","label":"QC2","disabled":false,"info":"","env":[]},{"id":"ae5de2de81cfad54","type":"debug","z":"cc81b2e355ce5694","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":130,"y":820,"wires":[]},{"id":"76fc91c809b3024b","type":"image","z":"cc81b2e355ce5694","name":"","width":"300","data":"payload.image","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":160,"y":860,"wires":[]},{"id":"1778a57288f1e208","type":"image","z":"cc81b2e355ce5694","name":"","width":"600","data":"payload.image","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":480,"y":860,"wires":[]},{"id":"39e88c22cf495373","type":"http response","z":"cc81b2e355ce5694","name":"AllOK","statusCode":"200","headers":{},"x":1410,"y":400,"wires":[]},{"id":"9255c806f79d5e3c","type":"http response","z":"cc81b2e355ce5694","name":"CertaintyOK QualityNotOK","statusCode":"400","headers":{},"x":1480,"y":440,"wires":[]},{"id":"28c1998c014e18b0","type":"http response","z":"cc81b2e355ce5694","name":"CertaintyNotOK","statusCode":"400","headers":{},"x":1520,"y":720,"wires":[]},{"id":"a4beb21d363277ca","type":"comment","z":"cc81b2e355ce5694","name":"Notify Operator","info":"","x":1520,"y":760,"wires":[]},{"id":"b04443e064b94e38","type":"debug","z":"cc81b2e355ce5694","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1110,"y":820,"wires":[]},{"id":"c1916b788677cea5","type":"image","z":"cc81b2e355ce5694","name":"","width":"600","data":"payload.image","dataType":"msg","thumbnail":false,"active":true,"pass":false,"outputs":0,"x":1120,"y":860,"wires":[]},{"id":"b35bd645a6863235","type":"subflow:aa40c3c502023f84","z":"cc81b2e355ce5694","name":"","x":640,"y":460,"wires":[["4d0646eb0e987866"],["666dcd7d4bac95b3","f2569f083176ae03"]]},{"id":"e823a15efde8481b","type":"subflow:aa40c3c502023f84","z":"cc81b2e355ce5694","name":"","x":1080,"y":620,"wires":[["6a17a52884acb602"],["28c1998c014e18b0"]]},{"id":"973f2de05456700a","type":"show-value","z":"cc81b2e355ce5694","name":"Result (UpperPart)","path":"results.0","x":490,"y":800,"wires":[[]]},{"id":"96c79f894df8537d","type":"show-value","z":"cc81b2e355ce5694","name":"Result (LowerPart)","path":"results.1","x":490,"y":740,"wires":[[]]},{"id":"4c564c615ab9bae9","type":"show-value","z":"cc81b2e355ce5694","name":"Expected parts","path":"expected","x":160,"y":760,"wires":[[]]},{"id":"4d0646eb0e987866","type":"subflow:591464d0f904f811","z":"cc81b2e355ce5694","name":"","x":1040,"y":420,"wires":[["39e88c22cf495373","16119ed4515be054"],["9255c806f79d5e3c","16119ed4515be054"]]},{"id":"61f4d67cfa2b8ba8","type":"http in","z":"cc81b2e355ce5694","name":"","url":"/init","method":"post","upload":false,"swaggerDoc":"","x":140,"y":380,"wires":[["3f55d8dada5b7061"]]},{"id":"3f55d8dada5b7061","type":"http response","z":"cc81b2e355ce5694","name":"","statusCode":"","headers":{},"x":440,"y":380,"wires":[]},{"id":"e4332c1de7729695","type":"http in","z":"cc81b2e355ce5694","name":"","url":"/run","method":"post","upload":false,"swaggerDoc":"","x":120,"y":460,"wires":[["23253bb27160603c","c45fc1401c202d24"]]},{"id":"c45fc1401c202d24","type":"change","z":"cc81b2e355ce5694","name":"OW value -> payload","rules":[{"t":"set","p":"payload","pt":"msg","to":"msg.payload.value","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":180,"y":540,"wires":[["ae5de2de81cfad54","76fc91c809b3024b","cd6e6ff477813c62","c524b5dcc1cd8ce9"]]},{"id":"cd6e6ff477813c62","type":"subflow:61834c2663a6ece6","z":"cc81b2e355ce5694","name":"","env":[{"name":"totalcount","value":"2","type":"num"},{"name":"position","value":"1","type":"num"}],"x":390,"y":460,"wires":[["b35bd645a6863235"]]},{"id":"ee3d90e9a1c7f018","type":"subflow:61834c2663a6ece6","z":"cc81b2e355ce5694","name":"","env":[{"name":"totalcount","value":"2","type":"num"},{"name":"position","value":"2","type":"num"}],"x":490,"y":540,"wires":[["b35bd645a6863235"]]},{"id":"d1f2db35a2e177e9","type":"subflow:61834c2663a6ece6","z":"cc81b2e355ce5694","name":"","env":[{"name":"totalcount","value":"2","type":"num"},{"name":"position","value":"2","type":"num"}],"x":1070,"y":560,"wires":[["e823a15efde8481b"]]},{"id":"666dcd7d4bac95b3","type":"subflow:61834c2663a6ece6","z":"cc81b2e355ce5694","name":"","env":[{"name":"totalcount","value":"2","type":"num"},{"name":"position","value":"1","type":"num"}],"x":690,"y":620,"wires":[["e823a15efde8481b"]]},{"id":"16119ed4515be054","type":"debug","z":"cc81b2e355ce5694","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1330,"y":360,"wires":[]},{"id":"23253bb27160603c","type":"debug","z":"cc81b2e355ce5694","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":290,"y":420,"wires":[]},{"id":"6d44bd9c795b2ef8","type":"subflow:694cb784968dc0b9","z":"cc81b2e355ce5694","name":"","env":[{"name":"Executor Mode","value":"NoderedFunction","type":"str"}],"x":680,"y":360,"wires":[]},{"id":"0d0b17acd84267df","type":"subflow:dd8835083692860a","z":"cc81b2e355ce5694","name":"","env":[{"name":"memory","value":"512","type":"num"},{"name":"timeout","value":"300000","type":"num"}],"x":880,"y":360,"wires":[[]]},{"id":"6a17a52884acb602","type":"change","z":"cc81b2e355ce5694","name":"","rules":[{"t":"set","p":"payload[1].complex","pt":"msg","to":"true","tot":"bool"}],"action":"","property":"","from":"","to":"","reg":false,"x":1350,"y":560,"wires":[["4d0646eb0e987866"]]},{"id":"1c9e4394410d845a","type":"http request","z":"cc81b2e355ce5694","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"basic","senderr":false,"headers":[],"x":450,"y":1040,"wires":[[]]},{"id":"9a08741c3144cee3","type":"function","z":"cc81b2e355ce5694","name":"insert action invocation url - simple","func":"var method='simple_qc_aherget_1cf38725-f5f6-4874-a47c-44e7706548c2';\nmsg.url=`https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/guest/actions/${method}?blocking=true&result=true`;\n\n\nvar creds='17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF';\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":200,"y":1040,"wires":[["1c9e4394410d845a"]]},{"id":"106e0b74c991d632","type":"function","z":"cc81b2e355ce5694","name":"insert action invocation url - complex","func":"var method='complex-qc-v5_aherget_cae54468-41dc-4040-9112-f910b37b9cd0';\nmsg.url=`https://openwhisk.apps.ocphub.physics-faas.eu/api/v1/namespaces/guest/actions/${method}?blocking=true&result=true`;\n\n\nvar creds='17dz39c2-62f7-3ed6-9b88-925ce4l3c104:459bO3xUERmNZ9v2BLU1dRYFpXlPkccOFqm31LdAsMgRU4VrNZ9dhORZGuLJGIqF';\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":1020,"wires":[["d1497d8c9d4233d9"]]},{"id":"d1497d8c9d4233d9","type":"http request","z":"cc81b2e355ce5694","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"basic","senderr":false,"headers":[],"x":1150,"y":1020,"wires":[[]]},{"id":"358f56192fe0d987","type":"subflow:cc355ea3b5a58c54","z":"cc81b2e355ce5694","name":"","env":[{"name":"locality","value":"default","type":"str"}],"x":320,"y":160,"wires":[]},{"id":"c524b5dcc1cd8ce9","type":"subflow:3352c7dddc9aad6d","z":"cc81b2e355ce5694","name":"Dynamic simple QC action","env":[{"name":"dynamicActionName","value":"simple_qc","type":"str"}],"x":380,"y":660,"wires":[["ee3d90e9a1c7f018","96c79f894df8537d","973f2de05456700a","1778a57288f1e208"]]},{"id":"f2569f083176ae03","type":"subflow:3352c7dddc9aad6d","z":"cc81b2e355ce5694","name":"Dynamic complex QC action","env":[{"name":"dynamicActionName","value":"complex_qc","type":"str"}],"x":800,"y":560,"wires":[["d1f2db35a2e177e9","b04443e064b94e38","c1916b788677cea5"]]},{"id":"b4638640181eac85","type":"subflow:789351ac.02c9d","z":"cc81b2e355ce5694","name":"","env":[{"name":"maxAttempts","value":"20","type":"str"},{"name":"pollPeriod","value":"3000","type":"num"},{"name":"method","value":"GET","type":"str"},{"name":"functionChain","value":"false","type":"bool"}],"x":710,"y":220,"wires":[[],[],[]]},{"id":"5a3afc7aff7f239e","type":"function","z":"aa40c3c502023f84","name":"check certainty","func":"// first msg should be the original request, second one from QC\n\nif (typeof msg.payload[1].results == 'undefined') {\n    return [null, msg, {payload: { fill:\"red\", shape:\"dot\", text:\"No results!\" }}]\n}\n\nvar score_total = 0\nvar score_min = 999\nfor (const result of msg.payload[1].results)\n{\n    score_total += result.score\n    // old version\n    if (result.score < score_min)\n    {\n        score_min = result.score\n    }\n    // new version\n    if (result.confidence < score_min) {\n        score_min = result.confidence\n    }\n}\n\n//const certainty = score_total / msg.payload.results.length\nconst certainty = score_min\nif (certainty > 0.8)\n{\n    // both messages for inspecting results\n    return [msg, null, {payload: { fill:\"green\", shape:\"dot\", text:\"Certainty=\" + certainty }}]\n}\nelse \n{\n    msg.payload = msg.payload[0]\n    return [null, msg, {payload: { fill:\"yellow\", shape:\"dot\", text:\"Certainty=\" + certainty }}]\n}\n","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":80,"wires":[[],[],[]],"outputLabels":["","","status"]},{"id":"10c7aa9f7e3b1b87","type":"join","z":"aa40c3c502023f84","name":"join 2 msg","mode":"auto","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":170,"y":80,"wires":[["5a3afc7aff7f239e"]]},{"id":"aa40c3c502023f84","type":"subflow","name":"QC - Check Certainty","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"10c7aa9f7e3b1b87"}]}],"out":[{"x":570,"y":60,"wires":[{"id":"5a3afc7aff7f239e","port":0}]},{"x":570,"y":100,"wires":[{"id":"5a3afc7aff7f239e","port":1}]}],"env":[],"meta":{},"color":"#DDAA99","outputLabels":["above","below"],"status":{"x":540,"y":160,"wires":[{"id":"5a3afc7aff7f239e","port":2}]}},{"id":"5a3afc7aff7f239e","type":"function","z":"aa40c3c502023f84","name":"check certainty","func":"// first msg should be the original request, second one from QC\n\nif (typeof msg.payload[1].results == 'undefined') {\n    return [null, msg, {payload: { fill:\"red\", shape:\"dot\", text:\"No results!\" }}]\n}\n\nvar score_total = 0\nvar score_min = 999\nfor (const result of msg.payload[1].results)\n{\n    score_total += result.score\n    // old version\n    if (result.score < score_min)\n    {\n        score_min = result.score\n    }\n    // new version\n    if (result.confidence < score_min) {\n        score_min = result.confidence\n    }\n}\n\n//const certainty = score_total / msg.payload.results.length\nconst certainty = score_min\nif (certainty > 0.8)\n{\n    // both messages for inspecting results\n    return [msg, null, {payload: { fill:\"green\", shape:\"dot\", text:\"Certainty=\" + certainty }}]\n}\nelse \n{\n    msg.payload = msg.payload[0]\n    return [null, msg, {payload: { fill:\"yellow\", shape:\"dot\", text:\"Certainty=\" + certainty }}]\n}\n","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":80,"wires":[[],[],[]],"outputLabels":["","","status"]},{"id":"10c7aa9f7e3b1b87","type":"join","z":"aa40c3c502023f84","name":"join 2 msg","mode":"auto","build":"array","property":"payload","propertyType":"msg","key":"topic","joiner":"\\n","joinerType":"str","accumulate":false,"timeout":"","count":"2","reduceRight":false,"reduceExp":"","reduceInit":"","reduceInitType":"","reduceFixup":"","x":170,"y":80,"wires":[["5a3afc7aff7f239e"]]},{"id":"aa40c3c502023f84","type":"subflow","name":"QC - Check Certainty","info":"","category":"","in":[{"x":40,"y":80,"wires":[{"id":"10c7aa9f7e3b1b87"}]}],"out":[{"x":570,"y":60,"wires":[{"id":"5a3afc7aff7f239e","port":0}]},{"x":570,"y":100,"wires":[{"id":"5a3afc7aff7f239e","port":1}]}],"env":[],"meta":{},"color":"#DDAA99","outputLabels":["above","below"],"status":{"x":540,"y":160,"wires":[{"id":"5a3afc7aff7f239e","port":2}]}},{"id":"05898d2a8fe617e7","type":"function","z":"591464d0f904f811","name":"Check Results","func":"\nif (typeof msg.payload[1].results == 'undefined') {\n    return [null, null, {payload: { fill:\"red\", shape:\"dot\", text:\"No results!\" }}]\n} else if (typeof msg.payload[0].expected == 'undefined') {\n    return [null, null, {payload: { fill:\"red\", shape:\"dot\", text:\"No expected parts!\" }}]\n}\n\nvar result_parts = []\nfor (const result of msg.payload[1].results)\n{\n    result_parts.push(result.class)\n    result_parts.push(result.label)  // new version\n}\n\nfor (const part of msg.payload[0].expected)\n{\n    if (!result_parts.includes(part.name))\n    {\n        msg.payload = msg.payload[1]\n        return [null, msg, {payload: { fill:\"yellow\", shape:\"dot\", text:\"Quality NOT OK! Part \"+part.name+\" not found in result!\" }}]\n    }\n}\n\nmsg.payload = msg.payload[1]\nreturn [msg, null, {payload: { fill:\"green\", shape:\"dot\", text:\"Quality OK!\" }}]","outputs":3,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":180,"wires":[[],[],[]]},{"id":"591464d0f904f811","type":"subflow","name":"Check Results","info":"","category":"","in":[{"x":60,"y":180,"wires":[{"id":"05898d2a8fe617e7"}]}],"out":[{"x":380,"y":120,"wires":[{"id":"05898d2a8fe617e7","port":0}]},{"x":400,"y":180,"wires":[{"id":"05898d2a8fe617e7","port":1}]}],"env":[],"meta":{},"color":"#DDAA99","outputLabels":["OK","Not OK"],"status":{"x":360,"y":240,"wires":[{"id":"05898d2a8fe617e7","port":2}]}},{"id":"6cf5b4224f0daa69","type":"function","z":"61834c2663a6ece6","name":"create artificial msg.parts","func":"\n//need to push the new parts down a LIFO structure?\nif (msg.hasOwnProperty(\"parts\")){\n    var parts={};\n    parts=msg.parts;\n    delete msg.parts;\n    msg.parts={};\n    msg.parts.parts=parts;\n    msg.parts.id=msg._msgid;\n} else {\n    msg.parts={};\n    msg.parts.id=msg._msgid;\n}\n\nmsg.parts.count=env.get('totalcount');\nmsg.parts.len=1;\nmsg.parts.index=env.get('position')-1;\nmsg.parts.type=\"array\";\n\n//msg.topic='topic2';\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":120,"wires":[[]]},{"id":"61834c2663a6ece6","type":"subflow","name":"BranchJoin","info":"\nTotal count is the total number of branches expected to join.\n\nPosition in sequence should be from 1 to total count.\n\nBoth variables are set via the node UI.","category":"PHYSICS","in":[{"x":140,"y":120,"wires":[{"id":"6cf5b4224f0daa69"}]}],"out":[{"x":520,"y":120,"wires":[{"id":"6cf5b4224f0daa69","port":0}]}],"env":[{"name":"totalcount","type":"num","value":"","ui":{"label":{"en-US":"Total Count"}}},{"name":"position","type":"num","value":"","ui":{"label":{"en-US":"Position in sequence"}}}],"meta":{},"color":"#FFF0F0"},{"id":"6cf5b4224f0daa69","type":"function","z":"61834c2663a6ece6","name":"create artificial msg.parts","func":"\n//need to push the new parts down a LIFO structure?\nif (msg.hasOwnProperty(\"parts\")){\n    var parts={};\n    parts=msg.parts;\n    delete msg.parts;\n    msg.parts={};\n    msg.parts.parts=parts;\n    msg.parts.id=msg._msgid;\n} else {\n    msg.parts={};\n    msg.parts.id=msg._msgid;\n}\n\nmsg.parts.count=env.get('totalcount');\nmsg.parts.len=1;\nmsg.parts.index=env.get('position')-1;\nmsg.parts.type=\"array\";\n\n//msg.topic='topic2';\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":120,"wires":[[]]},{"id":"61834c2663a6ece6","type":"subflow","name":"BranchJoin","info":"\nTotal count is the total number of branches expected to join.\n\nPosition in sequence should be from 1 to total count.\n\nBoth variables are set via the node UI.","category":"PHYSICS","in":[{"x":140,"y":120,"wires":[{"id":"6cf5b4224f0daa69"}]}],"out":[{"x":520,"y":120,"wires":[{"id":"6cf5b4224f0daa69","port":0}]}],"env":[{"name":"totalcount","type":"num","value":"","ui":{"label":{"en-US":"Total Count"}}},{"name":"position","type":"num","value":"","ui":{"label":{"en-US":"Position in sequence"}}}],"meta":{},"color":"#FFF0F0"},{"id":"6cf5b4224f0daa69","type":"function","z":"61834c2663a6ece6","name":"create artificial msg.parts","func":"\n//need to push the new parts down a LIFO structure?\nif (msg.hasOwnProperty(\"parts\")){\n    var parts={};\n    parts=msg.parts;\n    delete msg.parts;\n    msg.parts={};\n    msg.parts.parts=parts;\n    msg.parts.id=msg._msgid;\n} else {\n    msg.parts={};\n    msg.parts.id=msg._msgid;\n}\n\nmsg.parts.count=env.get('totalcount');\nmsg.parts.len=1;\nmsg.parts.index=env.get('position')-1;\nmsg.parts.type=\"array\";\n\n//msg.topic='topic2';\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":120,"wires":[[]]},{"id":"61834c2663a6ece6","type":"subflow","name":"BranchJoin","info":"\nTotal count is the total number of branches expected to join.\n\nPosition in sequence should be from 1 to total count.\n\nBoth variables are set via the node UI.","category":"PHYSICS","in":[{"x":140,"y":120,"wires":[{"id":"6cf5b4224f0daa69"}]}],"out":[{"x":520,"y":120,"wires":[{"id":"6cf5b4224f0daa69","port":0}]}],"env":[{"name":"totalcount","type":"num","value":"","ui":{"label":{"en-US":"Total Count"}}},{"name":"position","type":"num","value":"","ui":{"label":{"en-US":"Position in sequence"}}}],"meta":{},"color":"#FFF0F0"},{"id":"6cf5b4224f0daa69","type":"function","z":"61834c2663a6ece6","name":"create artificial msg.parts","func":"\n//need to push the new parts down a LIFO structure?\nif (msg.hasOwnProperty(\"parts\")){\n    var parts={};\n    parts=msg.parts;\n    delete msg.parts;\n    msg.parts={};\n    msg.parts.parts=parts;\n    msg.parts.id=msg._msgid;\n} else {\n    msg.parts={};\n    msg.parts.id=msg._msgid;\n}\n\nmsg.parts.count=env.get('totalcount');\nmsg.parts.len=1;\nmsg.parts.index=env.get('position')-1;\nmsg.parts.type=\"array\";\n\n//msg.topic='topic2';\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":120,"wires":[[]]},{"id":"61834c2663a6ece6","type":"subflow","name":"BranchJoin","info":"\nTotal count is the total number of branches expected to join.\n\nPosition in sequence should be from 1 to total count.\n\nBoth variables are set via the node UI.","category":"PHYSICS","in":[{"x":140,"y":120,"wires":[{"id":"6cf5b4224f0daa69"}]}],"out":[{"x":520,"y":120,"wires":[{"id":"6cf5b4224f0daa69","port":0}]}],"env":[{"name":"totalcount","type":"num","value":"","ui":{"label":{"en-US":"Total Count"}}},{"name":"position","type":"num","value":"","ui":{"label":{"en-US":"Position in sequence"}}}],"meta":{},"color":"#FFF0F0"},{"id":"82b665f654048ecf","type":"function","z":"694cb784968dc0b9","name":"","func":"msg.annotations={};\nmsg.annotations.executorMode=env.get('Executor Mode');","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n//msg.payload.imageName=env.get('Image Name');\n//return msg;","finalize":"","libs":[],"x":360,"y":140,"wires":[[]]},{"id":"eeb5210da7efebd3","type":"comment","z":"694cb784968dc0b9","name":"Instructions","info":"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ","x":560,"y":280,"wires":[]},{"id":"694cb784968dc0b9","type":"subflow","name":"Executor Mode","info":"The Executor Mode Annotator is a mean to describe to the PHYSICS Environment the execution mode of a given flow. There are three options\n1) Service mode: the selected flow will be deployed as a Node-RED service, thus always running\n2) Node-RED Function mode: the selected flow will be wrapped around a Node-RED runtime and registered to a target Openwhisk platform, where it will be executed as a Node-RED runtime function\n3) Native Sequence: the included functions will be packaged and registered individually at the Openwhisk platform, while their links (workflow) will be translated to the native Openwhisk sequence format and registered to the Openwhisk platform. This mode at the moment is limited to pure function nodes of Node-RED, while the workflow description is limited by the sequence abilities of Openwhisk. ","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"Executor Mode","type":"str","value":"","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"Service"},"v":"Service"},{"l":{"en-US":"NoderedFunction"},"v":"NoderedFunction"},{"l":{"en-US":"NativeSequence"},"v":"NativeSequence"}]}}}],"meta":{},"color":"#C0DEED","icon":"font-awesome/fa-angle-right"},{"id":"c66966a2d36f06b5","type":"function","z":"dd8835083692860a","name":"add sizing","func":"\nmsg.annotations={};\nmsg.annotations.sizing={};\nmsg.annotations.sizing.memory=env.get('memory');\nmsg.annotations.sizing.timeout=env.get('timeout');\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n//msg.payload.imageName=env.get('Image Name');\n//return msg;","finalize":"","libs":[],"x":300,"y":60,"wires":[[]]},{"id":"dd8835083692860a","type":"subflow","name":"SizingAnnotator","info":"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\n\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\n","category":"PHYSICS Annotators","in":[{"x":120,"y":60,"wires":[{"id":"c66966a2d36f06b5"}]}],"out":[{"x":440,"y":60,"wires":[{"id":"c66966a2d36f06b5","port":0}]}],"env":[{"name":"memory","type":"num","value":"","ui":{"label":{"en-US":"Memory (MB)"}}},{"name":"timeout","type":"num","value":"","ui":{"icon":"font-awesome/fa-times-circle-o","label":{"en-US":"Timeout (millisecs)"}}}],"meta":{},"color":"#E9967A","icon":"font-awesome/fa-arrows-h"},{"id":"a1b2b984f0c8eebd","type":"comment","z":"cc355ea3b5a58c54","name":"README","info":"The node is used to indicate at the flow level the locality of this flow with relation to a set of standard locations by name ","x":400,"y":220,"wires":[]},{"id":"cc355ea3b5a58c54","type":"subflow","name":"Locality(flow level) (2)","info":"","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"locality","type":"str","value":""}],"meta":{},"color":"#D8BFD8","icon":"font-awesome/fa-braille"},{"id":"a80b2fa1299e3bb8","type":"tls-config","z":"3352c7dddc9aad6d","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false,"alpnprotocol":""},{"id":"b9c86339cffd54ea","type":"http request","z":"3352c7dddc9aad6d","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"a80b2fa1299e3bb8","persist":false,"proxy":"","authType":"","x":370,"y":180,"wires":[["27c3b0af40ccb4e0"]]},{"id":"60d351e91c4f1f19","type":"function","z":"3352c7dddc9aad6d","name":"create dynamic","func":"//msg.headers={};\n\n\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\nconst prophost='__'+env.get('actionName')+'_HOST';\nconst propcreds='__'+env.get('actionName')+'_CREDS';\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\n\n//retrieve from incoming msg params\nmsg.namespace=msg.payload.value[propnamespace];\nmsg.creds=msg.payload.value[propcreds];\nmsg.baseurl=msg.payload.value[prophost];\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\n\n//delete info so that it does not leak into the newly called function, we dont know how the payload \n//is going to be used after that\n\ndelete msg.payload.value[propcreds];\ndelete msg.payload.value[propnamespace];\ndelete msg.payload.value[prophost]\n\n\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\nvar input=msg.payload.value;\nmsg.payload={};\nmsg.payload=input;\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":200,"y":180,"wires":[["b9c86339cffd54ea"]]},{"id":"27c3b0af40ccb4e0","type":"function","z":"3352c7dddc9aad6d","name":"add activation id","func":"\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\n//msg.oldheaders=msg.headers;\n//msg.headers={};\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":180,"wires":[["5e15f34e1caa9fe7"]]},{"id":"5e15f34e1caa9fe7","type":"subflow:789351ac.02c9d","z":"3352c7dddc9aad6d","name":"","env":[{"name":"maxAttempts","value":"20","type":"str"},{"name":"pollPeriod","value":"3000","type":"num"},{"name":"method","value":"GET","type":"str"},{"name":"functionChain","value":"false","type":"bool"}],"x":610,"y":260,"wires":[["b84a3ec8968b0617","47a494805843dcd7"],[],[]]},{"id":"b84a3ec8968b0617","type":"function","z":"3352c7dddc9aad6d","name":"reduce output","func":"//msg.headers={};\nvar response=msg.payload.response;\nmsg.payload={};\nmsg.payload.response=response;\n\nreturn msg;\n//return msg.oldmsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":280,"wires":[[]]},{"id":"47a494805843dcd7","type":"debug","z":"3352c7dddc9aad6d","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":610,"y":60,"wires":[]},{"id":"3352c7dddc9aad6d","type":"subflow","name":"Dynamic OW action","info":"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\n\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\n\n\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\n$ACTIONNAME_OW_CREDS=user:pwd\n\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\n\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.\n\nPENDING: check how to pass token from UI to http request node","category":"PHYSICS Annotators","in":[{"x":80,"y":180,"wires":[{"id":"60d351e91c4f1f19"}]}],"out":[{"x":980,"y":280,"wires":[{"id":"b84a3ec8968b0617","port":0}]}],"env":[{"name":"dynamicActionName","type":"str","value":"dockeraction"}],"meta":{},"color":"#C0DEED","icon":"node-red/function.svg"},{"id":"a80b2fa1299e3bb8","type":"tls-config","z":"3352c7dddc9aad6d","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false,"alpnprotocol":""},{"id":"b9c86339cffd54ea","type":"http request","z":"3352c7dddc9aad6d","name":"","method":"POST","ret":"obj","paytoqs":"ignore","url":"","tls":"a80b2fa1299e3bb8","persist":false,"proxy":"","authType":"","x":370,"y":180,"wires":[["27c3b0af40ccb4e0"]]},{"id":"60d351e91c4f1f19","type":"function","z":"3352c7dddc9aad6d","name":"create dynamic","func":"//msg.headers={};\n\n\n//get info from incoming function params based on the action name given by the user in the Dynamic Action UI\nconst prophost='__'+env.get('actionName')+'_HOST';\nconst propcreds='__'+env.get('actionName')+'_CREDS';\nconst propnamespace='__'+env.get('actionName')+'_NAMESPACE';\n\n//retrieve from incoming msg params\nmsg.namespace=msg.payload.value[propnamespace];\nmsg.creds=msg.payload.value[propcreds];\nmsg.baseurl=msg.payload.value[prophost];\nmsg.url=msg.payload.value[prophost]+'namespaces/'+msg.namespace+'/actions/'+env.get('actionName');\n\n//delete info so that it does not leak into the newly called function, we dont know how the payload \n//is going to be used after that\n\ndelete msg.payload.value[propcreds];\ndelete msg.payload.value[propnamespace];\ndelete msg.payload.value[prophost]\n\n\n//denote msg.payload.value which is the normal payload to msg.payload since it is like this that the \n//inner function awaits it. Otherwise it will be in msg.payload.value.value from the follow-up OW call\nvar input=msg.payload.value;\nmsg.payload={};\nmsg.payload=input;\n\nmsg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":200,"y":180,"wires":[["b9c86339cffd54ea"]]},{"id":"27c3b0af40ccb4e0","type":"function","z":"3352c7dddc9aad6d","name":"add activation id","func":"\nmsg.activationID=msg.headers['x-openwhisk-activation-id'];\n//msg.oldheaders=msg.headers;\n//msg.headers={};\nmsg.url=msg.baseurl+'namespaces/'+msg.namespace+'/activations/'+msg.activationID;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":540,"y":180,"wires":[["5e15f34e1caa9fe7"]]},{"id":"5e15f34e1caa9fe7","type":"subflow:789351ac.02c9d","z":"3352c7dddc9aad6d","name":"","env":[{"name":"maxAttempts","value":"20","type":"str"},{"name":"pollPeriod","value":"3000","type":"num"},{"name":"method","value":"GET","type":"str"},{"name":"functionChain","value":"false","type":"bool"}],"x":610,"y":260,"wires":[["b84a3ec8968b0617","47a494805843dcd7"],[],[]]},{"id":"b84a3ec8968b0617","type":"function","z":"3352c7dddc9aad6d","name":"reduce output","func":"//msg.headers={};\nvar response=msg.payload.response;\nmsg.payload={};\nmsg.payload.response=response;\n\nreturn msg;\n//return msg.oldmsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":840,"y":280,"wires":[[]]},{"id":"47a494805843dcd7","type":"debug","z":"3352c7dddc9aad6d","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":610,"y":60,"wires":[]},{"id":"3352c7dddc9aad6d","type":"subflow","name":"Dynamic OW action","info":"This node wraps around a typical http request node in order to have a specific type indicating a call to an Openwhisk action.\n\nThis annotation is needed for later stages of the PHYSICS platform, in which calls to OW actions need to be distinguished from calls to any other external REST API. Through this information, the platform and infrastructure services can understand which parts of the flow target OW actions in case of splitting of the flow in multiple OW locations.\n\n\nFurthermore, it is used to instantiate dynamic workflows in which the developer does not know beforehand at which OW endpoint each action is going to be deployed. For this reason the relevant information for all actions is retrieved through environment variables inside the OW action container that is intended to run this orchestrator flow. The convention is as follows:\n$ACTIONNAME_OW_ENDPOINT=http://10.100.59.183:3233\n$ACTIONNAME_OW_CREDS=user:pwd\n\nIn case of a POST method, msg.payload is assumed to carry the body of the call. The node returns JSON object, since this is the typical return object of an Openwhisk action.\n\nThis flow should be executed as a service or as a OW action. In case of usage in a manual way in a typical node-red flow, without environment variable population, the information from the UI may be used.\n\nWe have maintained the UI configuration of the OW action node, so that we can use this flow also in\na typical nodered environment. However the retrieved information from the environment variables prevail\nover the set ones in the UI.\n\nPENDING: check how to pass token from UI to http request node","category":"PHYSICS Annotators","in":[{"x":80,"y":180,"wires":[{"id":"60d351e91c4f1f19"}]}],"out":[{"x":980,"y":280,"wires":[{"id":"b84a3ec8968b0617","port":0}]}],"env":[{"name":"dynamicActionName","type":"str","value":"dockeraction"}],"meta":{},"color":"#C0DEED","icon":"node-red/function.svg"},{"id":"2934f390.711324","type":"tls-config","z":"789351ac.02c9d","name":"","cert":"","key":"","ca":"","certname":"","keyname":"","caname":"","servername":"","verifyservercert":false},{"id":"7d194c10.33b51c","type":"function","z":"789351ac.02c9d","name":"defaults+activation id","func":"\nif (msg.hasOwnProperty('maxAttempts')){\n    msg.iterations=msg.maxAttempts;\n} else {\n    msg.iterations=env.get('maxAttempts');\n}\n//needed to reset the iterations after function chaining\nmsg.defaultAttempts=msg.iterations;\n\nif (msg.hasOwnProperty('pollPeriod')){\n    \n} else {\n    msg.pollPeriod=env.get('pollPeriod');\n}\n\nif (msg.hasOwnProperty('method')){\n    \n} else {\n    msg.method=env.get('method');\n}\n\nif (msg.hasOwnProperty('url')){\n    \n} else {\n    msg.url=env.get('url');\n}\n\nif (msg.hasOwnProperty('retryCode')){\n    \n} else {\n    msg.retryCode=env.get('retryCode');\n}\n\nif (msg.hasOwnProperty('acceptCode')){\n    \n} else {\n    msg.acceptCode=env.get('acceptCode');\n}\n\nif (msg.hasOwnProperty('creds')){\n    \n} else {\n    msg.creds=env.get('creds');\n}\n\nif (msg.hasOwnProperty('functionChain')){\n    \n} else {\n    msg.functionChain=env.get('functionChain');\n}\n\nif (msg.hasOwnProperty('inputData')){\n    if (msg.inputData.hasOwnProperty('creds')){\n        msg.creds=msg.inputData.creds;\n    }\n}\n\n\n\nmsg.delay=msg.pollPeriod;\nmsg.start=Date.now();\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":200,"y":160,"wires":[["cad17b04.a2b4d8"]]},{"id":"4be3f205.3e8dc4","type":"function","z":"789351ac.02c9d","name":"iterations--","func":"msg.iterations=msg.iterations-1;\n/*\nif (flow.get('stop')==true){\n    msg.iterations=-1;\n}*/\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":300,"wires":[["c2cf68b7.263d4","d8305759.866988"]]},{"id":"c2cf68b7.263d4","type":"switch","z":"789351ac.02c9d","name":"if iterations finished","property":"iterations","propertyType":"msg","rules":[{"t":"gte","v":"1","vt":"num"},{"t":"lt","v":"1","vt":"num"}],"checkall":"true","repair":false,"outputs":2,"x":550,"y":300,"wires":[["cad17b04.a2b4d8"],[]]},{"id":"76299695.812bd8","type":"comment","z":"789351ac.02c9d","name":"SUCCESS","info":"","x":1100,"y":60,"wires":[]},{"id":"48093072.b17a6","type":"comment","z":"789351ac.02c9d","name":"FINAL FAIL","info":"","x":890,"y":360,"wires":[]},{"id":"d5960f2f.2e9448","type":"delay","z":"789351ac.02c9d","name":"delay","pauseType":"delayv","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"outputs":1,"x":170,"y":300,"wires":[["4be3f205.3e8dc4"]]},{"id":"471b3d64.265894","type":"http request","z":"789351ac.02c9d","name":"","method":"GET","ret":"obj","paytoqs":"ignore","url":"","tls":"2934f390.711324","persist":false,"proxy":"","authType":"","x":590,"y":160,"wires":[["8694180b.ec1c68"]]},{"id":"8694180b.ec1c68","type":"switch","z":"789351ac.02c9d","name":"Status code check","property":"statusCode","propertyType":"msg","rules":[{"t":"lte","v":"acceptCode","vt":"msg"},{"t":"gte","v":"retryCode","vt":"msg"}],"checkall":"true","repair":false,"outputs":2,"x":810,"y":160,"wires":[["f9d0aba7.72382"],["d5960f2f.2e9448"]]},{"id":"ef03414f.ad9d78","type":"comment","z":"789351ac.02c9d","name":"RETRY FAIL","info":"","x":890,"y":260,"wires":[]},{"id":"66bbc0cf.0c62f","type":"debug","z":"789351ac.02c9d","name":"BEFORE AUTH","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":370,"y":100,"wires":[]},{"id":"13791c2d.8cea7c","type":"debug","z":"789351ac.02c9d","name":"URL","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"url","targetType":"msg","statusVal":"","statusType":"auto","x":580,"y":100,"wires":[]},{"id":"cad17b04.a2b4d8","type":"function","z":"789351ac.02c9d","name":"add auth","func":"msg.headers={};\nvar auth = 'Basic ' + new Buffer(msg.creds).toString('base64');\nmsg.headers = {\n    \"Authorization\": auth\n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":160,"wires":[["471b3d64.265894","13791c2d.8cea7c"]]},{"id":"f2b7c4e4.a24c3","type":"function","z":"789351ac.02c9d","name":"adapt to new activation","func":"\n\nmsg.url=msg.payload.response.result.newActivationIDURL;\nmsg.iterations=msg.defaultAttempts+1;\nconsole.log('IN ADAPTATION TO ACTIVATION',msg.url);\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1500,"y":160,"wires":[["d5960f2f.2e9448","ee1dbf44.7368f8"]]},{"id":"c338e47b.b00ed","type":"comment","z":"789351ac.02c9d","name":"FUNCTION CHAIN CONTINUATION","info":"","x":1240,"y":240,"wires":[]},{"id":"ee1dbf44.7368f8","type":"debug","z":"789351ac.02c9d","name":"AFTER CONTINUATION IN Poll2Push","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1420,"y":300,"wires":[]},{"id":"f9d0aba7.72382","type":"switch","z":"789351ac.02c9d","name":"is Chain","property":"functionChain","propertyType":"msg","rules":[{"t":"false"},{"t":"true"}],"checkall":"true","repair":false,"outputs":2,"x":1020,"y":160,"wires":[[],["6da1eea0.969368","1bbc6fa0.4879c"]]},{"id":"6da1eea0.969368","type":"debug","z":"789351ac.02c9d","name":"RESULT STATUS","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1100,"y":300,"wires":[]},{"id":"f20a68d.9711598","type":"debug","z":"789351ac.02c9d","name":"AFTER CODE CHECK","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"functionChain","targetType":"msg","x":890,"y":100,"wires":[]},{"id":"36905e62.dfad92","type":"debug","z":"789351ac.02c9d","name":"TOP1","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1120,"y":100,"wires":[]},{"id":"9610a737.bf275","type":"debug","z":"789351ac.02c9d","name":"TOP2","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1300,"y":100,"wires":[]},{"id":"c52af08f.756ee8","type":"debug","z":"789351ac.02c9d","name":"TOP3","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","x":1600,"y":100,"wires":[]},{"id":"1bbc6fa0.4879c","type":"function","z":"789351ac.02c9d","name":"compare completion","func":"console.log('IN COMPARE COMPLETION',msg.payload.response);\nif (msg.payload.response.result.status==='Completed'){\n    return [msg,null];\n} else {\n    return [null,msg];\n}\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1240,"y":160,"wires":[["c52af08f.756ee8"],["f2b7c4e4.a24c3"]]},{"id":"d8305759.866988","type":"debug","z":"789351ac.02c9d","name":"URL","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"iterations","targetType":"msg","x":500,"y":380,"wires":[]},{"id":"789351ac.02c9d","type":"subflow","name":"PollTOPushConverterFC","info":"This helper node aims at performing synchronous calls for polling in case of an async API (calls that return prior to completion, e.g. in the case of non blocking calls in OW, the initial request is returned with a submission success and an activation id in order to follow up on the result). The main difference from the main PollTOPushConverter is that it supports also function chaining (through a msg.functionChain or UI set boolean parameter).\n\nThe according function should return as a response the following structure:\n- have a result.status field with the 'Completed' (if chain is finished) or 'Continuing' string if the function has handed over to a new function in the chain.\n- have a result.newActivationIDURL field that indicates the updated ID with which to check the follow-up action's status \n\nThe node also can get credentials from the msg.creds field of the input message.\n\nThe remaining operations are similar with the standard PollTOPushConverter. The node does polling to a specific endpoint in order to detect whether the function has successfully finished\n\nThe node has three outputs:\n - Output 1 indicates successful finalization of the API call\n - Output 2 indicates intermediate failure and was added to return the reason for failure\n - Output 3 indicates final failure after max attempts\n\nCurrently the node assumes that in case of failure we get a >=40X return code, but this may not always be the case.\n\nThe node can be configured for the URL (msg.url), the HTTP method (msg.method), the maximum attempts (msg.maxAttempts), polling period (msg.pollPeriod), the status code above which to retry (msg.retryCode) and the status code for deciding the final success (msg.acceptCode). The msg properties override the UI set properties.\n\nGiven that conditions upon which the initial call needs to be polled are highly dependent on the used API, the node assumes that the initial call has been performed a priori.\n\nCredentials for accessing the HTTP endpoint can be set via msg.creds or through the UI (input msg prevails).\n \n","category":"PHYSICS Helpers","in":[{"x":60,"y":160,"wires":[{"id":"7d194c10.33b51c"}]}],"out":[{"x":1380,"y":40,"wires":[{"id":"f9d0aba7.72382","port":0},{"id":"1bbc6fa0.4879c","port":0}]},{"x":780,"y":260,"wires":[{"id":"c2cf68b7.263d4","port":0}]},{"x":780,"y":360,"wires":[{"id":"c2cf68b7.263d4","port":1}]}],"env":[{"name":"maxAttempts","type":"str","value":"3"},{"name":"pollPeriod","type":"str","value":"3000"},{"name":"method","type":"str","value":""},{"name":"url","type":"str","value":"http://10.100.59.182:3233/api/v1/namespaces/_/activations/"},{"name":"retryCode","type":"num","value":"202"},{"name":"acceptCode","type":"num","value":"200"},{"name":"functionChain","type":"bool","value":"true"}],"meta":{},"color":"#b4e8a9"}],"artifact":"registry.apps.ocphub.physics-faas.eu/custom/aherget:10","type":"image"},{"flowID":"48c8d5fcf45af123","flowName":"simple_qc","flow":[{"id":"48c8d5fcf45af123","type":"tab","label":"simple_qc","disabled":false,"info":"","env":[]},{"id":"3e4008afcef21679","type":"subflow:b5d1dcf74fe240aa","z":"48c8d5fcf45af123","name":"","env":[{"name":"customImage","value":"registry.apps.ocphub.physics-faas.eu/external-uploaded/physics-test-aherget:v1","type":"str"}],"x":790,"y":360,"wires":[]},{"id":"626cb7ccd6b044a6","type":"subflow:dd8835083692860a","z":"48c8d5fcf45af123","name":"","env":[{"name":"memory","value":"512","type":"num"}],"x":740,"y":440,"wires":[[]]},{"id":"f9bb1731578b6903","type":"subflow:16204fd1ca5591c5","z":"48c8d5fcf45af123","name":"","env":[{"name":"goal","value":"availability","type":"str"}],"x":680,"y":240,"wires":[]},{"id":"25e8c046a47e4bfe","type":"comment","z":"b5d1dcf74fe240aa","name":"Subflows need at least 1 node inside","info":"","x":250,"y":80,"wires":[]},{"id":"b5d1dcf74fe240aa","type":"subflow","name":"Custom Function Image Importer","info":"This node includes the necessary fields in order to declare an external image as an existing Openwhisk action. Contrary to the Function Importer node, it assumes that the function registration will be performed to a known and existing OW instance from a flow inside Node-RED.\n\nThe external image needs to be ready to be executed on Openwhisk, i.e. implementing the necessary POST /init and /run methods on port 8080.\n\nAlternatively it can be included in a flow as a regular node, in which case it does not affect the msg.payload and creates a msg.annotations object that includes the defined values.\n\nThis can later on be used in order to perform the necessary actions from other helper flows.","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"customImage","type":"str","value":""}],"meta":{},"color":"#FFCC66","icon":"font-awesome/fa-arrow-right"},{"id":"c66966a2d36f06b5","type":"function","z":"dd8835083692860a","name":"add sizing","func":"\nmsg.annotations={};\nmsg.annotations.sizing={};\nmsg.annotations.sizing.memory=env.get('memory');\nmsg.annotations.sizing.timeout=env.get('timeout');\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n//msg.payload.imageName=env.get('Image Name');\n//return msg;","finalize":"","libs":[],"x":300,"y":60,"wires":[[]]},{"id":"dd8835083692860a","type":"subflow","name":"SizingAnnotator","info":"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\n\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\n","category":"PHYSICS Annotators","in":[{"x":120,"y":60,"wires":[{"id":"c66966a2d36f06b5"}]}],"out":[{"x":440,"y":60,"wires":[{"id":"c66966a2d36f06b5","port":0}]}],"env":[{"name":"memory","type":"num","value":"","ui":{"label":{"en-US":"Memory (MB)"}}},{"name":"timeout","type":"num","value":"","ui":{"icon":"font-awesome/fa-times-circle-o","label":{"en-US":"Timeout (millisecs)"}}}],"meta":{},"color":"#E9967A","icon":"font-awesome/fa-arrows-h"},{"id":"8303025f7940685a","type":"comment","z":"16204fd1ca5591c5","name":"README","info":"The node is used to set the desired optimization goal: performance/energy","x":340,"y":160,"wires":[]},{"id":"16204fd1ca5591c5","type":"subflow","name":"Optimization Goal (Flow Level) (2)","info":"","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"goal","type":"str","value":"","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"performance"},"v":"performance"},{"l":{"en-US":"energy"},"v":"energy"},{"l":{"en-US":"availability"},"v":"availability"}]}}}],"meta":{},"color":"#FFAAAA","icon":"font-awesome/fa-sliders"}],"artifact":"registry.apps.ocphub.physics-faas.eu/custom/aherget:7","type":"image"},{"flowID":"ef04bbdffd041a11","flowName":"complex_qc","flow":[{"id":"ef04bbdffd041a11","type":"tab","label":"complex_qc","disabled":false,"info":"","env":[]},{"id":"cc1334c9cc8313a3","type":"subflow:b5d1dcf74fe240aa","z":"ef04bbdffd041a11","name":"","env":[{"name":"customImage","value":"registry.apps.ocphub.physics-faas.eu/external-uploaded/phy-qc-compl-aherget:v5","type":"str"}],"x":890,"y":420,"wires":[]},{"id":"b953f753df04ebc4","type":"subflow:dd8835083692860a","z":"ef04bbdffd041a11","name":"","env":[{"name":"memory","value":"512","type":"num"}],"x":840,"y":500,"wires":[[]]},{"id":"48fb6bfa6a7412be","type":"subflow:16204fd1ca5591c5","z":"ef04bbdffd041a11","name":"","env":[{"name":"goal","value":"performance","type":"str"}],"x":600,"y":220,"wires":[]},{"id":"25e8c046a47e4bfe","type":"comment","z":"b5d1dcf74fe240aa","name":"Subflows need at least 1 node inside","info":"","x":250,"y":80,"wires":[]},{"id":"b5d1dcf74fe240aa","type":"subflow","name":"Custom Function Image Importer","info":"This node includes the necessary fields in order to declare an external image as an existing Openwhisk action. Contrary to the Function Importer node, it assumes that the function registration will be performed to a known and existing OW instance from a flow inside Node-RED.\n\nThe external image needs to be ready to be executed on Openwhisk, i.e. implementing the necessary POST /init and /run methods on port 8080.\n\nAlternatively it can be included in a flow as a regular node, in which case it does not affect the msg.payload and creates a msg.annotations object that includes the defined values.\n\nThis can later on be used in order to perform the necessary actions from other helper flows.","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"customImage","type":"str","value":""}],"meta":{},"color":"#FFCC66","icon":"font-awesome/fa-arrow-right"},{"id":"c66966a2d36f06b5","type":"function","z":"dd8835083692860a","name":"add sizing","func":"\nmsg.annotations={};\nmsg.annotations.sizing={};\nmsg.annotations.sizing.memory=env.get('memory');\nmsg.annotations.sizing.timeout=env.get('timeout');\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\n\n//msg.payload.imageName=env.get('Image Name');\n//return msg;","finalize":"","libs":[],"x":300,"y":60,"wires":[[]]},{"id":"dd8835083692860a","type":"subflow","name":"SizingAnnotator","info":"This node should be used to dictate what is the necessary size in terms of memory and timeout of the registered action in Openwhisk.\n\nIt is assumed that this node is used at the flow level, indicating that the annotation refers to the container configuration of a docker action that includes the overall flow in the used tab.\n","category":"PHYSICS Annotators","in":[{"x":120,"y":60,"wires":[{"id":"c66966a2d36f06b5"}]}],"out":[{"x":440,"y":60,"wires":[{"id":"c66966a2d36f06b5","port":0}]}],"env":[{"name":"memory","type":"num","value":"","ui":{"label":{"en-US":"Memory (MB)"}}},{"name":"timeout","type":"num","value":"","ui":{"icon":"font-awesome/fa-times-circle-o","label":{"en-US":"Timeout (millisecs)"}}}],"meta":{},"color":"#E9967A","icon":"font-awesome/fa-arrows-h"},{"id":"8303025f7940685a","type":"comment","z":"16204fd1ca5591c5","name":"README","info":"The node is used to set the desired optimization goal: performance/energy","x":340,"y":160,"wires":[]},{"id":"16204fd1ca5591c5","type":"subflow","name":"Optimization Goal (Flow Level) (2)","info":"","category":"PHYSICS Annotators","in":[],"out":[],"env":[{"name":"goal","type":"str","value":"","ui":{"type":"select","opts":{"opts":[{"l":{"en-US":"performance"},"v":"performance"},{"l":{"en-US":"energy"},"v":"energy"},{"l":{"en-US":"availability"},"v":"availability"}]}}}],"meta":{},"color":"#FFAAAA","icon":"font-awesome/fa-sliders"}],"artifact":"registry.apps.ocphub.physics-faas.eu/custom/aherget:8","type":"image"}],"displayName":"","branchName":"aherget"}